<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[自言自语]]></title>
  <link href="http://liubin.github.io/atom.xml" rel="self"/>
  <link href="http://liubin.github.io/"/>
  <updated>2016-02-26T22:58:50+08:00</updated>
  <id>http://liubin.github.io/</id>
  <author>
    <name><![CDATA[bin liu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2016年2月读书记录]]></title>
    <link href="http://liubin.github.io/blog/2016/02/26/2016-02-reading/"/>
    <updated>2016-02-26T22:56:54+08:00</updated>
    <id>http://liubin.github.io/blog/2016/02/26/2016-02-reading</id>
    <content type="html"><![CDATA[<p>2月看的书，基本都是在前15天完成的，其中过年几天回老家，无事可干，在微信读书上看完了《蒋经国传》、《日本商业四百年1》和《我们台湾这些年》，《一百年漂泊》是纸版，大概看了3、4个晚上。</p>

<p>基本上关于台湾的书占了大多数，对台湾、国民党以及现代台湾整治社会也算有了些更深入地理解。同时也对台湾越来越有好感，希望能早些去台湾看看。当然工作签证最好了 ：-）。</p>

<p>不多说了，下面逐条记录一下。</p>

<h2>《蒋经国传》</h2>

<p><img src="http://img3.douban.com/lpic/s11328585.jpg" alt="" /></p>

<p>推荐指数：★★★★★</p>

<p>这本书从蒋经国的出生，到逝世，最后以李登辉上台结尾。</p>

<p>蒋经国生母毛氏不受蒋介石待见，当然也影响到了幼年时代的蒋经国。在革命初期，国民党还在和苏联合作，蒋经国也到苏联留学，后来国、苏关系紧张，蒋经国以类似人质的方式滞留苏联12年，还差点死在苏联。</p>

<p>回国后，其父当政，蒋经国赴江西任职，在江西禁烟、禁赌、禁娼妓，整治社会风气、促进了经济发展，貌似成绩还不错。</p>

<p>后来二战结束后，法币贬值、经济崩溃之际，又去上海改革货币，但以失败告终，最终退守台湾。</p>

<p>蒋经国在其父逝世后开始执政，加速了台湾社会和经济的发展，尤其是在政治方面的改革，开放党禁、启用新人，让更多的人参与到整治、台湾的建设，让台湾的民主进程提高到了新的阶段。这是让人佩服和羡慕的。</p>

<p>或许，民主不是蒋经国带来的，只是历史必然潮流。。。</p>

<h2>《日本商业四百年》、《日本商业四百年2：从黑暗帝国到战后崛起》</h2>

<p><img src="http://img3.douban.com/lpic/s9018203.jpg" alt="" />
<img src="http://img3.doubanio.com/lpic/s10405009.jpg" alt="" /></p>

<p>推荐指数：★★★★★</p>

<p>日本商业四百年，现在看起来至少由1、2、3册构成，第一层出版于2011年，《日本商业四百年2：从黑暗帝国到战后崛起》出版于2015年1月，相信第三本应该很快就会出来了。</p>

<p>本书主要介绍了日本四大财团三井、三菱、住友、安田的创建、发展历史，总结一下其特点主要有：</p>

<ul>
<li>儒教 + 武士精神。仁义礼智信加上勇往直前、无所畏惧。</li>
<li>政商结合。政府依靠财团的资金和对经济的促进，财团依靠政府关系获得经营权和政策支持。</li>
<li>经理人制度。创始家族持股做老大，雇佣专门大管家管理公司。</li>
<li>向西方学习。不是一味的自闭和排外，而是积极学习，真正的“师夷长技以制夷”。</li>
</ul>


<p>第2册则加入了索尼、丰田、松下这样的公司，这些公司创立之初、发展之际，也都受到了大财团在资金、人脉上的资助。此外还讲述了一些二战的事情，算是额外附送的福利，也挺有趣。</p>

<p>期待第三本，应该会详细介绍现代企业家，比如稻盛和夫。</p>

<h2>《三双鞋》</h2>

<p><img src="https://img1.doubanio.com/lpic/s4499697.jpg" alt="" /></p>

<p>推荐指数：★★★★★</p>

<p>这本书还不太好买，京东、亚马逊、当当自营都没有，找了好几个第三方才买到。</p>

<p>原书为英文版《Delivering Happiness:A Path to Profits, Passion, and Purpose》，中文版由其父翻译。</p>

<p>本书是“美捷步”（Zappos）首席执行官谢家华创造奇迹的心路历程与商业哲学的精华萃取，分享了他在商场与生活中得到的宝贵经验与教训。谢家华毕业于哈佛大学，24岁时即将其创业公司Link Exchange以2.65亿美元卖给微软。</p>

<p>谢家华在卖掉Link Exchange，创建了一个基金“青蛙风险”，投资了Zappos。后来谢家华干脆做起了Zappos的CEO，本书很大一部分都是讲其在Zappos的奋斗史：如何买房子以维持Zappos的运营，如何自建仓库来提高销售额，如何为公司继续融资等。但其根本想表达的是，他想要创建一种什么样公司文化。</p>

<h2>《一百年漂泊》</h2>

<p><img src="https://img3.doubanio.com/lpic/s28375650.jpg" alt="" /></p>

<p>推荐指数：★★★★★</p>

<p>作者杨渡根据自己的记忆，书写的家庭自传，父亲、目前，奶奶，亲族。同时，也是一部台湾战后发展史，从日殖民时代，国民党控制之后的白色恐怖、从农业到工业社会的转变，民主政治发展。</p>

<p>作者父亲生下来就已经是日本殖民时代，从小接受日语教育，所以父辈互相称呼还用日语。而作者父亲作为锅炉行业的从业人员，看的技术书也都是日语的。</p>

<p>后来日本战败，国民党退守台湾，之后的进程，都像极了现在的大陆社会，只不过中间有30年的错位。大陆的工业化、改革开放，比台湾晚了近30年，台湾发展经历过的，我们也正在经历着。</p>

<ul>
<li>工业污染。童年时代的小何已经干涸，大河里堆满了垃圾，冒着各种颜色的液体，散发着各种刺鼻的味道。</li>
<li>人心浮躁。突然有了钱，人就不知道该怎么生活了，攀比、铺张浪费。</li>
<li>充满机会。这是一个最好的时代，恐怕以后都很难出现。各行业都在坡博发展，到处都是机会，任何人努力都可以成功。</li>
<li>女性解放。女性的地位越来越高，为家庭、为男人的事业付出的代价和发挥的作用都不可小觑。</li>
<li>故乡纽带。家庭、家族间，朋友间，乡里之间，都有一条纽带相连。我想这是亚洲人或者说中华民族特有的家族观念。</li>
</ul>


<p>所谓的叶落归根，每个人都在怀念童年，童年的时代不会再来，下一代理解不了上一带，对生活在60-70年代的人来说，年轻人应该很难体会什么叫“故乡”这种感觉。那时候的生活是简单的，天空蓝蓝，水里有鱼。而现在人和人的距离更近了，可以“面对面的通话”（作者父亲在看到电话后的畅想），而心和心的距离却越来越远。每个人都会怀念过去，想回到过去，记忆中的家乡就是精神的家乡，温暖地活下去的原点。</p>

<p>人生就是在漂泊，家就是漂泊的原点和终点。</p>

<h2>《我们台湾这些年》</h2>

<p><img src="http://img3.doubanio.com/lpic/s6088056.jpg" alt="" /></p>

<p>推荐指数：★★★★☆</p>

<p>这本书和上面的一本很类似，几乎就是一本个人的流水账，主要就是每年都发生了什么大事件，不管是整治、经济还是娱乐圈。</p>

<h2>《时间的朋友2015》</h2>

<p><img src="http://img3.douban.com/lpic/s28377483.jpg" alt="" /></p>

<p>推荐指数：★★★★☆</p>

<p>这是罗振宇2015跨年演讲，回顾了一下2015年，包括风险投资和资本寒冬、O2O合并大战、微信VS支付宝、华为VS小米、IP等热门现象，还分析了暴风影音和乐视两只妖股。推荐看一下。</p>

<p>一些文中摘录，值得体味一下：</p>

<ul>
<li>马克思曾说，人的本质就是社会关系的总和。</li>
<li>《乔布斯传》的作者艾萨克森说：“贝佐斯试图依靠增长速度，而不是利润来建构一个公司。这听起来有些不可思议。但这种理念无论是好是坏，无疑都已经改变了1999年之后的整个经济模式。”</li>
<li>我们这一代创业者，面对两个时代性的机会：一个是互联网科技大爆发，一个是中国中产阶级的崛起。</li>
<li>黄韬的说法，和马云的说法一样——未来阿里的本质，是一家大数据公司</li>
</ul>


<p>三月的计划是看完几本和京都相关的书，不过三月的话有一些比较重要且耗费时间的工作投入较大，可能会影响阅读的数量。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[时序列数据库武斗大会之TSDB名录 Part 1]]></title>
    <link href="http://liubin.github.io/blog/2016/02/25/tsdb-list-part-1/"/>
    <updated>2016-02-25T22:20:21+08:00</updated>
    <id>http://liubin.github.io/blog/2016/02/25/tsdb-list-part-1</id>
    <content type="html"><![CDATA[<p>通过上一章<a href="http://liubin.github.io/blog/2016/02/18/tsdb-intro/">《时序列数据库武斗大会之什么是TSDB》</a>的介绍，相信大家已经知道了什么是时序列数据库，以及它能干什么，有什么特点等有了一定的了解。</p>

<p>那么在这一篇文章中，我们将介绍一下目前都有哪些TSDB，以及它们的特点，并基于个人观点，给出一定的（喜好）评判。</p>

<p>由于个人能力所限，有些地方调查可能不到位，再加上一定的个人主观因素，所以跟其他人的结论可能不一样，不过这应该也正常。没有调查就没有发言权，只有真正的深度用户的发言，才具有说服务力，你可以权当这里就当是我抛砖了。</p>

<p>另外，如何去选择一个TSDB，本文也列出了一些考虑因素，相信应该对各位都有一定的参考价值。</p>

<p>虽然也有人用ElasticSearch或者MongoDB来存储时序列数据，作为更适合分类为NOSQL的这两个数据库软件，我们这里就不对它们做介绍了。</p>

<h2>DB-Engines中时序列数据库排名</h2>

<p>我们先来看一下DB-Engines中关于时<a href="http://db-engines.com/en/ranking/time+series+dbms">序列数据库的排名</a></p>

<p>这是当前（2016年2月的）排名情况：</p>

<p><img src="http://liubin.github.io/images/2016/02/tsdb-series/tsdb-ranking.png" alt="" /></p>

<p>下面，我们就按照这个排名的顺序，简单介绍一下这些时序列数据库中的一些。下面要介绍的TSDB以开源的为主，如果是商业或者SaaS服务，也简单介绍一下其特点，让大家能对其他领域的事物也有所了解。</p>

<p>这里有一个例外，就是Pinot并不在这个排名里，但是我们也把它列在了这里。</p>

<h2>1. InfluxDB</h2>

<table>
<thead>
<tr>
<th> - </th>
<th> - </th>
<th> 备注 </th>
</tr>
</thead>
<tbody>
<tr>
<td> 主页 </td>
<td> <a href="https://influxdata.com/">https://influxdata.com/</a> </td>
<td>  </td>
</tr>
<tr>
<td> 编写语言 </td>
<td> Golang </td>
<td>  </td>
</tr>
<tr>
<td> License </td>
<td> MIT </td>
<td>  </td>
</tr>
<tr>
<td> 项目创建时间 </td>
<td> 2013 </td>
<td>  </td>
</tr>
<tr>
<td> 最新版 </td>
<td> v0.10.1 </td>
<td> 2016/2/18 </td>
</tr>
<tr>
<td> 活跃度 </td>
<td> 活跃 </td>
<td>  </td>
</tr>
<tr>
<td> 文档 </td>
<td> 详细 </td>
<td>  </td>
</tr>
</tbody>
</table>


<p>InfluxDB由Golang语言编写，也是由Golang编写的软件中比较著名的一个，在很多Golang的沙龙或者文章中可能都会把InfluxDB当标杆来介绍，这也间接帮助InfluxDB提高了知名度。</p>

<p>InfluxDB的主要特点包括下面这些：</p>

<ul>
<li>schemaless(无结构)，可以是任意数量的列</li>
<li>可扩展（集群）</li>
<li>方便、强大的查询语言</li>
<li>Native HTTP API</li>
<li>集成了数据采集、存储、可视化功能</li>
<li>实时数据Downsampling</li>
<li>高效存储，使用高压缩比算法，支持retention polices</li>
</ul>


<p>InfluxDB是TSDB中为数不多的进行了用户和角色方面实现的，提供了Cluster Admin、Database Admin和Database User三种角色。</p>

<p>InfluxDB的数据采集系统也支持多种协议和插件：
- 行文本
- UDP
- Graphite
- CollectD
- OpenTSDB</p>

<p>不过InfluxDB每次变动都较大，尤其是在存储和集群方面，追求平平安过日子，不想瞎折腾的可以考虑下。</p>

<p><strong>注意：</strong></p>

<p>由于InfluxDB开发太活跃了，很可能你在网上搜到的资料都是老的，会害到你，所以你需要<strong>以官方文档为主</strong>。</p>

<h2>2. RRDtool</h2>

<table>
<thead>
<tr>
<th> - </th>
<th> - </th>
<th> 备注 </th>
</tr>
</thead>
<tbody>
<tr>
<td> 主页 </td>
<td> <a href="http://oss.oetiker.ch/rrdtool/index.en.html">http://oss.oetiker.ch/rrdtool/index.en.html</a> </td>
<td>  </td>
</tr>
<tr>
<td> 编写语言 </td>
<td> C语言 </td>
<td>  </td>
</tr>
<tr>
<td> License </td>
<td> GNU GPL V2 </td>
<td>  or later </td>
</tr>
<tr>
<td> 项目创建时间 </td>
<td> 16-Jul-1999 </td>
<td> rrdtool-1.0.0 </td>
</tr>
<tr>
<td> 最新版 </td>
<td> rrdtool-1.5.5 </td>
<td> 10-Nov-2015 </td>
</tr>
<tr>
<td> 活跃度 </td>
<td> 活跃 </td>
<td>  </td>
</tr>
<tr>
<td> 文档 </td>
<td> 详细 </td>
<td>  </td>
</tr>
</tbody>
</table>


<p>RRDtool全称为<strong>Round Robin Database Tool</strong>，也就是用于操作RRD的工具，简单明了的软件名。</p>

<p>什么是RRD呢？简单来说它就是一个循环使用的固定大小的数据库文件（其实也不太像典型的数据库）。</p>

<p>大体来说，RRDtool提供的主要工具如下：</p>

<ul>
<li>创建RRD（rrdtool create）</li>
<li>更新RRD（rrdtool update）</li>
<li>画图（rrdtool graph）</li>
</ul>


<p>这其中，画图功能是最复杂也是最强大的，甚至支持下面这些图形，这是其他TSDB中少见的：</p>

<ul>
<li>指标比较，对两个指标值进行计算，描画出满足条件的区域</li>
<li>移动平均线</li>
<li>和历史数据进行对比</li>
<li>基于最小二乘法的线性预测</li>
<li>曲线预测</li>
</ul>


<p>总之，它的画图功能太丰富了。</p>

<h2>3. Graphite</h2>

<table>
<thead>
<tr>
<th> - </th>
<th> - </th>
<th> 备注 </th>
</tr>
</thead>
<tbody>
<tr>
<td> 主页 </td>
<td> <a href="http://graphite.readthedocs.org/en/latest/">http://graphite.readthedocs.org/en/latest/</a> </td>
<td> </td>
</tr>
<tr>
<td> 编写语言 </td>
<td> Python </td>
<td> </td>
</tr>
<tr>
<td> License </td>
<td> Apache 2.0</td>
<td> </td>
</tr>
<tr>
<td> 项目创建时间 </td>
<td> 2006年 </td>
<td> </td>
</tr>
<tr>
<td> 最新版 </td>
<td> 0.9.10</td>
<td> 2012/5/31 </td>
</tr>
<tr>
<td> 活跃度 </td>
<td> 活跃 </td>
<td>  </td>
</tr>
<tr>
<td> 文档 </td>
<td> 详细 </td>
<td>  </td>
</tr>
</tbody>
</table>


<p>Graphite由Orbitz, LLC 的 Chris Davis创立于2006年，它主要有两个功能：
* 存储数值型时序列数据
* 根据请求对数据进行可视化（画图）</p>

<p>相应的，它的特点为：</p>

<ul>
<li>分布式时序列数据存储，容易扩展</li>
<li>功能强大的画图Web API，提供了大量的函数和输出方式</li>
</ul>


<p>Graphite本身不带数据采集功能，但是你可以选择很多第三方插件，比如适用于collectd、Ganglia或Sensu的插件等。同时，Graphite也支持Plaintext、Pickle和AMQP这些数据输入方式。</p>

<p>Graphite主要由三个模块组成：</p>

<ul>
<li>whisper：创建、更新RRD文件</li>
<li>carbon：以守护进程的形式运行，接收数据写入请求

<ul>
<li>carbon-cache：数据存储</li>
<li>carbon-relay：分区和复制，位于carbon-cache之前，类似carbon-cache的负载均衡</li>
<li>carbon-aggregator：数据集计，用于减轻carbon-cache的负载</li>
</ul>
</li>
<li>graphite-web：用于读取、展示数据的Web应用</li>
</ul>


<p>whisper使用了类似RRDtool的RRD文件格式，它也不像C/S结构的软件一样，没有服务进程，只是作为Python library使用，提供对数据的create/update/fetch操作。</p>

<p>如果你对它的性能比较在意，这里有一份<a href="https://answers.launchpad.net/graphite/+question/178969">老的数据</a>可供参考。</p>

<p>Google、<a href="https://codeascraft.com/2010/12/08/track-every-release/">Etsy</a>、GitHub、豆瓣、Instagram、<a href="http://blog.evernote.com/tech/2013/07/29/graphite-at-evernote/">Evernote</a>和Uber等很多知名公司都是Graphite的<a href="https://graphite.readthedocs.org/en/latest/who-is-using.html">用户</a>。有此背景，其可信度又加一层，而且网上的资料也相当的多，值得评估一下。</p>

<h2>4. OpenTSDB</h2>

<table>
<thead>
<tr>
<th> - </th>
<th> - </th>
<th> 备注 </th>
</tr>
</thead>
<tbody>
<tr>
<td> 主页 </td>
<td> <a href="http://opentsdb.net/">http://opentsdb.net/</a> </td>
<td>  </td>
</tr>
<tr>
<td> 编写语言 </td>
<td> Java </td>
<td>  </td>
</tr>
<tr>
<td> License </td>
<td> LGPLv2.1+ GPLv3+ </td>
<td>  </td>
</tr>
<tr>
<td> 项目创建时间 </td>
<td> 2010 </td>
<td>  </td>
</tr>
<tr>
<td> 最新版 </td>
<td> 2.2 </td>
<td>  </td>
</tr>
<tr>
<td> 活跃度 </td>
<td> 活跃 </td>
<td>  </td>
</tr>
<tr>
<td> 文档 </td>
<td> 详细 </td>
<td>  </td>
</tr>
</tbody>
</table>


<p>OpenTSDB是一个分布式、可伸缩的时间序列数据库。它支持豪秒级数据采集所有metrics，支持永久存储（不需要downsampling），和InfluxDB类似，它也是无模式，以tag来实现维度的概念。</p>

<p>比如，这就是它的一个metric例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql.bytes_received 1287333217 66666666 schema=foo host=db1</span></code></pre></td></tr></table></div></figure>


<p>OpenTSDB的节点称为TSD（Time Series Daemon (TSD)），它没有主、从之分，消除了单点隐患，非常容易扩展。它主要以HBase作为存储系统，现在也增加了对Cassandra和Bigtable（非云端）。</p>

<p>OpenTSDB以数据存储和查询为主，附带了一个简单地图形界面（依赖Gnuplot），共开发、调试使用。</p>

<h2>5. KDB+</h2>

<table>
<thead>
<tr>
<th> - </th>
<th> - </th>
<th> 备注 </th>
</tr>
</thead>
<tbody>
<tr>
<td> 主页 </td>
<td> <a href="http://kx.com/">http://kx.com/</a> </td>
<td>  </td>
</tr>
<tr>
<td> License </td>
<td> 商业 </td>
<td>  </td>
</tr>
</tbody>
</table>


<p>所有TSDB中，估计就数这个最酷了，我说的是域名，只有两个字母，猥琐地想一下，域名就值很多钱 ：-）。</p>

<p><code>kdb+</code>是一个面向列的时序列数据看，以及专门为其设计的查询语言<code>q</code>（和他们的域名一样简短）。Kdb+混合使用了流、内存和实时分析，速度很快，支持分析10亿级别的记录以及快速访问TB级别的历史数据。</p>

<p>不过这是一个商业产品，但是也提供了免费版本（貌似还限制在32位）。</p>

<h2>6. KairosDB</h2>

<table>
<thead>
<tr>
<th> - </th>
<th> - </th>
<th> 备注 </th>
</tr>
</thead>
<tbody>
<tr>
<td> 主页 </td>
<td> <a href="http://kairosdb.github.io/">http://kairosdb.github.io/</a> </td>
<td>  </td>
</tr>
<tr>
<td> 编写语言 </td>
<td> Java </td>
<td>  </td>
</tr>
<tr>
<td> License </td>
<td> Apache License 2.0 </td>
<td>  </td>
</tr>
<tr>
<td> 项目创建时间 </td>
<td> 2013 </td>
<td>  </td>
</tr>
<tr>
<td> 最新版 </td>
<td> 1.1.1 </td>
<td> 2015/12/08 </td>
</tr>
<tr>
<td> 活跃度 </td>
<td> 活跃 </td>
<td>  </td>
</tr>
<tr>
<td> 文档 </td>
<td> 详细 </td>
<td>  </td>
</tr>
</tbody>
</table>


<p>KairosDB是一个OpenTSDB的fork，不过是基于Cassandra存储的。由于Cassandra的行比HBase宽，所以KairosDB的Cassandra的默认行大小为3星期，而OpenTSDB的HBase则为1小时。</p>

<p>KairosDB支持通过Telnet、Rest、Graphite等协议写入数据，你也可以通过编写插件自己实现数据写入。</p>

<p>KairosDB也提供了基于Web API的查询接口，支持数据聚合、持过滤和分组等功能。</p>

<p>同时KairosDB提供了一个供开发用的Web UI，图形绘制引擎使用了 <a href="http://www.flotcharts.org/">Flot</a>。</p>

<p>和OpenTSDB类似，KairosDB 也提供了插件机制，你可以使用插件完成如下工作：</p>

<ul>
<li>添加数据点（data point）监听器</li>
<li>添加新的数据存储服务</li>
<li>添加新的协议处理程序</li>
<li>添加自定义系统监视服务</li>
</ul>


<h2>7. Druid</h2>

<table>
<thead>
<tr>
<th> - </th>
<th> - </th>
<th> 备注 </th>
</tr>
</thead>
<tbody>
<tr>
<td> 主页 </td>
<td> <a href="http://druid.io/">http://druid.io/</a> </td>
<td>  </td>
</tr>
<tr>
<td> 编写语言 </td>
<td> Java </td>
<td>  </td>
</tr>
<tr>
<td> License </td>
<td> Apache License 2.0 </td>
<td>  </td>
</tr>
<tr>
<td> 项目创建时间 </td>
<td> 2011 </td>
<td>  </td>
</tr>
<tr>
<td> 最新版 </td>
<td> Druid 0.9.0-RC2 </td>
<td> 2016/02/23 </td>
</tr>
<tr>
<td> 活跃度 </td>
<td> 活跃 </td>
<td>  </td>
</tr>
<tr>
<td> 文档 </td>
<td> 详细 </td>
<td>  </td>
</tr>
</tbody>
</table>


<p>Druid是一个快速、近实时的海量数据OLAP系统，并且是开源的。Druid诞生于Metamarkets，后来一些核心人员创立了IMPLY公司，进行Druid相关的产品开发。</p>

<p>Druid会按时间来进行分区（segment），并且是面向列存储的。它的主要特性如下：</p>

<ul>
<li>支持嵌套数据的列式存储</li>
<li>层级查询</li>
<li>二级索引</li>
<li>实时数据摄取</li>
<li>分布式容错架构</li>
</ul>


<p>根据去年底druid.io的白皮书，现在生产环境下最大的集群规模如下：</p>

<ul>
<li>>3M EVENTS / SECOND SUSTAINED (200B+ EVENTS/DAY)</li>
<li>10 – 100K EVENTS / SECOND / CORE</li>
<li>>500TB OF SEGMENTS (>50 TRILLION RAW EVENTS)</li>
<li>>5000 CORES (>400 NODES, >100TB RAM)</li>
<li>QUERY LATENCY (500MS AVERAGE)</li>
<li>90% &lt; 1S 95% &lt; 2S 99% &lt; 10S</li>
<li>3+ trillion events/month</li>
<li>3M+ events/sec through Druid&rsquo;s real-time ingestion</li>
<li>100+ PB of raw data</li>
<li>50+ trillion events</li>
</ul>


<p> Druid企业用户比较多，比如<a href="http://www.oneapm.com/">OneAPM</a>、Netflix和Paypal等。具体可以参考 <a href="http://druid.io/druid-powered.html">http://druid.io/druid-powered.html</a> 。</p>

<p>Druid架构比较复杂，因此对部署和运维也有一定的负担，比如需要的机器多、机器配置要高（尤其是内存）。</p>

<h2>8. Prometheus</h2>

<table>
<thead>
<tr>
<th> - </th>
<th> - </th>
<th> 备注 </th>
</tr>
</thead>
<tbody>
<tr>
<td> 主页 </td>
<td> <a href="http://prometheus.io/">http://prometheus.io/</a> </td>
<td>  </td>
</tr>
<tr>
<td> 编写语言 </td>
<td> Golang </td>
<td>  </td>
</tr>
<tr>
<td> License </td>
<td> Apache License 2.0 </td>
<td>  </td>
</tr>
<tr>
<td> 项目创建时间 </td>
<td> 2012 </td>
<td>  </td>
</tr>
<tr>
<td> 最新版 </td>
<td> 0.17.0rc2 </td>
<td> 2016-02-05 </td>
</tr>
<tr>
<td> 活跃度 </td>
<td> 活跃 </td>
<td>  </td>
</tr>
<tr>
<td> 文档 </td>
<td> 详细 </td>
<td>  </td>
</tr>
</tbody>
</table>


<p>Prometheus是一个开源的服务监控系统和时序列数据库，由社交音乐平台SoundCloud在2012年开发，最近也变得很流行，最新版本为0.17.0rc2。</p>

<p>Prometheus从各种输入源采集metric，进行计算后显示结果，或者根据指定条件出发报警。</p>

<p>和其他监控系统相比，Prometheus的特点包括：</p>

<ul>
<li>多维数据模型（时序列数据由metric名和一组key/value组成）</li>
<li>灵活的查询语言</li>
<li>不依赖分布式存储，单台服务器即可工作</li>
<li>通过基于HTTP的pull方式采集是序列数据</li>
<li>可以通过中间网关进行时序列数据推送</li>
<li>多种可视化和仪表盘支持</li>
</ul>


<p>由于Prometheus采用了类似OpenTSDB 和 InfluxDB的key/value维度机制，所以如果你对任一种TSDB有了解的话，学习起来会简单些。</p>

<h2>9. Pinot</h2>

<table>
<thead>
<tr>
<th> - </th>
<th> - </th>
<th> 备注 </th>
</tr>
</thead>
<tbody>
<tr>
<td> 主页 </td>
<td> <a href="https://github.com/linkedin/pinot/wiki">https://github.com/linkedin/pinot/wiki</a> </td>
<td>  </td>
</tr>
<tr>
<td> 编写语言 </td>
<td> Java </td>
<td>  </td>
</tr>
<tr>
<td> License </td>
<td> Apache License 2.0 </td>
<td>  </td>
</tr>
<tr>
<td> 项目创建时间 </td>
<td> 2014/08 </td>
<td>  </td>
</tr>
<tr>
<td> 最新版 </td>
<td> 0.016 </td>
<td>  </td>
</tr>
<tr>
<td> 活跃度 </td>
<td> 活跃 </td>
<td>  </td>
</tr>
<tr>
<td> 文档 </td>
<td> 详细 </td>
<td>  </td>
</tr>
</tbody>
</table>


<p>Pinot是一个开源的实时、分布式OLAP数据存储方案。它来自Linkedin，虽然Linkedin最近估价表现很差，但是他们创建的各种软件、中间件实在太多了。这一点我们做软件的都应该向Linkedin表示感谢。</p>

<p>Pinot就像是一个Druid的copy，不过两者的灵感都来源于SenseiDB（Sensei在日语里为老师的意思，写成汉字为“先生”）。</p>

<p>Pinot也像Druid一样，能加载offline数据（Hadoop文件）和实时数据（Kafka）。Pinot从设计上就面向水平扩展。</p>

<p>Pinot主要特点：</p>

<ul>
<li>面向列</li>
<li>插拔式索引引擎：排序索引、位图索引和反向索引</li>
<li>根据查询语句和segment信息对查询/执行计划进行优化</li>
<li>从Kafka实时数据摄取（ingestion）</li>
<li>从Hadoop进行批量摄取</li>
<li>类似SQL的查询语言，支持聚合、过滤、分组、排序和唯一处理。</li>
<li>支持多值字段</li>
<li>水平扩展和容错</li>
</ul>


<p>Pinot的特点和Druid很像，两者可互为参考。</p>

<h2>小结</h2>

<p>这里我们为大家介绍了几种常见TSDB，如不出意外，你可能会在这里选择某一种来使用。</p>

<p>尽管如此，我们还是会为大家介绍跟多一些的项目，让大家能更多的了解一些不同的TSDB及其特点，也能帮助读者深入了解TSDB的各种场景，开阔思路。</p>

<p>在下一篇文章中，我们将会为各位再介绍几种时序列数据库。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[时序列数据库武斗大会之什么是TSDB]]></title>
    <link href="http://liubin.github.io/blog/2016/02/18/tsdb-intro/"/>
    <updated>2016-02-18T00:48:27+08:00</updated>
    <id>http://liubin.github.io/blog/2016/02/18/tsdb-intro</id>
    <content type="html"><![CDATA[<p>由于工作上的关系，最近看了一些关于<a href="https://en.wikipedia.org/wiki/Time_series_database">时序列数据库</a>的东西，当然，我所看的也都是以开源方案为主。</p>

<p>趁着这股热劲还没退，希望能整理一些资料出来。如果正好你也有这方面的需求，那么希望这一系列的介绍能够帮助到你。</p>

<h2>1. 什么是时序列数据库（Time series database）？</h2>

<p>一听到时序列数据库，如果只是稍有耳闻的人，可能立刻会联想到运维和监控系统。</p>

<p>没错，确实是很多运维、监控系统都采用了TSDB作为数据库系统来存储海量的、严格按时间递增的、在一定程度来说结构非常简单的各种指标（英文可能为metric、measurement或者类似的其他单词）数据。</p>

<h3>1.1. 给TSDB一个定义</h3>

<p>这是维基百科上的解释：</p>

<blockquote><p>A time series database (TSDB) is a software system that is optimized for handling time series data, arrays of numbers indexed by time (a datetime or a datetime range).</p></blockquote>

<p>翻译过来就是“时序列数据库用来存储时序列（time-series）数据并以时间（点或区间）建立索引的软件。”</p>

<p>其中，时序列数据可以定义如下：</p>

<ul>
<li>可以唯一标识的序列名/ID（比如cpu.load.1）及meta-data；</li>
<li>一组数据点{timestamp, value}。timestamp是一个Unix时间戳，一般精度会比较高，比如influxdb里面是nano秒。一般来说这个精度都会在秒以上。</li>
</ul>


<p>一般时序列数据都具备如下两个特点：</p>

<ul>
<li>数据结构简单</li>
<li>数据量大</li>
</ul>


<p>所谓的结构简单，可以理解为某一度量指标在某一时间点只会有一个值，没有复杂的结构（嵌套、层次等）和关系（关联、主外键等）。</p>

<p>数据量大则是另一个重要特点，这是由于时序列数据由所监控的大量数据源来产生、收集和发送，比如主机、IoT设备、终端或App等。</p>

<h2>2. TSDB数据库特点</h2>

<p>TSDB作为一种专为时序列数据优化而设计的数据库，在很多方面都和传统的RDBMS和NoSQL数据库不太一样，比如它不关心范式和事务。</p>

<p>其他方面TSDB的特点主要有以下几点，这里简单罗列了一下。</p>

<h3>2.1. 数据写入</h3>

<p>TSDB在数据写入方面，具有如下特点：</p>

<ul>
<li>写多于读</li>
</ul>


<p>95%-99%的操作都是写操作</p>

<ul>
<li>顺序写</li>
</ul>


<p>由于是时间序列数据，因此数据多为追加式写入，而且几乎都是实时写入，很少会写入几天前的数据。</p>

<ul>
<li>很少更新</li>
</ul>


<p>数据写入之后，不会更新</p>

<ul>
<li>区块（bulk）删除</li>
</ul>


<p>基本没有随机删除，多数是从一个时间点开始到某一时间点结束的整段数据删除。比如删除上个月，或者7天前的数据。很少出现删除单独某个指标的数据，或者跳跃时间段的数据。</p>

<p>区块删除很容易进行优化，比如可以按区块来分开存储到不同的文件，这样删除一个区块只需要删除一个文件就可以了，成本会比较低。</p>

<h3>2.2. 数据读取（查询）</h3>

<p>相对于写入操作，TSDB的读取操作特点如下：</p>

<ul>
<li>顺序读</li>
</ul>


<p>基本都是按照时间顺序读取一段时间内的数据。</p>

<ul>
<li>基数大</li>
</ul>


<p>基本数据大，超过内存大小，要选取的只是其一小部分，且没有规律，缓存几乎不起任何作用。</p>

<p>即使读取操作相对写来说较少，但是读操作的响应时间要求很高，除非你是只做后台报表生成，否则一旦有交互性操作，必须要求快速响应。</p>

<p>为了提高读取的响应时间，有两种策略。</p>

<p>一是以写性能优先，不为读取做存储优化，但是通过分布式和并发读，来提高读取的速度。</p>

<p>二就是在写入的时候就考虑到读的性能问题，将统一指标、时间段的数据写入到同一数据块中，为读取进行写入优化。</p>

<h3>2.3. 分布式（集群）</h3>

<p>TSDB应该天生就要考虑到分布式和分区等特性，将存储和查询分发到不同的服务器，以支撑大规模的数据采集和查询请求。</p>

<p>同时，它也应该是能扩展和自动失败切换（Fault-tolerant）的。随着数据量的增长，所需服务器的台数也会增加，能动态的增减服务器则是一个基本要求。同时，随着服务器的增多，各种服务器软件或者网络故障发生的概率也会增大，这时候失败切换也显得很重要，不能因为一台机器的失效而导致整个集群不可工作。</p>

<h3>2.4. 基本数据分析支持</h3>

<p>TSDB的数据是用来分析的，所以TSDB还会提供做数据分析所必须的各种运算、变换函数。比如可以方便的对时序列数据进行求和、求平均值等操作，就像传统的RDBMS一样。</p>

<h2>3. 如何去选择开源时序列数据库</h2>

<p>虽然每个人的场景不太一样，不过我觉得以下的大部分因素，都值得大家好好考量一下。除了功能上能满足、性能上撑得住，运（售）维（后）等也是我们准备长期使用所必须面临的问题。</p>

<p>我自己总结的评价因素主要有如下几点：</p>

<h3>3.1. 性能</h3>

<p>主要就是读和写的性能，在前面TSDB的特点中我们已经讲过了。</p>

<p>通过前面的说明，我们也知道TSDB 99.9%都是读少写多，因此写入性能必须能跟得上、无延时，并且不能阻塞读操作，且读操作能快速返回最新的数据。</p>

<p>还有一点必须注意的是，现在很多用户的数据都跑在云主机上，那么IOPS则是一个你必须要注意的因素，超了Plan限制的话很难找出问题原因。</p>

<h3>3.2. 存储方案（或引擎）</h3>

<p>存储方案主要会影响到读写性能、集群扩展容易程度、以及运维的复杂度。典型的存储方案有HDFS、HBase、Cassandra、LevelDB等。</p>

<h3>3.3. 集群功能</h3>

<p>一般来说，集群主要集中为存储和查询的集群功能，也代表其可扩展性，因为时序列数据库的数据量很可能很大，并且增长趋势不可预测，尤其是随着大数据和物联网的兴起，GB已经算入门，TB也是刚起步。</p>

<h2>3.4. API（HTTP API和Client Library）</h2>

<p>如果你需要定制，或者只是使用TSDB做存储，自己写入数据并通过查询接口进行数据展示，那么API的完善程度将是一个很重要的评判因素。</p>

<p>还好大部分TSDB都提供了HTTP API，除了简单的文本格式，有很多还支持JSON格式的输入、输出。</p>

<p>Client Library也是一个加分项，有一个好用的、你熟悉的语言的SDK包的话应该会更方便你做开发。</p>

<h3>3.5. SQL-like Query Language</h3>

<p>如果能通过类似传统SQL的<code>select mean(value) from metric where role='user' and time &gt;= xxx and time &lt;= yyy group by dc</code>来查询metric的话，是不是刚接触到TSDB的人更容易上手和理解呢？</p>

<p>可能这看起来比较酷，不过对我来说这只能算是个加分项而已。因为我们只会通过API来读写数据，而且查询模式非常固定、数量不多。</p>

<p>但是很多经常出报表的人，可能更喜欢这一特点了，因为老板、运营可能会定期或者随时找他们出统计数据。</p>

<h3>3.6. 部署体验</h3>

<p>即是否容易部署，特别是作为产品的话，很多企业级产品在安装部署或者升级所耗费的时间绝对是占了大头的。所以是否容易部署就成了一个重要的指标，比如是否能一键部署、单机部署？是否有额外依赖组件等。</p>

<p>同时，部署的容易程度也几乎等于以后运维的复杂程度。</p>

<h3>3.7. 成熟度</h3>

<p>成熟度包括软件本身的成熟度和生态系统的成熟度。</p>

<h4>3.7.1. 生态系统</h4>

<p>生态系统主要是指围绕该软件的周边工具、插件的丰富程度，以及相应的社区的活跃程度。</p>

<p>一个软件的生态系统，跟它的开放机制、插件（扩展）机制关系很大，直接决定第三方是否能很方便的对系统进行扩展。</p>

<h4>3.7.2. 开发活跃度</h4>

<p>这个可以从TSDB项目的提交记录（比如从GitHub上能看到开发状况）、ISSUE的解决情况，Pull Request的merge情况、以及Release的频率来确认。</p>

<p>有一些TSDB项目甚至提供了ROADMAP，我们还可以通过路线图来了解该软件未来发展方向、特性支持。</p>

<h4>3.7.3. 社区包活跃度</h4>

<p>主要是文档的丰富性等，可以在Google搜索一下，看看相关的Blog是否足够多，也可以在StackOverFlow上看一下相关讨论内容。</p>

<p>最重要的评论观点就是在专业社区（比如在Ops相关讨论组或社区）中该TSDB出现的频次、大家的关注程度等。</p>

<h4>3.7.4. 应用案例</h4>

<p>是否有大规模、大公司真正的生产环境的部署案例？规模有多大，性能如何，有无问题等，都是重要考察因素。有大公司的信任背书，你在选择上也就多了份安心，少了些纠结。</p>

<p>比如，Druid就在主页列出了很多使用了Druid的公司： <a href="http://druid.io/druid-powered.html">http://druid.io/druid-powered.html</a></p>

<h3>3.8. 可视化和报警功能</h3>

<p>说到TSDB，容易联想到的两个功能就是可视化和报警。如果TSDB自带了功能强大的可视化组件和报警支持，则可能会省去很多开发的成本，更容易吸引用户。即使开发，也能方便开发过程中进行调试和验证。</p>

<p>ELK这么流行，跟其一揽子方案关系很大。除了强大的功能之外，部署简单、功能齐全是其吸引人的地方。</p>

<h3>3.9. 所采用技术栈</h3>

<p>主要是该方案采用了什么编程语言，有哪些第三方模块。比如有的用Java编写，有的用Golang；有的用HBase，有的用自己的存储方案；有的自带丰富的UI，有的则只提供了简单的调试界面。</p>

<p>技术栈为什么也是一个选型时需要考虑的因素呢，这是因为TSDB所采用的技术，会影响你们开发和运维的复杂程度，此外还会受到既有资产的影响。比如你们没有人熟悉HBase，又不熟悉Java语言，那么可能Influxdb就更适合你们了。</p>

<h3>3.10. 保留策略（Retention Policies，或自动删除、压缩）</h3>

<p>自动删除就是为数据设置TTL，过了指定的TTL则自动删除相关数据，以节省存储空间同时提高查询性能。</p>

<p>如果不删除数据，也可以对数据进行压缩，或者再采样（Resampling），比如对最近1天的数据我们可能需要精确到秒，而查询1年的数据时，我们只需要精确到天，这时候，海量的数据一年只需要365个点来存储，大大节省了存储空间。</p>

<h3>3.11. 背后主导公司</h3>

<p>有商业公司专职开发，可能是个双刃剑。</p>

<p>好处是其持续性可期，不用担心过两天项目没有人维护了，有了bug也有人会专门解决。</p>

<p>敝处就是你可能上了贼船下来需要成本较高。比如ElasticSearch，搭建起ELK比较简单，但是一涉及到具体的生产环境部署时需要考虑的权限等问题，要么自己去hack，要么就得买他们的产品，这是成本上需要考虑的。</p>

<h3>3.12. License</h3>

<p>这可能是影响最弱的一个因素了，但是如果你想拿来商业化的话，则又是一个非常重要甚至致命的因素。</p>

<h3>3.13. 多租户支持</h3>

<p>这部分需求可能会比较少，但是如果想基于TSDB为用户提供服务，比如SaaS类应用，能从物理上隔离当然是最理想的了，不过很遗憾目前好像还没有这方面的方案。要想支持多租户，只能从应用自身来设计，类似传统RDBMS那样，为每个实体加入<code>user_id=xxx</code>类似的属性。</p>

<h3>3.14. 安全性</h3>

<p>比如：权限管理、访问控制等。</p>

<p>关于安全性最基本的需求就是不要像ELK那样，暴露在公网上如果不设防火墙的话，谁都能使用，这就带来了很大的安全隐患。</p>

<p>所以说，安全上的最小实现就是支持基本的用户密码认证功能，而且是在两个层次支持，一是UI层，即管理界面或者控制面板等，另一方面就是API级别的用户认证。</p>

<h2>4. 参考文献</h2>

<ul>
<li><a href="http://www.xaprb.com/blog/2014/06/08/time-series-database-requirements/">Time-Series Database Requirements</a></li>
<li><a href="http://jmoiron.net/blog/thoughts-on-timeseries-databases">Thoughts on Time-series Databases</a></li>
<li><a href="http://db-engines.com/en/ranking/time+series+dbms">DB-Engines Ranking of Time Series DBMS(January 2016)</a></li>
</ul>


<h2>5. 相关阅读</h2>

<p>这是本系列文章的其他部分：</p>

<ul>
<li><a href="http://liubin.github.io/blog/2016/02/25/tsdb-list-part-1/">时序列数据库武斗大会之TSDB名录 Part 1</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2016年1月读书记录]]></title>
    <link href="http://liubin.github.io/blog/2016/02/04/2016-01-reading/"/>
    <updated>2016-02-04T14:39:42+08:00</updated>
    <id>http://liubin.github.io/blog/2016/02/04/2016-01-reading</id>
    <content type="html"><![CDATA[<p>1月份大概看了8本书，基本都是电子书，主要是微信读书搞活动，免费领的。不过现在看看，微信读书的书太少了。</p>

<h2>《孵化Twitter - 从蛮荒到IPO的狂野旅程》</h2>

<p><img src="http://img6.douban.com/lpic/s27141439.jpg" alt="" /></p>

<p>推荐指数：★★★★★</p>

<p>本书讲述的是Twitter从史前到上市一波三折的发展史，尤其是高层的斗争史。在金钱、权利面前，人的本性被剥的赤裸、直白，看完之后你会对多西和投资人们有一个新的认识：多西的小气记仇，投资人的冷血无情。</p>

<h2>《创业头条 - 16位硅谷科技新贵的成功法则》</h2>

<p><img src="http://img6.douban.com/lpic/s28106778.jpg" alt="" /></p>

<p>推荐指数：★★★★☆</p>

<p>硅谷创业者的个人故事：不同地区、不同背景、不同的人生发展道路，值得好好看看：</p>

<blockquote><p>《创业头条》一书由《福布斯》杂志编辑兰德尔•莱恩策划、编辑和整理更新，是业内第一本系统介绍新兴互联网亿万富豪及其快速成功途径的综合性图书，为读者带来关于Airbnb、Instagram、Oculus VR、Spotify、WhatsApp、Gopro、Dropbox、Box、Palantir、Snapchat、Tumblr、Houzz、Facebook、Twitter、SpaceX及特斯拉等公司创始人的深度幕后故事。</p></blockquote>

<h2>《解忧杂货店》</h2>

<p><img src="http://img6.douban.com/lpic/s27284878.jpg" alt="" /></p>

<p>推荐指数：★★★★☆</p>

<p>一部典型的基于“人之初，性本善”出发的一个作品，主线以近代和过去的时光交错，通过浪矢杂货店和丸光园，将不同年代、背景的人串起来，透露出的是人和人之间的温情与爱心。</p>

<h2>《日本最了不起的公司：永续经营的闪光之魂》</h2>

<p><img src="http://img6.douban.com/lpic/s4405433.jpg" alt="" /></p>

<p>推荐指数：★★★★☆</p>

<p>该书分两大部分，第一部分讨论公司为谁而存在，第二部分介绍了日本最了不起的五家企业。</p>

<p>第一部分，开篇作者即列出了其结论，公司需要负担对五个人的使命与责任：</p>

<ul>
<li>让员工和员工家人幸福</li>
<li>使合作伙伴（进货商等）的员工幸福</li>
<li>使顾客幸福</li>
<li>使地方社会幸福、繁荣</li>
<li>自然早就股东的幸福</li>
</ul>


<p>其中有一段寺院主持的话让人印象深刻：“所谓的幸福，一是被爱，二是受到赞美，三是对他人有所共享，四是为人所需要。这其中后三项，必须要借助工作才能享有。”</p>

<h2>《及时引爆 社交红利2.0》和《社交红利：修订升级版》</h2>

<p><img src="http://img6.douban.com/lpic/s28273010.jpg" alt="" /></p>

<p><img src="http://img6.douban.com/lpic/s27305505.jpg" alt="" /></p>

<p>推荐指数：★★★☆☆</p>

<p>说实话，徐老师写的几本书我都有点弄混了，现在回想不出来太多的东西。</p>

<h2>《零售的哲学：7-Eleven便利店创始人自述》</h2>

<p><img src="http://img6.douban.com/lpic/s27882050.jpg" alt="" /></p>

<p>推荐指数：★★★☆☆</p>

<p>如果你想经营一个便利店或者什么的，我觉得本书作用并不大。不过作为其一般论来说，却有很多观点值得学习：</p>

<ul>
<li>持续学习，满足用户需求</li>
<li>打破常规</li>
<li>主动</li>
<li>PDCA</li>
<li>打破尝试</li>
</ul>


<p>另外读完本书我才知道，原来7-11并非日本原创，而是从美国南方公司获得特许经营权，并最后发展壮大反过来收购了经验不佳的美国南方公司。</p>

<h2>《重来》</h2>

<p><img src="http://img6.douban.com/lpic/s4502451.jpg" alt="" /></p>

<p>推荐指数：★★☆☆☆</p>

<p>我只有两句话来总结：</p>

<ul>
<li>尽信书则无书</li>
<li>成功的人屁都是经验</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一家名为久世福的商店]]></title>
    <link href="http://liubin.github.io/blog/2016/01/22/kuzefuku-shop/"/>
    <updated>2016-01-22T17:52:49+08:00</updated>
    <id>http://liubin.github.io/blog/2016/01/22/kuzefuku-shop</id>
    <content type="html"><![CDATA[<p><img src="http://liubin.github.io/images/2016/01/kuzefuku-shop/kuzefuku_logo.png" alt="" /></p>

<p>知道这个商店，也是通过一家日本设计公司的博客。打开的一瞬间，被其怀旧且温暖的风格所吸引。</p>

<p><img src="http://liubin.github.io/images/2016/01/kuzefuku-shop/kuzefuku_1.jpg" width="800"></p>

<p>不过如果只是如此，我们只需要看看图片就可以了。久世福商店主页的第一大段文字，讲的是其经商心得（对商业的理解）：</p>

<p><img src="http://liubin.github.io/images/2016/01/kuzefuku-shop/kuzefuku_kokoroe.png" alt="" /></p>

<p>翻译为中文如下：</p>

<ul>
<li>当代随一</li>
</ul>


<p>走遍世界各地，只挑选那些无与伦比的手工制造品</p>

<ul>
<li>唯一无二</li>
</ul>


<p>制作出此前世间无有，只有久世福商店才能制作的食材</p>

<ul>
<li>三位一体</li>
</ul>


<p>只挑选价格、味道和品质都最优的商品，进行能满足顾客、生成商（进货商）和社会三方的商业</p>

<p>而其价值观，则更能打动人（以下为部分摘抄）：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>久世福の心意気
</span><span class='line'>
</span><span class='line'>東に脂がのった鰯があると聞けば赴き、
</span><span class='line'>听说东边有肥厚的鰯鱼（貌似就是沙丁鱼），就赶到东边，
</span><span class='line'>
</span><span class='line'>西に甘い塩があると聞けば赴き、
</span><span class='line'>听说西边有甜的盐，就赶到西边，
</span><span class='line'>
</span><span class='line'>南に香りの高い焼酎があると聞けば赴き、
</span><span class='line'>听说南边有香醇的烧酒，就赶到南边，
</span><span class='line'>
</span><span class='line'>北に旨い昆布があると聞けば赴き、
</span><span class='line'>听说北边有美味的海带，就赶到北边，
</span><span class='line'>
</span><span class='line'>そうして久世福商店のオリジナル商品たちは生まれました。
</span><span class='line'>久世福商店自创的商品就是这样诞生的。</span></code></pre></td></tr></table></div></figure>


<p>巧的是，最近刚读完一本书，书名是《日本最了不起的公司：永续经营的闪光之魂》。</p>

<p>该书分两大部分，第一部分讨论公司为谁而存在，第二部分介绍了日本最了不起的五家企业。</p>

<p>该书的第一部分，开篇作者即列出了其结论，公司需要负担对五个人的使命与责任：</p>

<ul>
<li>让员工和员工家人幸福</li>
<li>使合作伙伴（进货商等）的员工幸福</li>
<li>使顾客幸福</li>
<li>使地方社会幸福、繁荣</li>
<li>自然早就股东的幸福</li>
</ul>


<p>其中有一段寺院主持的话让人印象深刻：“所谓的幸福，一是被爱，二是受到赞美，三是对他人有所共享，四是为人所需要。这其中后三项，必须要借助工作才能享有。”</p>

<p>“人需要通过工作而生存，而自力更生，而公司正式提供这种机会的地方，这就是企业的存在价值和社会使命。”</p>

<p>这也是原书的话，这个久世福商店的“三位一体”是一致的，不谋而合。</p>

<p>第二部分以5家公司为代表进行了介绍。光看书名，你可能觉得里面会有索尼、东芝、NEC之类的公司。</p>

<p>你想错了，这本书介绍的公司是小公司，非常没名，有做甜点的，有做假肢的，还有卖水果的。</p>

<p>这五家企业都有以下几个特点（不是全都有）：</p>

<ul>
<li>生产和人息息相关的产品</li>
<li>创造独一无二的东西</li>
<li>雇佣弱者（残疾人）</li>
<li>从员工幸福出发</li>
<li>贡献社会</li>
<li>将感情融入商品</li>
<li>……</li>
</ul>


<p>所谓的独一无二的商品，其实不是像iPhone那样生生造出来的需求，而是从很多传统行业发现的新机遇，从普通生活中挖掘出来的新需求而已。本着让他人幸福、服务社会的宗旨去做，是不是更容易创造出唯一的商品呢？</p>

<p>虽然我觉得百年企业从文化或者怀旧的角度上来说意义更大一点，但是日本这么多百年企业，虽然跟其子承父业的文化关系很大，但其经营理念绝对是值得学习的。</p>

<p>以史为镜，以彼为镜。反观我们现在企业的经营现状，欺骗客户、股东，压榨员工，破坏环境，恶意竞争，是不是有很多的东西需要反思一下？</p>

<p><img src="http://liubin.github.io/images/2016/01/kuzefuku-shop/kuzefuku_2.jpg" width="800"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[这个程序员得有多无聊啊？]]></title>
    <link href="http://liubin.github.io/blog/2016/01/11/spaces-and-tabs/"/>
    <updated>2016-01-11T19:38:27+08:00</updated>
    <id>http://liubin.github.io/blog/2016/01/11/spaces-and-tabs</id>
    <content type="html"><![CDATA[<p>这是两个比较流行的编辑器的界面。</p>

<p><img class="center-image" src="http://liubin.github.io/images/2016/01/spaces-and-tabs/sublime.png" title="'这是sublime的'" ></p>

<p><em>这是sublime的。</em></p>

<p><img class="center-image" src="http://liubin.github.io/images/2016/01/spaces-and-tabs/eclipse.png" title="'这是eclipse的'" ></p>

<p><em>这是eclipse的。</em></p>

<p>如果你的编辑器也做了这样的设置，那么你可以继续往下看看。</p>

<p>如果在本地，我们可以通过设置编辑器，来决定如何显示空格、tab键等，带我们程序员都爱GitHub啊，怎么办？</p>

<p>这时候工作不饱满、闲得无聊、空格癖、嫌tab党的同学，决定小小的hack一下浏览器。</p>

<p>要做的东西其实很简单，就是一个Chrome插件，把GitHub里面的代码稍微格式化一下啦。</p>

<p>这就是格式化后的效果，主要会对空格和tab进行特殊处理，此外，还加入了回车的显示，不过貌似在GitHub上，回车不是问题。</p>

<p><img class="center-image" src="http://liubin.github.io/images/2016/01/spaces-and-tabs/editor-space-cover.png" title="'格式化后的效果'" ></p>

<p><em>格式化后的效果</em></p>

<p>当然，这个小插件还支持自定义特殊字符，即设置自己喜欢的tab、空格和回车，还能自定义颜色。</p>

<p><img class="center-image" src="http://liubin.github.io/images/2016/01/spaces-and-tabs/config.png" title="'配置选项'" ></p>

<p><em>配置选项</em></p>

<p>有兴趣的同学可以在GitHub上查看到<a href="https://github.com/liubin/github-source-view-plugin">很挫的源代码</a>。。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读书记录 - 社交红利2.0、孵化Twitter、解忧杂货店]]></title>
    <link href="http://liubin.github.io/blog/2016/01/03/reading/"/>
    <updated>2016-01-03T20:38:21+08:00</updated>
    <id>http://liubin.github.io/blog/2016/01/03/reading</id>
    <content type="html"><![CDATA[<h1>1. 《及时引爆 社交红利2.0》</h1>

<p>本书主要分析了脸萌、围住神经猫、足迹、魔漫相机等国民级（我竟然一个都没用过！）应用爆发的过程、原因分析以及背后故事，而且辅以大量图表来解说，非常可视化、容易理解。</p>

<p>第一章主要讲社交引爆。文章有几个论点还是值得看一下的，比如“一九法则”，这可以理解为二八法则的升级版，即在社交网络中，一款快速增长的应用，在某一细分领域能占据90%的市场份额。老二以后只能望其项背吃土。</p>

<p>这也是作者总结的社交引爆四大定律，即：</p>

<ul>
<li>短定律：用户投入时间成本少；</li>
<li>新：玩法新、创意新；</li>
<li>好友定律：用户越投入，对好友影响越大；</li>
<li>快衰定律：使用时间越短，衰减速度越快。</li>
</ul>


<p>我个人总结一下很多应用火起来的原因，这些比较重要：简单上手、鼓励分享、消磨碎片时间、娱乐化。</p>

<p>第二章也涉及到了一些运营相关的内容。个人关系链和社群，是社交网络中最常见的两种形态，也就是微信中的好友和群。社群可以是兴趣爱好群、粉丝群等。社群是使产品快速发展时尝鲜而来的用户群，长期黏着、转化的最好方式之一。这里拿辣妈帮完全考志愿者组织各地年会的例子，来说明了运营社群的价值，以及如何去做运营。</p>

<p>同时，作者总结出了社群组织的四大原则：</p>

<ul>
<li>不是企业建社群，而是让用户自己来；</li>
<li>目标清晰，逐级实现，重点解决用户个体在社群中长期活跃问题；</li>
<li>个人目标清晰明了；</li>
<li>及时且正向的群体激励。大型、滞后的激励，比不上及时、细小的激励，企业主动的激励不如个人主动获得的激励。</li>
</ul>


<p>第三章作者主要讲了如何进行社交产品开发。</p>

<p>在开发模式上，作者也推崇自管理，鼓励小团队、放权模式，让产品不断试错，其中举的韩都衣舍的例子很不错，2-3人的小团队，快速推出产品、快速上市、以数据为决策基准、淘汰没有增长率的商品。</p>

<p>最后，分享一下给我留下比较深刻印象的一句话，我觉得可以为创业者带来一些灵感：“无价值的信息泛滥时，有价值的信息或服务会变得更加昂贵”。</p>

<p>不过老实说，这本书读得很慢，不是特别好理解，至少我读起来感觉条理性不强。</p>

<h1>2. 《孵化Twitter：从蛮荒到IPO的狂野旅程》</h1>

<p>如题所示，Twitter成长过程可以用一波三折、问题不断来形容，尤其是高管和投资人之间的斗争。</p>

<p>我先简单说一下大概过程。</p>

<p>开头小篇幅讲了埃文（Evan）把Blogger卖给Google，不过他受不了Google的氛围，没多久就从Google退休了。</p>

<p>接着他投资了邻居诺阿要做一款私人电台，成立Odeo公司。后来杰克多西加入Odeo（诺阿雇佣了杰克），不过这款私人电台软件很不成功，濒临倒闭之时，诺阿和杰克共通推出了Twitter这个点子，埃文也很看好这个项目。</p>

<p>不过，狗血剧情正式开始了：</p>

<ul>
<li>埃文和诺阿意见很难统一，下属也对诺阿怨声载道，甚至杰克说他和诺阿只能留一个；</li>
<li>诺阿被赶走，净身出门，Twitter变为埃文个人投资公司，给了杰克20%期权，杰克任CTO，加上比兹（Biz Stone）3个人成为联合创始人；</li>
<li>杰克管理水平被人诟病，宕机问题迟迟搞不定，CEO还下班准时去学裁缝；</li>
<li>埃文和投资人决定赶走杰克，但是比兹说如果杰克走，他也走，不得已，妥协方案是埃文当CEO，杰克保留一个董事席位，期权貌似也都没了，不过给了20w遣散费。没有彻底清理杰克，也是后来埃文出局的根本原因；</li>
<li>杰克联系了扎克伯格，但Facebook没有能给杰克提供一个合适的高管位置，杰克后来创建了移动支付公司Square；</li>
<li>埃文找来自己的好朋友迪克做COO，Twitter开始有收入；</li>
<li>Twitter方向不明，杰克抓住机会，暗地里联合一些高管、投资人（就是前面和埃文一起赶走杰克的那些人）决定赶走埃文</li>
<li>埃文退位，迪克任CEO；不久比兹也离开。</li>
</ul>


<p>故事到此结束，埃文貌似资产在20亿美元，诺阿生了个娃，不过还是个穷光蛋。</p>

<p>看完这本书，个人新认识如下：</p>

<ul>
<li>创始人技术水平一般般</li>
<li>投资人为了自己的目的不择手段；</li>
<li>杰克多西人品不行啊。</li>
</ul>


<p>作为一部“野”史，这本书挺精彩的，像悬疑小说一样，让人不停地读下去，尤其是杰克想法设法要向埃文“复仇”。</p>

<h1>3. 《解忧杂货店》</h1>

<p>简单来说，就是。。。三言两语还真不好说。</p>

<p>首先两个重要地点（建筑物）：浪矢杂货店和孤儿院丸光园。小说中的人物也都围绕着这两个建筑物，他们大都在孤儿院度过童年，都在浪矢杂货店咨询过烦恼。</p>

<p>浪矢杂货店的老板（浪矢雄治，大概1900-1979/9/13）是个穷小子，孤儿院丸光园的创始人（皆月晓子）是个富家小姐，两人本来相爱，无奈被皆月家族有钱，看不上一个普通的年轻人。两人本来相约私奔，但是并没有成功，皆月家族本来要狠狠恶打击浪矢雄治的，但是皆月晓子答应和浪矢断绝关系，以换得家里人放过浪矢。</p>

<p>浪矢后来回到了家乡，开了浪矢杂货店。皆月晓子则终身未嫁，在浪矢家乡附近，开设了孤儿院丸光园。</p>

<p>小说的展开，都围绕各主人公在这两者之间的关系来演进。</p>

<p>2012年9月12日半夜，三个小偷在抢劫了晴美（小狗公司的老板，1990年前炒股和房地产发财），逃到了浪矢杂货店躲避，然后开始了他们的解答烦恼的过程。</p>

<p>这其中，他们收到了晴美的咨询。晴美在孤儿院度过了几年，后来被亲戚收回，她一心报答亲戚的恩情，咨询是否一直做陪酒女下去。小偷三人组最后告诉了晴美发财的方法：买过票，买卖不动产，在1989年左右全抛（这时候小偷三人组收到的咨询信是几十年前的）。</p>

<p>果真，到了2012年，晴美发财了，并成了三个小偷抢劫的对象。而晴美之所以能有今天，却都是因为在2012年9约13日凌晨指点的结果。。。</p>

<p>而小偷三人组，也都曾在丸光园里成长。原文人物关系和情节比这丰富多了，每个人都有不同的家庭背景和成长经历。</p>

<p>总之，这部小说虽然算不上日系悬疑类，没有惊心动魄的大起大落，但是情节环环相扣，静静中透着爱、宽容和美好，闲暇时间推荐一读。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的2015年总结]]></title>
    <link href="http://liubin.github.io/blog/2015/12/31/my-2015/"/>
    <updated>2015-12-31T17:22:45+08:00</updated>
    <id>http://liubin.github.io/blog/2015/12/31/my-2015</id>
    <content type="html"><![CDATA[<p>2015年似乎时间过得好慢，在他人看来平平淡淡，自己认为大事主要有两件：一是换了次工作，二是娃上了学。</p>

<h1>工作</h1>

<h2>天使汇</h2>

<p>今年完成了一次转职。6月底，从<a href="http://angelcrunch.com/">天使汇</a>换到了<a href="http://www.oneapm.com">OneAPM</a>。</p>

<p>天使汇是一个互联网股权众筹平台，和一般的众筹不太一样，天使汇的投资者都是经过认证的投资机构和天使投资人，即所谓的合格投资人。我觉得这是我很赞同的，正如天使汇CEO Luc所说（其实也是引用）：“寡妇的钱不能要”，寡妇的钱对她们很重要，她们没有很投资知识和技能，承担风险的意愿也低。</p>

<p>天使汇除了众筹官网，还有Tech2Ipo这个科技媒体，有一群很有才华的编辑。这里推荐由这些编辑创建的微信自媒体“赤潮”（公众号：akashio）。</p>

<p>我在天使汇主要的工作则是做了<a href="http://www.1wangtong.com/">一网通</a>，作为天使汇整个业务流程闭环中的一步，一网通的主要关注与投后管理，与投前的线上众筹和闪投活动处于不同的阶段。具体来说一网通的主要功能主要是工商注册和公司治理。工商注册这块的话，创业者只需要网上提交资料，通过快递寄送资料，就能足不出户设立公司，而且刻章办证费用也会低一些。展开类似业务的创业公司包括绿狗和快法务之类的。</p>

<p>如果你是创业者，正要注册公司，不妨试一下<a href="http://www.1wangtong.com/">一网通</a>。</p>

<h2>OneAPM</h2>

<p>来OneAPM最大的原因就是离家近，OneAPM在清河的东升科技园，就在我家对面，走路上班的话20分钟就可以了，而且园区里还有一个号称全年无休，24小时营业的7-11便利店。</p>

<p>公司主要做应用程序性能管理（Application Performance Management / Monitoring），官网介绍如下：</p>

<blockquote><p>专注于提供新一代应用性能管理软件和服务，帮助用户降低 IT 成本，提高业务生产力。产品适用于复杂的现代应用程序生产环境，提供端到端应用性能管理、移动端和浏览器真实用户体验分析、业务交易实时分析。</p></blockquote>

<p>简单来说，就是通过将“探针（Agent）”嵌入到JVM、RVM等之内，通过抓取程序调用堆栈等系统信息，来计算程序的性能，找出系统的平静。</p>

<p>也许你会觉得，这玩意儿有用么？准么？我的意见是，<strong>80%的问题都在20%的代码上，80%的访问都在20%的URL上，而APM则可以有效地帮你找出那20%出问题的地方</strong>。</p>

<p>而我目前所在的部门则是在做一款名为Cloud Insight的、监控基础设施和服务的产品。以一个小公司为例来说，你可以实现如下功能：</p>

<ul>
<li>基本的主机监控

<ul>
<li>监控所有主机的load、iowait、idle等CPU信息；</li>
<li>监控进程的运行状态；</li>
<li>监控内存、硬盘使用情况；</li>
<li>磁盘的i/o读写效率；</li>
</ul>
</li>
<li>服务监控

<ul>
<li>MySQL的连接情况、buffer使用情况、命中率各种等待事件；</li>
<li>Redis的使用情况，各Db，各key等。</li>
</ul>
</li>
<li><p>多样的服务</p>

<ul>
<li>Nginx/Apache/Tomcat；</li>
<li>JMX/JVM；</li>
<li>Kafka/Zookkeeper；</li>
<li>等超过20中的常用服务</li>
</ul>
</li>
<li><p>支持自定义API上传自己的新能指标数据</p></li>
</ul>


<h1>个人生活</h1>

<h2>家有小学生</h2>

<p>娃六岁了，开始上小学了。家有小学生，开始是新鲜、兴奋，后来就是各种劳累操心、压力山大。</p>

<p>孩子承担了家长的期望和将来，说实话这很自私。由于家里有老人帮忙照看小孩，所以没有报课后托管班，但是妈妈给报了手风琴、围棋，我给报了足球。娃虽然不排斥，但也看不出来有多喜欢，更多的只是去玩，去履责而已。</p>

<p>现在教育强调为学生减负，老师是轻松了不少，家长压力就变大了，家长必须投入跟多的经历来辅导、监督孩子的作业。尤其是孩子一看到作业就头疼，做作业不认真，考试总是很平庸，对于太过于重视成绩的家长来说，压力感觉就会很大，甚至可能会有一点点自卑。</p>

<h2>之余</h2>

<p>除了本职工作之外，闲余看些技术书，了解下新知识之外，也尝试了一些未曾有的经验。</p>

<h3>做了一门Docker视频课程</h3>

<p><a href="http://www.kaikeba.com/kkb/kaikeba/content_video.html?vId=2720">《Docker入门与实践》</a>是和<a href="http://www.kaikeba.com/">开课吧</a>和<a href="http://www.alauda.cn/">灵雀云</a>合作的一门面向初学者的Docker课程。</p>

<p>不是我自卖自夸，这们课程除了我的标准唐山普通话不太标准和过于紧张（毕竟是第一次做嘛）之外，主要特点有如下一些。</p>

<ul>
<li>基于官方文档、全面覆盖</li>
<li>基于Docker 1.9</li>
<li>全部试验通过，并将脚本、源文件托管于GitHub之上。</li>
</ul>


<p>源代码、脚本可以在<a href="https://github.com/liubin/docker101">GitHub</a>上看到。如果有问题，也可以通过issue讨论。</p>

<p>当然，做的过程非常类，几乎花了2个月的，不停地整理资料，演示，如此反复。将要开始录制的时候，发现了两个很重要的问题。</p>

<ul>
<li>原来视频中的台词也都要事先编写。否则的话到了影棚再临场发挥效率很低；</li>
<li>内容太多，不得已删了近30%的内容。</li>
</ul>


<h3>完成了《JavaScript Promise迷你书（中文版）》的翻译</h3>

<p>《JavaScript Promise迷你书（中文版）》（<a href="http://liubin.github.io/promises-book/">在线阅读</a>、<a href="https://github.com/liubin/promises-book">源代码</a>）是一本日本人写的关于Promise的免费电子书，我和几个图灵的日语翻译一起完成了中文版的翻译工作，目前在GitHub上有600多个star（个人表示没见过这么多钱）。</p>

<h3>《GitHub入门与实践》的出版</h3>

<p>这也是一本日文图书，我主要是协助了翻译，以及一些GitHub相关工作，包括维护测试用的项目<a href="https://github.com/ituring/first-pr">first-pr</a>。</p>

<p>同样，对于Git和GitHub初学者，推荐一下这本书，内容详实、解释清楚，价钱也不贵，原价才39快钱，打折之后基本就是在30左右。</p>

<p>以下是购买链接：</p>

<ul>
<li><a href="http://item.jd.com/11733256.html">京东</a></li>
<li><a href="http://www.amazon.cn/GitHub%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E8%B7%B5-%E5%A4%A7%E5%A1%9A%E5%BC%98%E8%AE%B0/dp/B011LPUB4M/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1451563326&amp;sr=1-1">amazon</a></li>
<li><a href="http://product.dangdang.com/23738317.html">当当</a></li>
<li><a href="http://product.china-pub.com/4727673">China-pub</a></li>
</ul>


<h1>2016会是什么样？</h1>

<p>2016年，应该事情也很多。2016年的打算不多，除了工作，在个人方面主要打成目标罗列如下，明年年底可以检验一下，基本上都是可量化的。宗旨就是，体验更多没有经历过得事情，让自己过得充实些。</p>

<ul>
<li>学会游泳</li>
<li>和孩子养成爱读书的习惯，大人每月1-2本。</li>
<li>多写一些代码（至少在GitHub上能有1/3的提交记录）</li>
<li>至少每月写2篇博客</li>
<li>读一遍Docker和Kubernetes代码</li>
</ul>


<p>还有，就是希望北京的雾霾会少一些，为了你我，为了下一代，一方面监（tu）督（co）政府，一方面从我做起。</p>

<p><strong>速报：</strong>在写本总结之时，错过红包无数。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开始新Blog]]></title>
    <link href="http://liubin.github.io/blog/2015/12/30/start-new-blog/"/>
    <updated>2015-12-30T18:47:07+08:00</updated>
    <id>http://liubin.github.io/blog/2015/12/30/start-new-blog</id>
    <content type="html"><![CDATA[<p>以前的<a href="http://liubin.org">Blog</a>是基于Wordpress的，最近一直打算换到GitHub上。</p>

<h1>为什么使用GitHub作为Blog？</h1>

<p>原来的Blog是基于Wordpress的，托管在dreamhost上，dm估计很多人已经不熟悉了，取而代之的可能则是linode。</p>

<p>dreamhost现在有几个问题，第一是贵，要$200一年，第二是速度现在显得有点慢，最后一个原因就是维护起来稍显麻烦。</p>

<p>而且，现在Markdown如此普及，如果不精通它，真的不能说是称职的软件工程师。</p>

<h1>如何选择？</h1>

<p>其实我是怕折腾的，所以选择标准主要有3点：</p>

<ul>
<li>安装简单（包括文档容易阅读）</li>
<li>主题（theme）多</li>
<li>容易定制（从页面样式到功能，也就是程序本身）</li>
</ul>


<p>而说到容易定制，就跟程序所使用的编程语言有很大关系了。而这其中，大部分都是用Ruby或者Node.js编写的，关于这两种编程语言，我都不排斥。</p>

<p>以 “GitHub blog” 为关键字，在Google搜一下能出现很多结果，主流应该就是以下几种：</p>

<ul>
<li><a href="http://octopress.org/">Octopress</a></li>
<li><a href="http://jekyllrb.com/">Jekyll</a></li>
<li><a href="http://hexo.io/">Hexo</a></li>
<li><a href="https://github.com/getpelican/pelican">Pelican</a></li>
<li><a href="https://middlemanapp.com/">Middleman</a></li>
<li><a href="https://gohugo.io/">Hugo</a></li>
</ul>


<p>这些工具，工作流程也很像，主要是：</p>

<ul>
<li>创建项目（博客）</li>
<li>编写文章</li>
<li>生成静态文件</li>
<li>部署</li>
</ul>


<p>在编写的过程中，这些程序也都会提供预览功能，即内置一个Web服务器，用户可以在浏览器上预览结果。同时，它们也都支持watch功能，即文件修改后自动重新生成预览文件，用户在浏览器上刷新页面即可看到最新的结果。</p>

<h2>Hugo</h2>

<p>采用Go语言编写，特点是安装简单（Go程序的通性，一个应用一个文件就能打包），速度快。</p>

<p>缺点可能就是改起来麻烦，说实话我没写过太多的Go代码，而且我对构建的速度也不是太关注，因此割爱。</p>

<h2>Pelican</h2>

<p>Pelicat除了支持Markdown，还支持<a href="https://zh.wikipedia.org/wiki/ReStructuredText">reStructuredText</a>格式的文档。</p>

<p>不过Pelican采用Python编写，只好割爱。</p>

<h2>Middleman</h2>

<p>Middleman使用了很多常见的在 Ruby on Rails 中用到的技术：Sass、CoffeeScript、Sprockets、Erb &amp; Haml 等。不过感觉过于复杂，是一个整站生成工具，Blog只是其中一部分而已，比如要想使用Blog功能，需要这么来安装：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># install</span>
</span><span class='line'><span class="nv">$ </span>gem install middleman
</span><span class='line'><span class="nv">$ </span>middleman init MY_PROJECT --template<span class="o">=</span>blog
</span><span class='line'>
</span><span class='line'><span class="c"># Configuration</span>
</span><span class='line'><span class="nv">$ </span>activate :blog
</span></code></pre></td></tr></table></div></figure>


<h2>Hexo</h2>

<p>Hexo采用了Node.js，相比Jekyll和Octopress也没有发现更强大的地方，又没有找到好主题，因此放弃了Hexo。</p>

<p>我虽然不排斥Node.js，但也不是Node.js控。</p>

<h2>Jekyll</h2>

<p>Jekyll是使用Ruby语言编写的静态网站生成工具，它很强大，也支持博客，不过我没有打算要那么多东西，况且还有一个更合适的系统叫做Octopress。</p>

<h2>Octopress</h2>

<p>Octopress是基于Jekyll的、专门为GitHub使用的博客系统，在我看来，它的优点主要有以下：</p>

<ul>
<li>Jekyll的强大 + Octopress的专注（博客）</li>
<li>采用 <a href="http://ethanschoonover.com/solarized">Solarized</a> 展示代码，对开发者友好。</li>
<li>主题多、插件多（基于Jekyll）</li>
<li>网上资料多、用户多</li>
</ul>


<p>最主要的是，我在Octopress中发现了一个非常不错的主题。</p>

<h1>Octopress安装过程</h1>

<p>安装过程也算简单，对于有Ruby基础的人来说，应该1分钟就能搞定了。</p>

<h2>下载octopress仓库</h2>

<p>我本机已经有了Ruby开发环境，因此安装只需要：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone git://github.com/imathis/octopress.git
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>octopress
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>bundle install
</span></code></pre></td></tr></table></div></figure>


<h2>安装主题</h2>

<p>这里，我<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">选择主题</a>花费了些时间，最后我选择了<a href="https://github.com/kui/k-ui-octopress-theme">k-ui-octopress-theme</a>，这是一个十分精简的主题，不过这个主题是日文版本的，我修改了一下，成为了现在使用的<a href="https://github.com/liubin/k-ui-octopress-theme">中文版本的kui主题</a>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone git://github.com/liubin/k-ui-octopress-theme.git .themes/kui
</span><span class='line'><span class="nv">$ </span>rake install<span class="o">[</span><span class="s2">&quot;kui&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>配置网站</h2>

<p>对Octopress的主要设置都在<code>_config.yml</code>文件中，基本必须修改的内容包括URL、博客标题，作者信息等：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">url</span><span class="p">:</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">liubin</span><span class="o">.</span><span class="n">github</span><span class="o">.</span><span class="n">io</span>
</span><span class='line'><span class="ss">title</span><span class="p">:</span> <span class="err">自言自语</span>
</span><span class='line'><span class="ss">subtitle</span><span class="p">:</span> <span class="err">一个软件工程师的自言自语</span>
</span><span class='line'><span class="ss">author</span><span class="p">:</span> <span class="n">bin</span> <span class="n">liu</span>
</span><span class='line'><span class="ss">simple_search</span><span class="p">:</span> <span class="ss">https</span><span class="p">:</span><span class="sr">//</span><span class="n">www</span><span class="o">.</span><span class="n">google</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">search</span>
</span><span class='line'><span class="ss">description</span><span class="p">:</span>
</span></code></pre></td></tr></table></div></figure>


<p>详细内容，可以参考<a href="http://octopress.org/docs/configuring/">官方的配置说明</a></p>

<h2>创建文章</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake new_post<span class="o">[</span><span class="s2">&quot;Start new blog&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>这将会创建一篇新文章，保存位置为<code>source/_posts/2015-12-30-start-new-blog.markdown</code>。由此可见，文件的默认名称就是一个日期加上<code>标题.lower.join('-')</code>。</p>

<p>这里需要注意的是，如果<code>title</code>里写了中文，那么可能你的文件名就会变成汉语拼音的格式，而文件名，也会成为URL的一部分，为了URL的美观，建议大家在创建新文章的时候，使用英语，然后在源文件中修改文章标题。</p>

<p>创建文章并编辑时，就可以预览了。这只需要执行如下命令即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake preview
</span></code></pre></td></tr></table></div></figure>


<p>然后，就可以<a href="http://localhost:4000/">打开浏览器</a>查看编辑结果了。</p>

<h2>发布到GitHub</h2>

<p>如果本地预览没有问题，就可以发布到GitHub上去了。</p>

<p>首先需要设置GitHub信息：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake setup_github_pages
</span><span class='line'>Enter the <span class="nb">read</span>/write url <span class="k">for</span> your repository
</span><span class='line'><span class="o">(</span>For example, <span class="s1">&#39;git@github.com:your_username/your_username.github.io.git)</span>
</span><span class='line'><span class="s1">           or &#39;</span>https://github.com/your_username/your_username.github.io<span class="s1">&#39;)</span>
</span><span class='line'><span class="s1">Repository url: git@github.com:liubin/liubin.github.io.git</span>
</span><span class='line'><span class="s1">Added remote git@github.com:liubin/liubin.github.io.git as origin</span>
</span><span class='line'><span class="s1">Set origin as default remote</span>
</span><span class='line'><span class="s1">Master branch renamed to &#39;</span><span class="nb">source</span><span class="err">&#39;</span> <span class="k">for</span> committing your blog <span class="nb">source </span>files
</span><span class='line'>rm -rf _deploy
</span><span class='line'>mkdir _deploy
</span><span class='line'><span class="nb">cd </span>_deploy
</span><span class='line'>Initialized empty Git repository in /Users/liubin/github/octopress/_deploy/.git/
</span><span class='line'><span class="o">[</span>master <span class="o">(</span>root-commit<span class="o">)</span> f94cd35<span class="o">]</span> Octopress init
</span><span class='line'> <span class="m">1</span> file changed, <span class="m">1</span> insertion<span class="o">(</span>+<span class="o">)</span>
</span><span class='line'> create mode <span class="m">100644</span> index.html
</span><span class='line'><span class="nb">cd</span> -
</span><span class='line'>
</span><span class='line'>---
</span><span class='line'><span class="c">## Now you can deploy to git@github.com:liubin/liubin.github.io.git with `rake deploy` ##</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，生成文件并部署：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 生成文件</span>
</span><span class='line'><span class="nv">$ </span>rake generate
</span><span class='line'><span class="c"># 发布到GitHub</span>
</span><span class='line'><span class="nv">$ </span>rake deploy
</span></code></pre></td></tr></table></div></figure>


<h2>提交Markdown原文</h2>

<p>以上的步骤只是生成静态网站，而原文我们需要自己另外保存。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git add .
</span><span class='line'><span class="nv">$ </span>git commit -am <span class="s2">&quot;add new post&quot;</span>
</span><span class='line'><span class="nv">$ </span>git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>


<p>到这里，安装配置一个GitHub博客，并且发表文章的一个大致过程就简要介绍完毕了。</p>

<h1>遗留问题</h1>

<p>软件这东西，开头很简单，精通很难。至少，在花了两个小时安装并写了本文之后，我还有以下一些问题。</p>

<h2>旧数据如何导入？</h2>

<p>老的Blog数据如何倒过来？如果你有什么好的工具或者经验，欢迎推荐给我。</p>

<h2>定制样式是否方便？</h2>

<p>说实话，对css比较没感觉，这也是自己比较劣势的地方。</p>

<h1>总结</h1>

<p>不过，总的来说，安装还算简单，对这个主题也比较中意，算是不错的开头。</p>
]]></content>
  </entry>
  
</feed>
