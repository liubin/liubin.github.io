<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[自言自语]]></title>
  <link href="http://liubin.github.io/atom.xml" rel="self"/>
  <link href="http://liubin.github.io/"/>
  <updated>2016-01-04T10:33:41+08:00</updated>
  <id>http://liubin.github.io/</id>
  <author>
    <name><![CDATA[bin liu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[读书记录 - 社交红利2.0、孵化Twitter、解忧杂货店]]></title>
    <link href="http://liubin.github.io/blog/2016/01/03/reading/"/>
    <updated>2016-01-03T20:38:21+08:00</updated>
    <id>http://liubin.github.io/blog/2016/01/03/reading</id>
    <content type="html"><![CDATA[<h1>1. 《及时引爆 社交红利2.0》</h1>

<p>本书主要分析了脸萌、围住神经猫、足迹、魔漫相机等国民级（我竟然一个都没用过！）应用爆发的过程、原因分析以及背后故事，而且辅以大量图表来解说，非常可视化、容易理解。</p>

<p>第一章主要讲社交引爆。文章有几个论点还是值得看一下的，比如“一九法则”，这可以理解为二八法则的升级版，即在社交网络中，一款快速增长的应用，在某一细分领域能占据90%的市场份额。老二以后只能望其项背吃土。</p>

<p>这也是作者总结的社交引爆四大定律，即：</p>

<ul>
<li>短定律：用户投入时间成本少；</li>
<li>新：玩法新、创意新；</li>
<li>好友定律：用户越投入，对好友影响越大；</li>
<li>快衰定律：使用时间越短，衰减速度越快。</li>
</ul>


<p>我个人总结一下很多应用火起来的原因，这些比较重要：简单上手、鼓励分享、消磨碎片时间、娱乐化。</p>

<p>第二章也涉及到了一些运营相关的内容。个人关系链和社群，是社交网络中最常见的两种形态，也就是微信中的好友和群。社群可以是兴趣爱好群、粉丝群等。社群是使产品快速发展时尝鲜而来的用户群，长期黏着、转化的最好方式之一。这里拿辣妈帮完全考志愿者组织各地年会的例子，来说明了运营社群的价值，以及如何去做运营。</p>

<p>同时，作者总结出了社群组织的四大原则：</p>

<ul>
<li>不是企业建社群，而是让用户自己来；</li>
<li>目标清晰，逐级实现，重点解决用户个体在社群中长期活跃问题；</li>
<li>个人目标清晰明了；</li>
<li>及时且正向的群体激励。大型、滞后的激励，比不上及时、细小的激励，企业主动的激励不如个人主动获得的激励。</li>
</ul>


<p>第三章作者主要讲了如何进行社交产品开发。</p>

<p>在开发模式上，作者也推崇自管理，鼓励小团队、放权模式，让产品不断试错，其中举的韩都衣舍的例子很不错，2-3人的小团队，快速推出产品、快速上市、以数据为决策基准、淘汰没有增长率的商品。</p>

<p>最后，分享一下给我留下比较深刻印象的一句话，我觉得可以为创业者带来一些灵感：“无价值的信息泛滥时，有价值的信息或服务会变得更加昂贵”。</p>

<p>不过老实说，这本书读得很慢，不是特别好理解，至少我读起来感觉条理性不强。</p>

<h1>2. 《孵化Twitter：从蛮荒到IPO的狂野旅程》</h1>

<p>如题所示，Twitter成长过程可以用一波三折、问题不断来形容，尤其是高管和投资人之间的斗争。</p>

<p>我先简单说一下大概过程。</p>

<p>开头小篇幅讲了埃文（Evan）把Blogger卖给Google，不过他受不了Google的氛围，没多久就从Google退休了。</p>

<p>接着他投资了邻居诺阿要做一款私人电台，成立Odeo公司。后来杰克多西加入Odeo（诺阿雇佣了杰克），不过这款私人电台软件很不成功，濒临倒闭之时，诺阿和杰克共通推出了Twitter这个点子，埃文也很看好这个项目。</p>

<p>不过，狗血剧情正式开始了：</p>

<ul>
<li>埃文和诺阿意见很难统一，下属也对诺阿怨声载道，甚至杰克说他和诺阿只能留一个；</li>
<li>诺阿被赶走，净身出门，Twitter变为埃文个人投资公司，给了杰克20%期权，杰克任CTO，加上比兹（Biz Stone）3个人成为联合创始人；</li>
<li>杰克管理水平被人诟病，宕机问题迟迟搞不定，CEO还下班准时去学裁缝；</li>
<li>埃文和投资人决定赶走杰克，但是比兹说如果杰克走，他也走，不得已，妥协方案是埃文当CEO，杰克保留一个董事席位，期权貌似也都没了，不过给了20w遣散费。没有彻底清理杰克，也是后来埃文出局的根本原因；</li>
<li>杰克联系了扎克伯格，但Facebook没有能给杰克提供一个合适的高管位置，杰克后来创建了移动支付公司Square；</li>
<li>埃文找来自己的好朋友迪克做COO，Twitter开始有收入；</li>
<li>Twitter方向不明，杰克抓住机会，暗地里联合一些高管、投资人（就是前面和埃文一起赶走杰克的那些人）决定赶走埃文</li>
<li>埃文退位，迪克任CEO；不久比兹也离开。</li>
</ul>


<p>故事到此结束，埃文貌似资产在20亿美元，诺阿生了个娃，不过还是个穷光蛋。</p>

<p>看完这本书，个人新认识如下：</p>

<ul>
<li>创始人技术水平一般般</li>
<li>投资人为了自己的目的不择手段；</li>
<li>杰克多西人品不行啊。</li>
</ul>


<p>作为一部“野”史，这本书挺精彩的，像悬疑小说一样，让人不停地读下去，尤其是杰克想法设法要向埃文“复仇”。</p>

<h1>3. 《解忧杂货店》</h1>

<p>简单来说，就是。。。三言两语还真不好说。</p>

<p>首先两个重要地点（建筑物）：浪矢杂货店和孤儿院丸光园。小说中的人物也都围绕着这两个建筑物，他们大都在孤儿院度过童年，都在浪矢杂货店咨询过烦恼。</p>

<p>浪矢杂货店的老板（浪矢雄治，大概1900-1979/9/13）是个穷小子，孤儿院丸光园的创始人（皆月晓子）是个富家小姐，两人本来相爱，无奈被皆月家族有钱，看不上一个普通的年轻人。两人本来相约私奔，但是并没有成功，皆月家族本来要狠狠恶打击浪矢雄治的，但是皆月晓子答应和浪矢断绝关系，以换得家里人放过浪矢。</p>

<p>浪矢后来回到了家乡，开了浪矢杂货店。皆月晓子则终身未嫁，在浪矢家乡附近，开设了孤儿院丸光园。</p>

<p>小说的展开，都围绕各主人公在这两者之间的关系来演进。</p>

<p>2012年9月12日半夜，三个小偷在抢劫了晴美（小狗公司的老板，1990年前炒股和房地产发财），逃到了浪矢杂货店躲避，然后开始了他们的解答烦恼的过程。</p>

<p>这其中，他们收到了晴美的咨询。晴美在孤儿院度过了几年，后来被亲戚收回，她一心报答亲戚的恩情，咨询是否一直做陪酒女下去。小偷三人组最后告诉了晴美发财的方法：买过票，买卖不动产，在1989年左右全抛（这时候小偷三人组收到的咨询信是几十年前的）。</p>

<p>果真，到了2012年，晴美发财了，并成了三个小偷抢劫的对象。而晴美之所以能有今天，却都是因为在2012年9约13日凌晨指点的结果。。。</p>

<p>而小偷三人组，也都曾在丸光园里成长。原文人物关系和情节比这丰富多了，每个人都有不同的家庭背景和成长经历。</p>

<p>总之，这部小说虽然算不上日系悬疑类，没有惊心动魄的大起大落，但是情节环环相扣，静静中透着爱、宽容和美好，闲暇时间推荐一读。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的2015年总结]]></title>
    <link href="http://liubin.github.io/blog/2015/12/31/my-2015/"/>
    <updated>2015-12-31T17:22:45+08:00</updated>
    <id>http://liubin.github.io/blog/2015/12/31/my-2015</id>
    <content type="html"><![CDATA[<p>2015年似乎时间过得好慢，在他人看来平平淡淡，自己认为大事主要有两件：一是换了次工作，二是娃上了学。</p>

<h1>工作</h1>

<h2>天使汇</h2>

<p>今年完成了一次转职。6月底，从<a href="http://angelcrunch.com/">天使汇</a>换到了<a href="http://www.oneapm.com">OneAPM</a>。</p>

<p>天使汇是一个互联网股权众筹平台，和一般的众筹不太一样，天使汇的投资者都是经过认证的投资机构和天使投资人，即所谓的合格投资人。我觉得这是我很赞同的，正如天使汇CEO Luc所说（其实也是引用）：“寡妇的钱不能要”，寡妇的钱对她们很重要，她们没有很投资知识和技能，承担风险的意愿也低。</p>

<p>天使汇除了众筹官网，还有Tech2Ipo这个科技媒体，有一群很有才华的编辑。这里推荐由这些编辑创建的微信自媒体“赤潮”（公众号：akashio）。</p>

<p>我在天使汇主要的工作则是做了<a href="http://www.1wangtong.com/">一网通</a>，作为天使汇整个业务流程闭环中的一步，一网通的主要关注与投后管理，与投前的线上众筹和闪投活动处于不同的阶段。具体来说一网通的主要功能主要是工商注册和公司治理。工商注册这块的话，创业者只需要网上提交资料，通过快递寄送资料，就能足不出户设立公司，而且刻章办证费用也会低一些。展开类似业务的创业公司包括绿狗和快法务之类的。</p>

<p>如果你是创业者，正要注册公司，不妨试一下<a href="http://www.1wangtong.com/">一网通</a>。</p>

<h2>OneAPM</h2>

<p>来OneAPM最大的原因就是离家近，OneAPM在清河的东升科技园，就在我家对面，走路上班的话20分钟就可以了，而且园区里还有一个号称全年无休，24小时营业的7-11便利店。</p>

<p>公司主要做应用程序性能管理（Application Performance Management / Monitoring），官网介绍如下：</p>

<blockquote><p>专注于提供新一代应用性能管理软件和服务，帮助用户降低 IT 成本，提高业务生产力。产品适用于复杂的现代应用程序生产环境，提供端到端应用性能管理、移动端和浏览器真实用户体验分析、业务交易实时分析。</p></blockquote>

<p>简单来说，就是通过将“探针（Agent）”嵌入到JVM、RVM等之内，通过抓取程序调用堆栈等系统信息，来计算程序的性能，找出系统的平静。</p>

<p>也许你会觉得，这玩意儿有用么？准么？我的意见是，<strong>80%的问题都在20%的代码上，80%的访问都在20%的URL上，而APM则可以有效地帮你找出那20%出问题的地方</strong>。</p>

<p>而我目前所在的部门则是在做一款名为Cloud Insight的、监控基础设施和服务的产品。以一个小公司为例来说，你可以实现如下功能：</p>

<ul>
<li>基本的主机监控

<ul>
<li>监控所有主机的load、iowait、idle等CPU信息；</li>
<li>监控进程的运行状态；</li>
<li>监控内存、硬盘使用情况；</li>
<li>磁盘的i/o读写效率；</li>
</ul>
</li>
<li>服务监控

<ul>
<li>MySQL的连接情况、buffer使用情况、命中率各种等待事件；</li>
<li>Redis的使用情况，各Db，各key等。</li>
</ul>
</li>
<li><p>多样的服务</p>

<ul>
<li>Nginx/Apache/Tomcat；</li>
<li>JMX/JVM；</li>
<li>Kafka/Zookkeeper；</li>
<li>等超过20中的常用服务</li>
</ul>
</li>
<li><p>支持自定义API上传自己的新能指标数据</p></li>
</ul>


<h1>个人生活</h1>

<h2>家有小学生</h2>

<p>娃六岁了，开始上小学了。家有小学生，开始是新鲜、兴奋，后来就是各种劳累操心、压力山大。</p>

<p>孩子承担了家长的期望和将来，说实话这很自私。由于家里有老人帮忙照看小孩，所以没有报课后托管班，但是妈妈给报了手风琴、围棋，我给报了足球。娃虽然不排斥，但也看不出来有多喜欢，更多的只是去玩，去履责而已。</p>

<p>现在教育强调为学生减负，老师是轻松了不少，家长压力就变大了，家长必须投入跟多的经历来辅导、监督孩子的作业。尤其是孩子一看到作业就头疼，做作业不认真，考试总是很平庸，对于太过于重视成绩的家长来说，压力感觉就会很大，甚至可能会有一点点自卑。</p>

<h2>之余</h2>

<p>除了本职工作之外，闲余看些技术书，了解下新知识之外，也尝试了一些未曾有的经验。</p>

<h3>做了一门Docker视频课程</h3>

<p><a href="http://www.kaikeba.com/kkb/kaikeba/content_video.html?vId=2720">《Docker入门与实践》</a>是和<a href="http://www.kaikeba.com/">开课吧</a>和<a href="http://www.alauda.cn/">灵雀云</a>合作的一门面向初学者的Docker课程。</p>

<p>不是我自卖自夸，这们课程除了我的标准唐山普通话不太标准和过于紧张（毕竟是第一次做嘛）之外，主要特点有如下一些。</p>

<ul>
<li>基于官方文档、全面覆盖</li>
<li>基于Docker 1.9</li>
<li>全部试验通过，并将脚本、源文件托管于GitHub之上。</li>
</ul>


<p>源代码、脚本可以在<a href="https://github.com/liubin/docker101">GitHub</a>上看到。如果有问题，也可以通过issue讨论。</p>

<p>当然，做的过程非常类，几乎花了2个月的，不停地整理资料，演示，如此反复。将要开始录制的时候，发现了两个很重要的问题。</p>

<ul>
<li>原来视频中的台词也都要事先编写。否则的话到了影棚再临场发挥效率很低；</li>
<li>内容太多，不得已删了近30%的内容。</li>
</ul>


<h3>完成了《JavaScript Promise迷你书（中文版）》的翻译</h3>

<p>《JavaScript Promise迷你书（中文版）》（<a href="http://liubin.github.io/promises-book/">在线阅读</a>、<a href="https://github.com/liubin/promises-book">源代码</a>）是一本日本人写的关于Promise的免费电子书，我和几个图灵的日语翻译一起完成了中文版的翻译工作，目前在GitHub上有600多个star（个人表示没见过这么多钱）。</p>

<h3>《GitHub入门与实践》的出版</h3>

<p>这也是一本日文图书，我主要是协助了翻译，以及一些GitHub相关工作，包括维护测试用的项目<a href="https://github.com/ituring/first-pr">first-pr</a>。</p>

<p>同样，对于Git和GitHub初学者，推荐一下这本书，内容详实、解释清楚，价钱也不贵，原价才39快钱，打折之后基本就是在30左右。</p>

<p>以下是购买链接：</p>

<ul>
<li><a href="http://item.jd.com/11733256.html">京东</a></li>
<li><a href="http://www.amazon.cn/GitHub%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E8%B7%B5-%E5%A4%A7%E5%A1%9A%E5%BC%98%E8%AE%B0/dp/B011LPUB4M/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1451563326&amp;sr=1-1">amazon</a></li>
<li><a href="http://product.dangdang.com/23738317.html">当当</a></li>
<li><a href="http://product.china-pub.com/4727673">China-pub</a></li>
</ul>


<h1>2016会是什么样？</h1>

<p>2016年，应该事情也很多。2016年的打算不多，除了工作，在个人方面主要打成目标罗列如下，明年年底可以检验一下，基本上都是可量化的。宗旨就是，体验更多没有经历过得事情，让自己过得充实些。</p>

<ul>
<li>学会游泳</li>
<li>和孩子养成爱读书的习惯，大人每月1-2本。</li>
<li>多写一些代码（至少在GitHub上能有1/3的提交记录）</li>
<li>至少每月写2篇博客</li>
<li>读一遍Docker和Kubernetes代码</li>
</ul>


<p>还有，就是希望北京的雾霾会少一些，为了你我，为了下一代，一方面监（tu）督（co）政府，一方面从我做起。</p>

<p><strong>速报：</strong>在写本总结之时，错过红包无数。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开始新Blog]]></title>
    <link href="http://liubin.github.io/blog/2015/12/30/start-new-blog/"/>
    <updated>2015-12-30T18:47:07+08:00</updated>
    <id>http://liubin.github.io/blog/2015/12/30/start-new-blog</id>
    <content type="html"><![CDATA[<p>以前的<a href="http://liubin.org">Blog</a>是基于Wordpress的，最近一直打算换到GitHub上。</p>

<h1>为什么使用GitHub作为Blog？</h1>

<p>原来的Blog是基于Wordpress的，托管在dreamhost上，dm估计很多人已经不熟悉了，取而代之的可能则是linode。</p>

<p>dreamhost现在有几个问题，第一是贵，要$200一年，第二是速度现在显得有点慢，最后一个原因就是维护起来稍显麻烦。</p>

<p>而且，现在Markdown如此普及，如果不精通它，真的不能说是称职的软件工程师。</p>

<h1>如何选择？</h1>

<p>其实我是怕折腾的，所以选择标准主要有3点：</p>

<ul>
<li>安装简单（包括文档容易阅读）</li>
<li>主题（theme）多</li>
<li>容易定制（从页面样式到功能，也就是程序本身）</li>
</ul>


<p>而说到容易定制，就跟程序所使用的编程语言有很大关系了。而这其中，大部分都是用Ruby或者Node.js编写的，关于这两种编程语言，我都不排斥。</p>

<p>以 “GitHub blog” 为关键字，在Google搜一下能出现很多结果，主流应该就是以下几种：</p>

<ul>
<li><a href="http://octopress.org/">Octopress</a></li>
<li><a href="http://jekyllrb.com/">Jekyll</a></li>
<li><a href="http://hexo.io/">Hexo</a></li>
<li><a href="https://github.com/getpelican/pelican">Pelican</a></li>
<li><a href="https://middlemanapp.com/">Middleman</a></li>
<li><a href="https://gohugo.io/">Hugo</a></li>
</ul>


<p>这些工具，工作流程也很像，主要是：</p>

<ul>
<li>创建项目（博客）</li>
<li>编写文章</li>
<li>生成静态文件</li>
<li>部署</li>
</ul>


<p>在编写的过程中，这些程序也都会提供预览功能，即内置一个Web服务器，用户可以在浏览器上预览结果。同时，它们也都支持watch功能，即文件修改后自动重新生成预览文件，用户在浏览器上刷新页面即可看到最新的结果。</p>

<h2>Hugo</h2>

<p>采用Go语言编写，特点是安装简单（Go程序的通性，一个应用一个文件就能打包），速度快。</p>

<p>缺点可能就是改起来麻烦，说实话我没写过太多的Go代码，而且我对构建的速度也不是太关注，因此割爱。</p>

<h2>Pelican</h2>

<p>Pelicat除了支持Markdown，还支持<a href="https://zh.wikipedia.org/wiki/ReStructuredText">reStructuredText</a>格式的文档。</p>

<p>不过Pelican采用Python编写，只好割爱。</p>

<h2>Middleman</h2>

<p>Middleman使用了很多常见的在 Ruby on Rails 中用到的技术：Sass、CoffeeScript、Sprockets、Erb &amp; Haml 等。不过感觉过于复杂，是一个整站生成工具，Blog只是其中一部分而已，比如要想使用Blog功能，需要这么来安装：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># install</span>
</span><span class='line'><span class="nv">$ </span>gem install middleman
</span><span class='line'><span class="nv">$ </span>middleman init MY_PROJECT --template<span class="o">=</span>blog
</span><span class='line'>
</span><span class='line'><span class="c"># Configuration</span>
</span><span class='line'><span class="nv">$ </span>activate :blog
</span></code></pre></td></tr></table></div></figure>


<h2>Hexo</h2>

<p>Hexo采用了Node.js，相比Jekyll和Octopress也没有发现更强大的地方，又没有找到好主题，因此放弃了Hexo。</p>

<p>我虽然不排斥Node.js，但也不是Node.js控。</p>

<h2>Jekyll</h2>

<p>Jekyll是使用Ruby语言编写的静态网站生成工具，它很强大，也支持博客，不过我没有打算要那么多东西，况且还有一个更合适的系统叫做Octopress。</p>

<h2>Octopress</h2>

<p>Octopress是基于Jekyll的、专门为GitHub使用的博客系统，在我看来，它的优点主要有以下：</p>

<ul>
<li>Jekyll的强大 + Octopress的专注（博客）</li>
<li>采用 <a href="http://ethanschoonover.com/solarized">Solarized</a> 展示代码，对开发者友好。</li>
<li>主题多、插件多（基于Jekyll）</li>
<li>网上资料多、用户多</li>
</ul>


<p>最主要的是，我在Octopress中发现了一个非常不错的主题。</p>

<h1>Octopress安装过程</h1>

<p>安装过程也算简单，对于有Ruby基础的人来说，应该1分钟就能搞定了。</p>

<h2>下载octopress仓库</h2>

<p>我本机已经有了Ruby开发环境，因此安装只需要：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone git://github.com/imathis/octopress.git
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>octopress
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>bundle install
</span></code></pre></td></tr></table></div></figure>


<h2>安装主题</h2>

<p>这里，我<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">选择主题</a>花费了些时间，最后我选择了<a href="https://github.com/kui/k-ui-octopress-theme">k-ui-octopress-theme</a>，这是一个十分精简的主题，不过这个主题是日文版本的，我修改了一下，成为了现在使用的<a href="https://github.com/liubin/k-ui-octopress-theme">中文版本的kui主题</a>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone git://github.com/liubin/k-ui-octopress-theme.git .themes/kui
</span><span class='line'><span class="nv">$ </span>rake install<span class="o">[</span><span class="s2">&quot;kui&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>配置网站</h2>

<p>对Octopress的主要设置都在<code>_config.yml</code>文件中，基本必须修改的内容包括URL、博客标题，作者信息等：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">url</span><span class="p">:</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">liubin</span><span class="o">.</span><span class="n">github</span><span class="o">.</span><span class="n">io</span>
</span><span class='line'><span class="ss">title</span><span class="p">:</span> <span class="err">自言自语</span>
</span><span class='line'><span class="ss">subtitle</span><span class="p">:</span> <span class="err">一个软件工程师的自言自语</span>
</span><span class='line'><span class="ss">author</span><span class="p">:</span> <span class="n">bin</span> <span class="n">liu</span>
</span><span class='line'><span class="ss">simple_search</span><span class="p">:</span> <span class="ss">https</span><span class="p">:</span><span class="sr">//</span><span class="n">www</span><span class="o">.</span><span class="n">google</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">search</span>
</span><span class='line'><span class="ss">description</span><span class="p">:</span>
</span></code></pre></td></tr></table></div></figure>


<p>详细内容，可以参考<a href="http://octopress.org/docs/configuring/">官方的配置说明</a></p>

<h2>创建文章</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake new_post<span class="o">[</span><span class="s2">&quot;Start new blog&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>这将会创建一篇新文章，保存位置为<code>source/_posts/2015-12-30-start-new-blog.markdown</code>。由此可见，文件的默认名称就是一个日期加上<code>标题.lower.join('-')</code>。</p>

<p>这里需要注意的是，如果<code>title</code>里写了中文，那么可能你的文件名就会变成汉语拼音的格式，而文件名，也会成为URL的一部分，为了URL的美观，建议大家在创建新文章的时候，使用英语，然后在源文件中修改文章标题。</p>

<p>创建文章并编辑时，就可以预览了。这只需要执行如下命令即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake preview
</span></code></pre></td></tr></table></div></figure>


<p>然后，就可以<a href="http://localhost:4000/">打开浏览器</a>查看编辑结果了。</p>

<h2>发布到GitHub</h2>

<p>如果本地预览没有问题，就可以发布到GitHub上去了。</p>

<p>首先需要设置GitHub信息：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake setup_github_pages
</span><span class='line'>Enter the <span class="nb">read</span>/write url <span class="k">for</span> your repository
</span><span class='line'><span class="o">(</span>For example, <span class="s1">&#39;git@github.com:your_username/your_username.github.io.git)</span>
</span><span class='line'><span class="s1">           or &#39;</span>https://github.com/your_username/your_username.github.io<span class="s1">&#39;)</span>
</span><span class='line'><span class="s1">Repository url: git@github.com:liubin/liubin.github.io.git</span>
</span><span class='line'><span class="s1">Added remote git@github.com:liubin/liubin.github.io.git as origin</span>
</span><span class='line'><span class="s1">Set origin as default remote</span>
</span><span class='line'><span class="s1">Master branch renamed to &#39;</span><span class="nb">source</span><span class="err">&#39;</span> <span class="k">for</span> committing your blog <span class="nb">source </span>files
</span><span class='line'>rm -rf _deploy
</span><span class='line'>mkdir _deploy
</span><span class='line'><span class="nb">cd </span>_deploy
</span><span class='line'>Initialized empty Git repository in /Users/liubin/github/octopress/_deploy/.git/
</span><span class='line'><span class="o">[</span>master <span class="o">(</span>root-commit<span class="o">)</span> f94cd35<span class="o">]</span> Octopress init
</span><span class='line'> <span class="m">1</span> file changed, <span class="m">1</span> insertion<span class="o">(</span>+<span class="o">)</span>
</span><span class='line'> create mode <span class="m">100644</span> index.html
</span><span class='line'><span class="nb">cd</span> -
</span><span class='line'>
</span><span class='line'>---
</span><span class='line'><span class="c">## Now you can deploy to git@github.com:liubin/liubin.github.io.git with `rake deploy` ##</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，生成文件并部署：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 生成文件</span>
</span><span class='line'><span class="nv">$ </span>rake generate
</span><span class='line'><span class="c"># 发布到GitHub</span>
</span><span class='line'><span class="nv">$ </span>rake deploy
</span></code></pre></td></tr></table></div></figure>


<h2>提交Markdown原文</h2>

<p>以上的步骤只是生成静态网站，而原文我们需要自己另外保存。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git add .
</span><span class='line'><span class="nv">$ </span>git commit -am <span class="s2">&quot;add new post&quot;</span>
</span><span class='line'><span class="nv">$ </span>git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>


<p>到这里，安装配置一个GitHub博客，并且发表文章的一个大致过程就简要介绍完毕了。</p>

<h1>遗留问题</h1>

<p>软件这东西，开头很简单，精通很难。至少，在花了两个小时安装并写了本文之后，我还有以下一些问题。</p>

<h2>旧数据如何导入？</h2>

<p>老的Blog数据如何倒过来？如果你有什么好的工具或者经验，欢迎推荐给我。</p>

<h2>定制样式是否方便？</h2>

<p>说实话，对css比较没感觉，这也是自己比较劣势的地方。</p>

<h1>总结</h1>

<p>不过，总的来说，安装还算简单，对这个主题也比较中意，算是不错的开头。</p>
]]></content>
  </entry>
  
</feed>
