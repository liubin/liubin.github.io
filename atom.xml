<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[人间指南]]></title>
  <link href="http://liubin.org/atom.xml" rel="self"/>
  <link href="http://liubin.org/"/>
  <updated>2022-04-27T16:42:41+08:00</updated>
  <id>http://liubin.org/</id>
  <author>
    <name><![CDATA[bin liu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Nydus bootstrap 文件解析]]></title>
    <link href="http://liubin.org/blog/2022/04/27/nydus-bootstrap-layout/"/>
    <updated>2022-04-27T10:54:21+08:00</updated>
    <id>http://liubin.org/blog/2022/04/27/nydus-bootstrap-layout</id>
    <content type="html"><![CDATA[<p>这是零零散散的关于 Nydus 学习笔记中的一段，主要是了解下 bootstrap 文件的存储格式。我们知道 nydus 会创建两种类型的文件：</p>

<ul>
<li>bootstrap： 存储文件系统的元数据</li>
<li>blob： 存储数据内容</li>
</ul>


<p>这里我们以一个很简单的例子，来看一下 bootstrap 都保存了哪些文件系统的信息。</p>

<h2>环境准备</h2>

<p>我们使用的测试例子很简单，通过 nydus-image create 创建一个 bootstrap，这个 bootstrap 的输入文件夹内容也很少。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir fs
</span><span class='line'><span class="nv">$ </span>touch fs/aaa
</span><span class='line'><span class="nv">$ </span>date &gt; fs/bbb
</span><span class='line'><span class="nv">$ </span>nydus-image create --fs-version <span class="m">5</span> --bootstrap output/bootstrap --blob-dir output fs
</span></code></pre></td></tr></table></div></figure>


<p>可以看出，该文件系统一共有两个文件：一个空文件，一个很简单的文本文件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ls -l output/bootstrap
</span><span class='line'>-rw-r--r-- <span class="m">1</span> vagrant vagrant <span class="m">8832</span> Apr <span class="m">26</span> 06:55 output/bootstrap
</span></code></pre></td></tr></table></div></figure>


<h2>bootstrap 文件解析</h2>

<p>我们使用 <code>xxd</code> 命令来输出 bootstrap 文件的 16 进制内容，具体命令如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>xxd -a -e output/bootstrap
</span></code></pre></td></tr></table></div></figure>


<p><code>xxd</code> 比 <code>hexdump</code> 的优点是可以非常简单的输出 <code>little-endian</code> 的内容，即其 <code>-e</code> 选项，rafs super block 存储的时候使用的就是 little-endian 的字节顺序。<code>-a</code> 选项用于去除空行（全 0x00 的行）。<code>-g 1</code> 选项设置一个字节单独一个字段，可以帮助我们计数，默认的话一个字段 4 个字节，即一个 u32 。</p>

<p>而且 <code>xxd</code> 输出默认就是 32 位一个字段，正好是一个 u32 ，而 <code>RafsV5SuperBlock</code> 中很多数据就是 u32 类型的。该命令输出结果一行对应 16 个字节，也就是 4 个 u32 。每列宽度可以通过 <code>-g</code> 选项控制，默认为 2，即 4 个字节。</p>

<p>下面输出结果中第一列为地址，后 4 列为二进制数据，之后部分，比如 <code>SFAR...</code> 为 ASCII 显示字符，在这里没有意义，可以忽略。</p>

<h3>RafsV5SuperBlock</h3>

<p>先来看看 <code>RafsV5SuperBlock</code> 对应的数据。</p>

<h4>第一个 16 字节</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>00000000: <span class="m">52414653</span> <span class="m">00000500</span> <span class="m">00002000</span> <span class="m">00100000</span>  SFAR..... ......
</span></code></pre></td></tr></table></div></figure>


<p>前 16 个字节，对应 RafsV5SuperBlock 的以下属性：</p>

<ul>
<li><code>s_magic: u32</code>： v5 magic number 是 <code>0x5241_4653</code>。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// rafs/src/metadata/layout/v5.rs</span>
</span><span class='line'><span class="kr">const</span> <span class="n">RAFSV5_SUPER_MAGIC</span><span class="o">:</span> <span class="kt">u32</span> <span class="o">=</span> <span class="mh">0x5241_4653</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>s_fs_version: u32</code>： 文件系统版本，即 <code>500</code>。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// rafs/src/metadata/layout/mod.rs</span>
</span><span class='line'><span class="k">pub</span> <span class="kr">const</span> <span class="n">RAFS_SUPER_VERSION_V5</span><span class="o">:</span> <span class="kt">u32</span> <span class="o">=</span> <span class="mh">0x500</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>s_sb_size: u32</code>： super block 大小 0x2000，即 8192 字节。</li>
<li><code>s_block_size: u32</code>： 块大小，0x00100000 == 1048576 == 1024 * 1024。</li>
</ul>


<h4>第二个 16 字节</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="mi">00000010</span><span class="o">:</span> <span class="mi">00000016</span> <span class="mi">00000000</span> <span class="mi">00000003</span> <span class="mi">00000000</span>  <span class="p">................</span>
</span></code></pre></td></tr></table></div></figure>


<p>对应两个属性：</p>

<ul>
<li><code>s_flags: u64</code>： 来自 RafsSuperFlags ，这里值为 16，具体内容为 <code>COMPRESS_LZ4_BLOCK | DIGESTER_BLAKE3 | EXPLICIT_UID_GID</code>，如何算出来的如下所示：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// rafs/src/metadata/mod.rs</span>
</span><span class='line'><span class="kr">const</span> <span class="n">COMPRESS_LZ4_BLOCK</span> <span class="o">=</span> <span class="mh">0x0000_0002</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="n">DIGESTER_BLAKE3</span> <span class="o">=</span> <span class="mh">0x0000_0004</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="n">EXPLICIT_UID_GID</span> <span class="o">=</span> <span class="mh">0x0000_0010</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>s_inodes_count: u64</code>： 这里值为3，即只有3个inode，一个根文件，还有两个普通文件。</li>
</ul>


<h4>第三个 16 字节</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="mi">00000020</span><span class="o">:</span> <span class="mi">00002000</span> <span class="mi">00000000</span> <span class="mi">00002010</span> <span class="mi">00000000</span>  <span class="p">.</span> <span class="p">.......</span> <span class="p">......</span>
</span></code></pre></td></tr></table></div></figure>


<p>对应两个属性：</p>

<ul>
<li><code>s_inode_table_offset: u64</code>： inode table 所在位置的位移，这里为 0x2000 = 8192。注意这里虽然是 u64 ，但是好像 <code>00002000 00000000</code> 的顺序还是需要以 4 字节为单位，从右往左读，而每个 4 字节则是从左往右读。</li>
<li><code>s_prefetch_table_offset: u64</code>： prefetch table 的位移，从相对值来说，比上面的 inode table 的位置 多了 0x10，即 16 个字节。</li>
</ul>


<h4>第四个 16 字节</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="mi">00000030</span><span class="o">:</span> <span class="mi">00002010</span> <span class="mi">00000000</span> <span class="mi">00000003</span> <span class="mi">00000000</span>  <span class="p">.</span> <span class="p">..............</span>
</span></code></pre></td></tr></table></div></figure>


<p>对应三个属性：</p>

<ul>
<li><code>s_blob_table_offset: u64</code>： blob table 对应的值为 0x2010 ，和 prefetch table 的 offset 值一样。大概是因为该 bootstrap 没有使用 prefetch 吧。</li>
<li><code>s_inode_table_entries: u32</code>： 3 个 entries 对应上面说的 3 个 inode 。</li>
<li><code>s_prefetch_table_entries: u32</code>： prefetch entries 数量为 0 。</li>
</ul>


<h4>第5个 16 字节</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="mi">00000040</span><span class="o">:</span> <span class="mi">00000048</span> <span class="mi">00000001</span> <span class="mi">00002058</span> <span class="mi">00000000</span>  <span class="n">H</span><span class="p">.......</span><span class="n">X</span> <span class="p">......</span>
</span></code></pre></td></tr></table></div></figure>


<p>对应三个属性：</p>

<ul>
<li><code>s_blob_table_size: u32</code>： 0x48 == 72。</li>
<li><code>s_extended_blob_table_entries: u32</code>： 有 1 个条目，因为我们这个测试中只生成一个 blob 文件。</li>
<li><code>s_extended_blob_table_offset: u64</code>： 位移位置在 0x2058。</li>
</ul>


<h4>第5个 16 字节及以后</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="mi">00000050</span><span class="o">:</span> <span class="mi">00000000</span> <span class="mi">00000000</span> <span class="mi">00000000</span> <span class="mi">00000000</span>  <span class="p">................</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>RafsV5SuperBlock</code> 结构体的最后一个属性如下：</p>

<ul>
<li><code>s_reserved: [u8; RAFSV5_SUPERBLOCK_RESERVED_SIZE]</code></li>
</ul>


<p>我们从这个常量的定义可以看到：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// rafs/src/metadata/layout/v5.rs</span>
</span><span class='line'><span class="k">pub</span><span class="p">(</span><span class="n">crate</span><span class="p">)</span> <span class="kr">const</span> <span class="n">RAFSV5_SUPERBLOCK_SIZE</span><span class="o">:</span> <span class="n">usize</span> <span class="o">=</span> <span class="mi">8192</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="n">RAFSV5_SUPERBLOCK_RESERVED_SIZE</span><span class="o">:</span> <span class="n">usize</span> <span class="o">=</span> <span class="n">RAFSV5_SUPERBLOCK_SIZE</span> <span class="o">-</span> <span class="mi">80</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Inode Table</h3>

<p>整个 super block 占用 8192 字节，其中前面我们看到的几个属性，占用 80 个字节，其余部分为保留区域，以供扩展时使用。</p>

<p><code>RafsV5SuperBlock</code> 中大部分都是预留的空位置，从下面一行可以看到，地址跳到了 0x2000，也是我们前面看到的 <code>s_inode_table_offset</code> 的值，这也意味着，这行开始的内容是 inode table 的内容。</p>

<p>在看上面的内容之前，我们先看看 inode table 的结构：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// rafs/src/metadata/layout/v5.rs</span>
</span><span class='line'><span class="k">pub</span> <span class="k">struct</span> <span class="n">RafsV5InodeTable</span> <span class="p">{</span>
</span><span class='line'>    <span class="c-Doc">/// Inode offset array.</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">data</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="kt">u32</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意这里 inode table 是一个 vector，里面存的不是 inode 对象，而是 inode 对应的 offset，而 vector 的索引就是 inode 对应的数值，每个 offset 都是 32 位类型，占用 4 个字节。而且索引的值为 inode -1 ，这样 root inode 就保存在 0 的位置上，一点都不浪费。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="mi">00002000</span><span class="o">:</span> <span class="mi">00000413</span> <span class="mi">00000424</span> <span class="mi">00000435</span> <span class="mi">00000000</span>  <span class="p">....</span><span class="err">$</span><span class="p">...</span><span class="mf">5.</span><span class="p">......</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们看到了 3 个 offset，分别为 413、424 和 432，每个 offset 之间间隔 11 。这个 offset 是 inode table 元素对应在 bootstrap 文件中的绝对位置的偏移量，比如 0x413 = 1043，而这个数据结构保存的位置都是 8 字节对齐的，所以这个值在保存的时候，是右位移 3 位的，取出来的时候再左位移 3 位，所以真正的位移值为 1043 * 8 = 8344，也就是 16 进制的 0x2098，在下面的分析中我们还会看到 inode table 的具体内容。</p>

<p>同理 0x424 对应的偏移为 0x2120，0x432 对应的偏移量是 0x2190。</p>

<p><strong>注意</strong>： rafs v5 存储都有对齐，为 8 字节。由于在这里的测试中只有 3 个文件，所以存储需要 3 个 u32，但是由于存在 8 字节对齐的需求，这里 3 个 u32 是 12 个字节，所以需要补齐 4 个字节，所以我们看到 0x2000 那一行最后补齐的全零的 u32。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span><span class="p">(</span><span class="n">crate</span><span class="p">)</span> <span class="kr">const</span> <span class="n">RAFSV5_ALIGNMENT</span><span class="o">:</span> <span class="n">usize</span> <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Blob table</h3>

<p>从 0x2010 开始存储的是 blob table 内容。还是先来看看 blob table 的定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// rafs/src/metadata/layout/v5.rs</span>
</span><span class='line'><span class="cp">#[derive(Clone, Debug, Default)]</span>
</span><span class='line'><span class="k">pub</span> <span class="k">struct</span> <span class="n">RafsV5BlobTable</span> <span class="p">{</span>
</span><span class='line'>    <span class="c-Doc">/// Base blob information array.</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">entries</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">Arc</span><span class="o">&lt;</span><span class="n">BlobInfo</span><span class="o">&gt;&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="c-Doc">/// Extended blob information array.</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">extended</span><span class="o">:</span> <span class="n">RafsV5ExtBlobTable</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意，BlobInfo 结构是在 storage crate 中定义的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// storage/src/device.rs</span>
</span><span class='line'>
</span><span class='line'><span class="c-Doc">/// Configuration information for a metadata/data blob object.</span>
</span><span class='line'><span class="c-Doc">///</span>
</span><span class='line'><span class="c-Doc">/// The `BlobInfo` structure provides information for the storage subsystem to manage a blob file</span>
</span><span class='line'><span class="c-Doc">/// and serve blob IO requests for clients.</span>
</span><span class='line'><span class="cp">#[derive(Clone, Debug, Default)]</span>
</span><span class='line'><span class="k">pub</span> <span class="k">struct</span> <span class="n">BlobInfo</span> <span class="p">{</span>
</span><span class='line'>    <span class="c-Doc">/// The index of blob in RAFS blob table.</span>
</span><span class='line'>    <span class="n">blob_index</span><span class="o">:</span> <span class="kt">u32</span><span class="p">,</span>
</span><span class='line'>    <span class="c-Doc">/// A sha256 hex string generally.</span>
</span><span class='line'>    <span class="n">blob_id</span><span class="o">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c-Doc">/// 此处省略其余属性</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>前面我们已经看到，s_blob_table_offset 对应的值为 0x2010 ，s_blob_table_size 的值为 0x48 = 72 字节，也就是存储位置在 [2010 - 2058)，2058 也正是 s_extended_blob_table_offset 的值。这部分数据如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="mi">00002010</span><span class="o">:</span> <span class="mi">00000000</span> <span class="mi">00000000</span> <span class="mi">31343261</span> <span class="mi">65373762</span>  <span class="p">........</span><span class="n">a241b77e</span>
</span><span class='line'><span class="mi">00002020</span><span class="o">:</span> <span class="mi">38333362</span> <span class="mi">32373532</span> <span class="mi">63623763</span> <span class="mi">38336231</span>  <span class="n">b3382572c7bc1b38</span>
</span><span class='line'><span class="mi">00002030</span><span class="o">:</span> <span class="mi">38623561</span> <span class="mi">36393139</span> <span class="mi">36326366</span> <span class="mi">62343062</span>  <span class="n">a5b89196fc26b04b</span>
</span><span class='line'><span class="mi">00002040</span><span class="o">:</span> <span class="mi">37363666</span> <span class="mi">34313962</span> <span class="mi">63653062</span> <span class="mi">33313137</span>  <span class="n">f667b914b0ec7113</span>
</span><span class='line'><span class="mi">00002050</span><span class="o">:</span> <span class="mi">37343061</span> <span class="mi">32623835</span> <span class="mi">00000001</span> <span class="mi">00000000</span>  <span class="n">a04758b2</span><span class="p">........</span>
</span><span class='line'><span class="mi">00002050</span><span class="o">:</span> <span class="mi">37343061</span> <span class="mi">32623835</span>   <span class="mi">00000001</span> <span class="mi">00000000</span>  <span class="n">a04758b2</span><span class="p">........</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意上面 2050 这一行我又拷贝了一遍，并在 2058 前添加了 2 个空格来方便识别位置。</p>

<p>这里我们 blob 的 id 是 <code>a241b77eb3382572c7bc1b38a5b89196fc26b04bf667b914b0ec7113a04758b2</code>，可以和上面输出最右侧 ASCII 部分内容对照。</p>

<p>而且要注意的是上面的输出左右对照稍微不太直观，虽然列是从左到右，但是一列之中是从右到左的顺序。比如 <code>31343261</code> ，对应的内容实际是 <code>61323431</code>，即 <code>a241</code>。</p>

<p>虽然上面看到的 blob table 的定义很复杂、属性很多，但是我们的测试足够简单。RafsV5BlobTable 存储到磁盘后，最开始的内容就是 BlobInfo 结构体。</p>

<p>但是在 RafsV5BlobTable 的 store 方法（用于序列化到磁盘的 RafsStore trait 所需）中，我们可以看到，对于每一个 blob info 对象，都会在前面写两个 readahead 属性，这两个属性供占用 8 个字节，然后才是 blob id 。所以我们可以在上面 bootstrap 内容中，在 8 个自己的全零（默认值即是 0 ）后面，才是 blob id。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">w</span><span class="p">.</span><span class="n">write_all</span><span class="p">(</span><span class="o">&amp;</span><span class="kt">u32</span><span class="o">::</span><span class="n">to_le_bytes</span><span class="p">(</span><span class="n">entry</span><span class="p">.</span><span class="n">readahead_offset</span><span class="p">()</span> <span class="k">as</span> <span class="kt">u32</span><span class="p">))</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'><span class="n">w</span><span class="p">.</span><span class="n">write_all</span><span class="p">(</span><span class="o">&amp;</span><span class="kt">u32</span><span class="o">::</span><span class="n">to_le_bytes</span><span class="p">(</span><span class="n">entry</span><span class="p">.</span><span class="n">readahead_size</span><span class="p">()</span> <span class="k">as</span> <span class="kt">u32</span><span class="p">))</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'><span class="n">w</span><span class="p">.</span><span class="n">write_all</span><span class="p">(</span><span class="n">entry</span><span class="p">.</span><span class="n">blob_id</span><span class="p">().</span><span class="n">as_bytes</span><span class="p">())</span><span class="o">?</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>尽管 BlobInfo 对象属性很多，但是持久化到磁盘的内容却不多，主要就上面这 3 个，外加一些对齐的字节。</p>

<p>下面从 0x2058 开始是 RafsV5ExtBlobTable 的内容。其定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c-Doc">/// Rafs v5 on disk extended blob information table.</span>
</span><span class='line'><span class="cp">#[derive(Clone, Debug, Default)]</span>
</span><span class='line'><span class="k">pub</span> <span class="k">struct</span> <span class="n">RafsV5ExtBlobTable</span> <span class="p">{</span>
</span><span class='line'>    <span class="c-Doc">/// The vector index means blob index, every entry represents</span>
</span><span class='line'>    <span class="c-Doc">/// extended information of a blob.</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">entries</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">Arc</span><span class="o">&lt;</span><span class="n">RafsV5ExtBlobEntry</span><span class="o">&gt;&gt;</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c-Doc">/// Rafs v5 extended blob information on disk metadata.</span>
</span><span class='line'><span class="c-Doc">///</span>
</span><span class='line'><span class="c-Doc">/// RafsV5ExtDBlobEntry is appended to the tail of bootstrap,</span>
</span><span class='line'><span class="c-Doc">/// can be used as an extended table for the original blob table.</span>
</span><span class='line'><span class="c1">// This disk structure is well defined and rafs aligned.</span>
</span><span class='line'><span class="cp">#[repr(C)]</span>
</span><span class='line'><span class="cp">#[derive(Clone)]</span>
</span><span class='line'><span class="k">pub</span> <span class="k">struct</span> <span class="n">RafsV5ExtBlobEntry</span> <span class="p">{</span>
</span><span class='line'>    <span class="c-Doc">/// Number of chunks in a blob file.</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">chunk_count</span><span class="o">:</span> <span class="kt">u32</span><span class="p">,</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">reserved1</span><span class="o">:</span> <span class="p">[</span><span class="kt">u8</span><span class="p">;</span> <span class="mi">4</span><span class="p">],</span>     <span class="c1">//   --  8 Bytes</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">uncompressed_size</span><span class="o">:</span> <span class="kt">u64</span><span class="p">,</span> <span class="c1">// -- 16 Bytes</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">compressed_size</span><span class="o">:</span> <span class="kt">u64</span><span class="p">,</span>   <span class="c1">// -- 24 Bytes</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">reserved2</span><span class="o">:</span> <span class="p">[</span><span class="kt">u8</span><span class="p">;</span> <span class="n">RAFSV5_EXT_BLOB_RESERVED_SIZE</span><span class="p">],</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中 <code>RAFSV5_EXT_BLOB_RESERVED_SIZE</code> 的值为 40。</p>

<p>对齐进行持久化的方法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">w</span><span class="p">.</span><span class="n">write_all</span><span class="p">(</span><span class="o">&amp;</span><span class="kt">u32</span><span class="o">::</span><span class="n">to_le_bytes</span><span class="p">(</span><span class="n">entry</span><span class="p">.</span><span class="n">chunk_count</span><span class="p">))</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'><span class="n">w</span><span class="p">.</span><span class="n">write_all</span><span class="p">(</span><span class="o">&amp;</span><span class="n">entry</span><span class="p">.</span><span class="n">reserved1</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'><span class="n">w</span><span class="p">.</span><span class="n">write_all</span><span class="p">(</span><span class="o">&amp;</span><span class="kt">u64</span><span class="o">::</span><span class="n">to_le_bytes</span><span class="p">(</span><span class="n">entry</span><span class="p">.</span><span class="n">uncompressed_size</span><span class="p">))</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'><span class="n">w</span><span class="p">.</span><span class="n">write_all</span><span class="p">(</span><span class="o">&amp;</span><span class="kt">u64</span><span class="o">::</span><span class="n">to_le_bytes</span><span class="p">(</span><span class="n">entry</span><span class="p">.</span><span class="n">compressed_size</span><span class="p">))</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'><span class="n">w</span><span class="p">.</span><span class="n">write_all</span><span class="p">(</span><span class="o">&amp;</span><span class="n">entry</span><span class="p">.</span><span class="n">reserved2</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>看完代码再来看一下存储的数据内容。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="mi">00002050</span><span class="o">:</span> <span class="mi">37343061</span> <span class="mi">32623835</span> <span class="mi">00000001</span> <span class="mi">00000000</span>  <span class="n">a04758b2</span><span class="p">........</span>
</span><span class='line'><span class="mi">00002060</span><span class="o">:</span> <span class="mi">00000040</span> <span class="mi">00000000</span> <span class="mi">00000035</span> <span class="mi">00000000</span>  <span class="o">@</span><span class="p">.......</span><span class="mf">5.</span><span class="p">......</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意 0x2058 是从上面第 9 个字节开始的，这里 chunk_count 的值为 0x00000001，即只有一个 chunk。然后 uncompressed_size 属性占用 8 个字节，在上面两行中实际是跨行了，包括第一行的后四个和第二行的前四个字节。其值为 0x40，即 64 字节。同理，compressed_size 的值为 0x35，即 53 字节。这也和我们在文件系统上看到的是一样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>-rw-r--r-- <span class="m">1</span> vagrant vagrant   <span class="m">53</span> Apr <span class="m">26</span> 06:55 a241b77eb3382572c7bc1b38a5b89196fc26b04bf667b914b0ec7113a04758b2
</span></code></pre></td></tr></table></div></figure>


<p>0x2060 行最后的 4 个字节为保留字节。</p>

<p>Blob table 之后写入是 inode 信息，这些信息是通过 RafsV5InodeWrapper 结构表示的。Inode 信息由 3 部分组成：</p>

<ul>
<li>Inode 结构体的数据</li>
<li>xattrs</li>
<li>Chunk info</li>
</ul>


<p>我们还是先来看看一些关键数据结构的定义。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// rafs/src/metadata/layout/v5.rs</span>
</span><span class='line'><span class="k">pub</span> <span class="k">struct</span> <span class="n">RafsV5InodeWrapper</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">name</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">&#39;a</span> <span class="n">OsStr</span><span class="p">,</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">symlink</span><span class="o">:</span> <span class="nb">Option</span><span class="o">&lt;&amp;</span><span class="n">&#39;a</span> <span class="n">OsStr</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">inode</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">&#39;a</span> <span class="n">RafsV5Inode</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 删除了该方法的一些内容，主要保留了核心写入到磁盘的数据</span>
</span><span class='line'><span class="k">impl</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="o">&gt;</span> <span class="n">RafsStore</span> <span class="k">for</span> <span class="n">RafsV5InodeWrapper</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">store</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span> <span class="n">w</span><span class="o">:</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">dyn</span> <span class="n">RafsIoWrite</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="n">usize</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">let</span> <span class="k">mut</span> <span class="n">size</span><span class="o">:</span> <span class="n">usize</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 1. 写入 RafsV5Inode 内容，128 字节</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">inode_data</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">inode</span><span class="p">.</span><span class="n">as_ref</span><span class="p">();</span>
</span><span class='line'>        <span class="n">w</span><span class="p">.</span><span class="n">write_all</span><span class="p">(</span><span class="n">inode_data</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 2. 写入文件名，可变长度</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">name</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">as_bytes</span><span class="p">();</span>
</span><span class='line'>        <span class="n">w</span><span class="p">.</span><span class="n">write_all</span><span class="p">(</span><span class="n">name</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">pub</span> <span class="k">struct</span> <span class="n">RafsV5Inode</span> <span class="p">{</span>
</span><span class='line'>    <span class="c-Doc">/// sha256(sha256(chunk) + ...), [char; RAFS_SHA256_LENGTH]</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">i_digest</span><span class="o">:</span> <span class="n">RafsDigest</span><span class="p">,</span> <span class="c1">// 32</span>
</span><span class='line'>    <span class="c-Doc">/// parent inode number</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">i_parent</span><span class="o">:</span> <span class="kt">u64</span><span class="p">,</span>
</span><span class='line'>    <span class="c-Doc">/// from fs stat()</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">i_ino</span><span class="o">:</span> <span class="kt">u64</span><span class="p">,</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">i_uid</span><span class="o">:</span> <span class="kt">u32</span><span class="p">,</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">i_gid</span><span class="o">:</span> <span class="kt">u32</span><span class="p">,</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">i_projid</span><span class="o">:</span> <span class="kt">u32</span><span class="p">,</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">i_mode</span><span class="o">:</span> <span class="kt">u32</span><span class="p">,</span> <span class="c1">// 64</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">i_size</span><span class="o">:</span> <span class="kt">u64</span><span class="p">,</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">i_blocks</span><span class="o">:</span> <span class="kt">u64</span><span class="p">,</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">i_flags</span><span class="o">:</span> <span class="n">RafsV5InodeFlags</span><span class="p">,</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">i_nlink</span><span class="o">:</span> <span class="kt">u32</span><span class="p">,</span>
</span><span class='line'>    <span class="c-Doc">/// for dir, child start index</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">i_child_index</span><span class="o">:</span> <span class="kt">u32</span><span class="p">,</span> <span class="c1">// 96</span>
</span><span class='line'>    <span class="c-Doc">/// for dir, means child count.</span>
</span><span class='line'>    <span class="c-Doc">/// for regular file, means chunk info count.</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">i_child_count</span><span class="o">:</span> <span class="kt">u32</span><span class="p">,</span>
</span><span class='line'>    <span class="c-Doc">/// file name size, [char; i_name_size]</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">i_name_size</span><span class="o">:</span> <span class="kt">u16</span><span class="p">,</span>
</span><span class='line'>    <span class="c-Doc">/// symlink path size, [char; i_symlink_size]</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">i_symlink_size</span><span class="o">:</span> <span class="kt">u16</span><span class="p">,</span> <span class="c1">// 104</span>
</span><span class='line'>    <span class="c1">// inode device block number, ignored for non-special files</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">i_rdev</span><span class="o">:</span> <span class="kt">u32</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">// for alignment reason, we put nsec first</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">i_mtime_nsec</span><span class="o">:</span> <span class="kt">u32</span><span class="p">,</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">i_mtime</span><span class="o">:</span> <span class="kt">u64</span><span class="p">,</span>        <span class="c1">// 120</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">i_reserved</span><span class="o">:</span> <span class="p">[</span><span class="kt">u8</span><span class="p">;</span> <span class="mi">8</span><span class="p">],</span> <span class="c1">// 128</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们继续对照 dump 出来的 bootstrap 数据来看一下写入的具体内容。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="mi">00002070</span><span class="o">:</span> <span class="mi">00000000</span> <span class="mi">00000000</span> <span class="mi">00000000</span> <span class="mi">00000000</span>  <span class="p">................</span>
</span><span class='line'><span class="mi">00002080</span><span class="o">:</span> <span class="mi">00000000</span> <span class="mi">00000000</span> <span class="mi">00000000</span> <span class="mi">00000000</span>  <span class="p">................</span>
</span><span class='line'><span class="mi">00002090</span><span class="o">:</span> <span class="mi">00000000</span> <span class="mi">00000000</span> <span class="n">afbe1b2a</span> <span class="mi">8</span><span class="n">b68b09e</span>  <span class="p">........</span><span class="o">*</span><span class="p">.....</span><span class="n">h</span><span class="p">.</span>
</span><span class='line'><span class="mi">000020</span><span class="n">a0</span><span class="o">:</span> <span class="n">ac7a3553</span> <span class="n">ec9df26a</span> <span class="mi">5</span><span class="n">d07bafa</span> <span class="mi">02097</span><span class="n">de0</span>  <span class="n">S5z</span><span class="p">.</span><span class="n">j</span><span class="p">......].}..</span>
</span><span class='line'><span class="mi">000020</span><span class="n">b0</span><span class="o">:</span> <span class="mi">4</span><span class="n">c85264b</span> <span class="mi">5749</span><span class="n">c4a7</span> <span class="mi">00000000</span> <span class="mi">00000000</span>  <span class="n">K</span><span class="o">&amp;</span><span class="p">.</span><span class="n">L</span><span class="p">..</span><span class="n">IW</span><span class="p">........</span>
</span><span class='line'><span class="mi">000020</span><span class="n">c0</span><span class="o">:</span> <span class="mi">00000001</span> <span class="mi">00000000</span> <span class="mf">000003e8</span> <span class="mf">000003e8</span>  <span class="p">................</span>
</span><span class='line'><span class="mi">000020</span><span class="n">d0</span><span class="o">:</span> <span class="mi">00000000</span> <span class="mi">000041</span><span class="n">ed</span> <span class="mi">00000080</span> <span class="mi">00000000</span>  <span class="p">.....</span><span class="n">A</span><span class="p">..........</span>
</span><span class='line'><span class="mf">000020e0</span><span class="o">:</span> <span class="mi">00000001</span> <span class="mi">00000000</span> <span class="mi">00000000</span> <span class="mi">00000000</span>  <span class="p">................</span>
</span><span class='line'><span class="mi">000020</span><span class="k">f</span><span class="mi">0</span><span class="o">:</span> <span class="mi">00000002</span> <span class="mi">00000002</span> <span class="mi">00000002</span> <span class="mi">00000001</span>  <span class="p">................</span>
</span><span class='line'><span class="mi">00002100</span><span class="o">:</span> <span class="mi">00000000</span> <span class="mi">00000000</span> <span class="mi">00000000</span> <span class="mi">00000000</span>  <span class="p">................</span>
</span><span class='line'><span class="mi">00002110</span><span class="o">:</span> <span class="mi">00000000</span> <span class="mi">00000000</span> <span class="mi">0000002</span><span class="k">f</span> <span class="mi">00000000</span>  <span class="p">........</span><span class="o">/</span><span class="p">.......</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先我们肉眼可见的 128 长度的 sha256 摘要，所以很容易定位到 RafsV5Inode 结构的内容。之后的 8 字节表示 parent inode，这里为 0。</p>

<p>然后到着看找到 2110 行的 <code>2f</code>，这就是 ASCII 的 / ，也就是根目录。再倒着往回数 26 个字节，到了 i_name_size 属性，这里值为 1，即 <code>/</code> 长度为 1，再往上一个属性，即 i_child_count ，这里值为 2。其余属性这里就不再详细介绍。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="mi">00002120</span><span class="o">:</span> <span class="n">b94913af</span> <span class="n">a6a1f9f5</span> <span class="n">ea4d40a0</span> <span class="mi">49</span><span class="n">c9dc36</span>  <span class="p">..</span><span class="n">I</span><span class="p">......</span><span class="o">@</span><span class="n">M</span><span class="p">.</span><span class="mf">6.</span><span class="p">.</span><span class="n">I</span>
</span><span class='line'><span class="mi">00002130</span><span class="o">:</span> <span class="n">c925cb9b</span> <span class="n">b712c1ad</span> <span class="n">ca939acc</span> <span class="mi">62321</span><span class="k">f</span><span class="n">e4</span>  <span class="p">..</span><span class="o">%</span><span class="p">...........</span><span class="mi">2</span><span class="n">b</span>
</span><span class='line'><span class="mi">00002140</span><span class="o">:</span> <span class="mi">00000001</span> <span class="mi">00000000</span> <span class="mi">00000002</span> <span class="mi">00000000</span>  <span class="p">................</span>
</span><span class='line'><span class="mi">00002150</span><span class="o">:</span> <span class="mf">000003e8</span> <span class="mf">000003e8</span> <span class="mi">00000000</span> <span class="mi">000081</span><span class="n">a4</span>  <span class="p">................</span>
</span><span class='line'><span class="mi">00002160</span><span class="o">:</span> <span class="mi">00000000</span> <span class="mi">00000000</span> <span class="mi">00000000</span> <span class="mi">00000000</span>  <span class="p">................</span>
</span><span class='line'><span class="mi">00002170</span><span class="o">:</span> <span class="mi">00000000</span> <span class="mi">00000000</span> <span class="mi">00000001</span> <span class="mi">00000000</span>  <span class="p">................</span>
</span><span class='line'><span class="mi">00002180</span><span class="o">:</span> <span class="mi">00000000</span> <span class="mi">00000003</span> <span class="mi">00000000</span> <span class="mi">00000000</span>  <span class="p">................</span>
</span><span class='line'><span class="mi">00002190</span><span class="o">:</span> <span class="mi">626767</span><span class="n">b2</span> <span class="mi">00000000</span> <span class="mi">00000000</span> <span class="mi">00000000</span>  <span class="p">.</span><span class="n">ggb</span><span class="p">............</span>
</span><span class='line'><span class="mi">000021</span><span class="n">a0</span><span class="o">:</span> <span class="mi">00616161</span> <span class="mi">00000000</span> <span class="n">b232f6e2</span> <span class="n">e21610c0</span>  <span class="n">aaa</span><span class="p">.......</span><span class="mf">2.</span><span class="p">....</span>
</span></code></pre></td></tr></table></div></figure>


<p>同样下一个文件名为 <code>aaa</code>，也可以从 <code>00616161</code> 看到。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="mi">000021</span><span class="n">a0</span><span class="o">:</span> <span class="mi">00616161</span> <span class="mi">00000000</span> <span class="n">b232f6e2</span> <span class="n">e21610c0</span>  <span class="n">aaa</span><span class="p">.......</span><span class="mf">2.</span><span class="p">....</span>
</span><span class='line'><span class="mi">000021</span><span class="n">b0</span><span class="o">:</span> <span class="n">efe31e11</span> <span class="mi">2532</span><span class="n">c9d6</span> <span class="mi">2</span><span class="k">f</span><span class="mf">8e943</span><span class="n">d</span> <span class="n">e7082bfe</span>  <span class="p">......</span><span class="mi">2</span><span class="o">%=</span><span class="p">..</span><span class="o">/</span><span class="p">.</span><span class="o">+</span><span class="p">..</span>
</span><span class='line'><span class="mi">000021</span><span class="n">c0</span><span class="o">:</span> <span class="mi">81</span><span class="n">da0118</span> <span class="n">d1192211</span> <span class="mi">00000001</span> <span class="mi">00000000</span>  <span class="p">.....</span><span class="s">&quot;..........</span>
</span><span class='line'><span class="s">000021d0: 00000003 00000000 000003e8 000003e8  ................</span>
</span><span class='line'><span class="s">000021e0: 00000000 000081a4 00000040 00000000  ........@.......</span>
</span><span class='line'><span class="s">000021f0: 00000001 00000000 00000000 00000000  ................</span>
</span><span class='line'><span class="s">00002200: 00000001 00000000 00000001 00000003  ................</span>
</span><span class='line'><span class="s">00002210: 00000000 00000000 62679767 00000000  ........g.gb....</span>
</span><span class='line'><span class="s">00002220: 00000000 00000000 00626262 00000000  ........bbb.....</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后是最后一个文件 <code>bbb</code>，也可以从 <code>00626262</code> 看到。它的父文件夹为 1，文件大小为 0x40，这里应该是压缩后的文件大小了。</p>

<p>最后是 chunk 信息。我们来看看它的结构：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// rafs/src/metadata/layout/v5.rs</span>
</span><span class='line'><span class="k">pub</span> <span class="k">struct</span> <span class="n">RafsV5ChunkInfo</span> <span class="p">{</span>
</span><span class='line'>    <span class="c-Doc">/// sha256(chunk), [char; RAFS_SHA256_LENGTH]</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">block_id</span><span class="o">:</span> <span class="n">RafsDigest</span><span class="p">,</span> <span class="c1">// 32</span>
</span><span class='line'>    <span class="c-Doc">/// blob index.</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">blob_index</span><span class="o">:</span> <span class="kt">u32</span><span class="p">,</span>
</span><span class='line'>    <span class="c-Doc">/// chunk flags</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">flags</span><span class="o">:</span> <span class="n">BlobChunkFlags</span><span class="p">,</span> <span class="c1">// 40</span>
</span><span class='line'>    <span class="c-Doc">/// compressed size in blob</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">compress_size</span><span class="o">:</span> <span class="kt">u32</span><span class="p">,</span>
</span><span class='line'>    <span class="c-Doc">/// uncompressed size in blob</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">uncompress_size</span><span class="o">:</span> <span class="kt">u32</span><span class="p">,</span> <span class="c1">// 48</span>
</span><span class='line'>    <span class="c-Doc">/// compressed offset in blob</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">compress_offset</span><span class="o">:</span> <span class="kt">u64</span><span class="p">,</span> <span class="c1">// 56</span>
</span><span class='line'>    <span class="c-Doc">/// uncompressed offset in blob</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">uncompress_offset</span><span class="o">:</span> <span class="kt">u64</span><span class="p">,</span> <span class="c1">// 64</span>
</span><span class='line'>    <span class="c-Doc">/// offset in file</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">file_offset</span><span class="o">:</span> <span class="kt">u64</span><span class="p">,</span> <span class="c1">// 72</span>
</span><span class='line'>    <span class="c-Doc">/// chunk index, it&#39;s allocated sequentially and starting from 0 for one blob.</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">index</span><span class="o">:</span> <span class="kt">u32</span><span class="p">,</span>
</span><span class='line'>    <span class="c-Doc">/// reserved</span>
</span><span class='line'>    <span class="k">pub</span> <span class="n">reserved</span><span class="o">:</span> <span class="kt">u32</span><span class="p">,</span> <span class="c1">//80</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看出，它的长度是 80 个字节，对应文件的最后这部分：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="mi">00002230</span><span class="o">:</span> <span class="n">ec5944de</span> <span class="mi">690964</span><span class="n">ef</span> <span class="mi">8274</span><span class="k">f</span><span class="mi">1</span><span class="n">bf</span> <span class="mi">7</span><span class="n">cf30f7c</span>  <span class="p">.</span><span class="n">DY</span><span class="p">..</span><span class="n">d</span><span class="p">.</span><span class="n">i</span><span class="p">..</span><span class="n">t</span><span class="p">.</span><span class="o">|</span><span class="p">..</span><span class="o">|</span>
</span><span class='line'><span class="mi">00002240</span><span class="o">:</span> <span class="mi">62</span><span class="k">f</span><span class="n">c5b93</span> <span class="n">d8d8c7a0</span> <span class="mi">3272</span><span class="k">f</span><span class="mi">74</span><span class="n">b</span> <span class="n">b91db007</span>  <span class="p">.[.</span><span class="n">b</span><span class="p">....</span><span class="n">K</span><span class="p">.</span><span class="n">r2</span><span class="p">....</span>
</span><span class='line'><span class="mi">00002250</span><span class="o">:</span> <span class="mi">00000000</span> <span class="mi">00000001</span> <span class="mi">00000035</span> <span class="mi">00000040</span>  <span class="p">........</span><span class="mf">5.</span><span class="p">..</span><span class="o">@</span><span class="p">...</span>
</span><span class='line'><span class="mi">00002260</span><span class="o">:</span> <span class="mi">00000000</span> <span class="mi">00000000</span> <span class="mi">00000000</span> <span class="mi">00000000</span>  <span class="p">................</span>
</span><span class='line'><span class="mi">00002270</span><span class="o">:</span> <span class="mi">00000000</span> <span class="mi">00000000</span> <span class="mi">00000000</span> <span class="mi">00000000</span>  <span class="p">................</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面只是简单分析了下 bootstrap 文件的内容，至于 blob 数据文件，则留待以后有时间再看了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于 Rust 字符串字面值的一些总结]]></title>
    <link href="http://liubin.org/blog/2022/04/01/rust-string-literals/"/>
    <updated>2022-04-01T21:15:43+08:00</updated>
    <id>http://liubin.org/blog/2022/04/01/rust-string-literals</id>
    <content type="html"><![CDATA[<p>Rust 中有两种字符串，String 和 &amp;str，其中 String 可动态分配、修改，内部实现可以理解为 <code>Vec&lt;u8&gt;</code>，而 <code>&amp;str</code> 是一个类型为 <code>&amp;[u8]</code> 的切片。这两种字符串都只能保存合法的 UTF-8 字符。</p>

<p>而对于非肉眼可辨识的 UTF-8 字符，则可以考虑使用如下类型：</p>

<ul>
<li>文件路径有专用的 Path 和 PathBuf 类可用。</li>
<li>使用 <code>Vec&lt;u8&gt;</code> 和 <code>&amp;[u8]</code></li>
<li>使用 <code>OSString</code> 和 <code>&amp;OSStr</code> 和操作系统交互</li>
<li>使用 <code>CString</code> 和 <code>&amp;CStr</code> 和 C 库交互</li>
</ul>


<p>上面的第二种方法，就是常用的处理非 UTF-8 字节流的方式，也就是使用 <code>Vec&lt;u8&gt;</code> 和 <code>&amp;[u8]</code> ，其中我们也可以使用字面值来处理这两种类型的数据，我们称之为字节字符串字面值（byte string literals），其类型为 <code>&amp;[u8]</code>。</p>

<h2>字符串字面值（String literals）</h2>

<p>先来看一下字符串字面值。</p>

<p>和其他语言一样，用双引号括起来就是一个字符串，不过 Rust 的一个特点是字符串可以跨行，即中间有回车也不会引起编译或运行错误，在输出的时候也会带着里面的换行符。</p>

<p>同样，字符串字面值里面支持转义，比如想在里面使用双引号，该转义也会对换行符进行转义，比如下面这样，在换行符前面使用 <code>\</code> ，则该转义符、换行符以及下一行开头的所有空格都将会被忽略：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">a</span> <span class="o">=</span> <span class="s">&quot;foobar&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">let</span> <span class="n">b</span> <span class="o">=</span> <span class="s">&quot;foo\</span>
</span><span class='line'><span class="s">         bar&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>字符串字面值除了支持常见的 <code>\</code> 对字节（字符）进行转义，还支持对 Unicode 进行转义：</p>

<ul>
<li><code>\xHH</code>： + 2位的十六进制7位宽度字节码，这相当于等值的 ASCII 字符。</li>
<li><code>\u{xxxx}</code>：24位长的16进制，表示等值的 Unicode 字符。</li>
<li><code>\n</code>/<code>\r</code>/<code>\t</code> 表示 U+000A (LF), U+000D (CR) 和 U+0009 (HT)</li>
<li><code>\\</code> 用来对 <code>\</code> 本身进行转义</li>
<li><code>\0</code> 表示 Unicode U+0000 (NUL)</li>
</ul>


<p>Raw 类型的字符串字面值表示进行转义，也就是说字面值写的是什么内容，字符串的值就是什么。这种类型的字面值使用 <code>r</code> 以及若干 <code>#</code> 开头进行定义，结尾需要相等数量的 <code>#</code>。</p>

<p>如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="s">&quot;foo&quot;</span><span class="p">;</span> <span class="s-Raw">r&quot;foo&quot;</span><span class="p">;</span>                     <span class="c1">// foo</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">foo</span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">;</span> <span class="s-Raw">r#&quot;&quot;foo&quot;&quot;#</span><span class="p">;</span>             <span class="c1">// &quot;foo&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&quot;foo #</span><span class="se">\&quot;</span><span class="s"># bar&quot;</span><span class="p">;</span>
</span><span class='line'><span class="s-Raw">r##&quot;foo #&quot;# bar&quot;##</span><span class="p">;</span>                <span class="c1">// foo #&quot;# bar</span>
</span><span class='line'>
</span><span class='line'><span class="s">&quot;</span><span class="se">\x52</span><span class="s">&quot;</span><span class="p">;</span> <span class="s">&quot;R&quot;</span><span class="p">;</span> <span class="s-Raw">r&quot;R&quot;</span><span class="p">;</span>                 <span class="c1">// R</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\\</span><span class="s">x52&quot;</span><span class="p">;</span> <span class="s-Raw">r&quot;\x52&quot;</span><span class="p">;</span>                  <span class="c1">// \x52</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果字符串中有双引号怎么办？因为 raw string 里不能使用转义，所以 <code>\"</code> 是肯定不行的。Rust 实际支持使用 <code>r#</code> 的方式来指定字符串边界。这个 <code>#</code> 就是转义的另一种实现方式，比如字符串里面有 4 个 <code>#</code>，那么该字符串可以用 <code>r#####"abc####def"#####</code> 来包围起来，也就是比里面的 <code>#</code> 多即可。</p>

<h2>Byte string literals</h2>

<p>Byte string 字面值使用 <code>b"..."</code> 以及衍生语法定义，其类型为 <code>&amp;[u8]</code>，这个和 <code>&amp;str</code> 是完全不一样的类型，所以有些在 <code>&amp;str</code> 上能用的方法，在 <code>&amp;[u8]</code> 上是用不了的。</p>

<p>比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// &amp;[u8; 5]: [119, 111, 114, 108, 100]!</span>
</span><span class='line'><span class="kd">let</span> <span class="n">world</span> <span class="o">=</span> <span class="n">b</span><span class="s">&quot;world&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;Hello, {}!&quot;</span><span class="p">,</span> <span class="n">world</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>编译会报错，因为 <code>&amp;[u8]</code> 没有实现 <code>std::fmt::Display</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="mi">29</span> <span class="o">|</span>     <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;Hello, {}!&quot;</span><span class="p">,</span> <span class="n">world</span><span class="p">);</span>
</span><span class='line'>   <span class="o">|</span>                            <span class="o">^^^^^</span> <span class="err">`</span><span class="p">[</span><span class="kt">u8</span><span class="p">;</span> <span class="mi">5</span><span class="p">]</span><span class="err">`</span> <span class="n">cannot</span> <span class="kr">be</span> <span class="n">formatted</span> <span class="n">with</span> <span class="n">the</span> <span class="n">default</span> <span class="n">formatter</span>
</span><span class='line'>   <span class="o">|</span>
</span><span class='line'>
</span><span class='line'>   <span class="o">=</span> <span class="n">help</span><span class="o">:</span> <span class="n">the</span> <span class="k">trait</span> <span class="err">`</span><span class="n">std</span><span class="o">::</span><span class="n">fmt</span><span class="o">::</span><span class="n">Display</span><span class="err">`</span> <span class="n">is</span> <span class="n">not</span> <span class="n">implemented</span> <span class="k">for</span> <span class="err">`</span><span class="p">[</span><span class="kt">u8</span><span class="p">;</span> <span class="mi">5</span><span class="p">]</span><span class="err">`</span>
</span><span class='line'>   <span class="o">=</span> <span class="n">note</span><span class="o">:</span> <span class="k">in</span> <span class="n">format</span> <span class="n">strings</span> <span class="n">you</span> <span class="n">may</span> <span class="kr">be</span> <span class="n">able</span> <span class="n">to</span> <span class="kn">use</span> <span class="err">`</span><span class="p">{</span><span class="o">:?</span><span class="p">}</span><span class="err">`</span> <span class="p">(</span><span class="n">or</span> <span class="p">{</span><span class="o">:</span><span class="err">#</span><span class="o">?</span><span class="p">}</span> <span class="k">for</span> <span class="n">pretty</span><span class="o">-</span><span class="nb">print</span><span class="p">)</span> <span class="n">instead</span>
</span><span class='line'>   <span class="o">=</span> <span class="n">note</span><span class="o">:</span> <span class="n">this</span> <span class="n">error</span> <span class="n">originates</span> <span class="k">in</span> <span class="n">the</span> <span class="n">macro</span> <span class="err">`$</span><span class="n">crate</span><span class="o">::</span><span class="n">format_args_nl</span><span class="err">`</span> <span class="p">(</span><span class="k">in</span> <span class="n">Nightly</span> <span class="n">builds</span><span class="p">,</span> <span class="n">run</span> <span class="n">with</span> <span class="o">-</span><span class="n">Z</span> <span class="n">macro</span><span class="o">-</span><span class="n">backtrace</span> <span class="k">for</span> <span class="n">more</span> <span class="n">info</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Byte string 字面值也支持转义，但是需要注意它只支持字节转义，不支持 Unicode 转义。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// 支持字符转义，输出：Hello, Rust!</span>
</span><span class='line'><span class="kd">let</span> <span class="n">escaped</span> <span class="o">=</span> <span class="n">b</span><span class="s">&quot;</span><span class="se">\x52\x75\x73\x74</span><span class="s"> as bytes&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 不支持 Unicode 转义，编译错误：</span>
</span><span class='line'><span class="c1">// = help: unicode escape sequences cannot be used as a byte or in a byte string</span>
</span><span class='line'><span class="kd">let</span> <span class="n">escaped</span> <span class="o">=</span> <span class="n">b</span><span class="s">&quot;\u{211D} is not allowed&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// Raw byte strings work just like raw strings</span>
</span><span class='line'><span class="kd">let</span> <span class="n">raw_bytestring</span> <span class="o">=</span> <span class="n">br</span><span class="s">&quot;\u{211D} is not escaped here&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{:?}&quot;</span><span class="p">,</span> <span class="n">raw_bytestring</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Converting a byte array to `str` can fail</span>
</span><span class='line'><span class="k">if</span> <span class="kd">let</span> <span class="nb">Ok</span><span class="p">(</span><span class="n">my_str</span><span class="p">)</span> <span class="o">=</span> <span class="kt">str</span><span class="o">::</span><span class="n">from_utf8</span><span class="p">(</span><span class="n">raw_bytestring</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;And the same as text: &#39;{}&#39;&quot;</span><span class="p">,</span> <span class="n">my_str</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>字节字符串也支持 raw 定义，和标准字符串类型类似，使用 <code>r</code> 前缀定义 raw byte string 字面值变量。</p>

<p>例如下面的例子中普通的字节字符串需要转义，raw 字节字符串就不需要使用 <code>\</code> 进行转义了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">b</span><span class="s">&quot;foo&quot;</span><span class="p">;</span> <span class="n">br</span><span class="s">&quot;foo&quot;</span><span class="p">;</span>                     <span class="c1">// foo</span>
</span><span class='line'><span class="n">b</span><span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">foo</span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">;</span> <span class="n">br</span><span class="err">#</span><span class="s">&quot;&quot;</span><span class="n">foo</span><span class="s">&quot;&quot;</span><span class="err">#</span><span class="p">;</span>             <span class="c1">// &quot;foo&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">b</span><span class="s">&quot;foo #</span><span class="se">\&quot;</span><span class="s"># bar&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">br</span><span class="err">##</span><span class="s">&quot;foo #&quot;</span><span class="err">#</span> <span class="n">bar</span><span class="s">&quot;##;                 // foo #&quot;</span><span class="err">#</span> <span class="n">bar</span>
</span><span class='line'>
</span><span class='line'><span class="n">b</span><span class="s">&quot;</span><span class="se">\x52</span><span class="s">&quot;</span><span class="p">;</span> <span class="n">b</span><span class="s">&quot;R&quot;</span><span class="p">;</span> <span class="n">br</span><span class="s">&quot;R&quot;</span><span class="p">;</span>                <span class="c1">// R</span>
</span><span class='line'><span class="n">b</span><span class="s">&quot;</span><span class="se">\\</span><span class="s">x52&quot;</span><span class="p">;</span> <span class="n">br</span><span class="s">&quot;</span><span class="se">\x52</span><span class="s">&quot;</span><span class="p">;</span>                  <span class="c1">// \x52</span>
</span></code></pre></td></tr></table></div></figure>


<h2>总结</h2>

<p>下面是刚才介绍的这几种字符串字面值定义的一个总结，列出了不同的定义方式和其含义。</p>

<table>
<thead>
<tr>
<th>符合 </th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>&ldquo;&hellip;&rdquo;  </td>
<td>字符串字面值</td>
</tr>
<tr>
<td>r"&hellip;&ldquo;, r#&rdquo;&hellip;&ldquo;#, r##&rdquo;&hellip;&ldquo;##, etc. </td>
<td>Raw 字符串字面值，禁止转义</td>
</tr>
<tr>
<td>b"&hellip;&ldquo; </td>
<td>字节字符串字面值，类型为 <code>&amp;[u8]</code></td>
</tr>
<tr>
<td>br"&hellip;&ldquo;, br#&rdquo;&hellip;&ldquo;#, br##&rdquo;&hellip;&ldquo;##, etc.  </td>
<td>Raw 字节字符串字面值</td>
</tr>
<tr>
<td>&lsquo;&hellip;&rsquo;  </td>
<td>字符字面值</td>
</tr>
<tr>
<td>b'&hellip;&lsquo; </td>
<td>ASCII字节字面值</td>
</tr>
</tbody>
</table>


<h2>参考资料</h2>

<ul>
<li><a href="https://doc.rust-lang.org/reference/tokens.html#character-and-string-literals">Rust reference: Character and string literals</a></li>
<li><a href="https://doc.rust-lang.org/rust-by-example/std/str.html">Rust By Example: Strings</a></li>
<li><a href="https://doc.rust-lang.org/book/appendix-02-operators.html#non-operator-symbols">TRPL: Non-operator Symbols</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[创建支持 SAN 扩展的 x509 证书]]></title>
    <link href="http://liubin.org/blog/2022/03/25/create-san-cert/"/>
    <updated>2022-03-25T10:53:22+08:00</updated>
    <id>http://liubin.org/blog/2022/03/25/create-san-cert</id>
    <content type="html"><![CDATA[<p>测试一个 webhook，最简单的方式就是在 host 上启动 webhook 进程，然后创建一个 webhook 配置只是使用 <code>url</code> 来设置 <code>clientConfig</code>，但是现在 <code>url</code> 只支持 <code>https</code> 了，不得已还得自建证书。</p>

<p>按之前方式部署后，发现通信失败：</p>

<blockquote><p>Error from server (InternalError): error when creating &ldquo;pod.yaml&rdquo;: Internal error occurred: failed calling webhook &ldquo;webhook.foo.dev&rdquo;: failed to call webhook: Post &ldquo;<a href="https://webhook.default.svc:443/mutate?timeout=10s">https://webhook.default.svc:443/mutate?timeout=10s</a>&rdquo;: x509: certificate relies on legacy Common Name field, use SANs instead</p></blockquote>

<p>总之 go 1.15 抛弃了传统的 CN 方式，需要使用 SAN 扩展。只需要在原来的命令加上相关选项即可。</p>

<p>修改前：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>openssl req -new -key ./webhookCA.key <span class="se">\</span>
</span><span class='line'>    -subj <span class="s2">&quot;/CN=${HOST}&quot;</span> <span class="se">\</span>
</span><span class='line'>    -out ./webhookCA.csr
</span></code></pre></td></tr></table></div></figure>


<p>修改后：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>openssl req -new -key ./webhookCA.key <span class="se">\</span>
</span><span class='line'>    -subj <span class="s2">&quot;/CN=${HOST}&quot;</span> <span class="se">\</span>
</span><span class='line'>    -out ./webhookCA.csr <span class="se">\</span>
</span><span class='line'>    -reqexts SAN <span class="se">\</span>
</span><span class='line'>    -config &lt;<span class="o">(</span>cat /etc/ssl/openssl.cnf <span class="se">\</span>
</span><span class='line'>        &lt;<span class="o">(</span><span class="nb">printf</span> <span class="s2">&quot;\n[SAN]\nsubjectAltName=DNS:$HOST&quot;</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后两行 <code>SAN</code> 即为添加的内容。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CNI 手工验证]]></title>
    <link href="http://liubin.org/blog/2021/12/31/first-cni/"/>
    <updated>2021-12-31T14:32:52+08:00</updated>
    <id>http://liubin.org/blog/2021/12/31/first-cni</id>
    <content type="html"><![CDATA[<p>用 K8s 的都不可能会不知道 CNI，但是可能大多数人，大多数时间我们关心的只是安装而已，将二进制放到 <code>/opt/cni/bin</code> ，在 <code>/etc/cni/net.d/</code> 下创建配置文件，剩下的就交给 K8s 或者 containerd 了，我们不关心也不了解其实现。</p>

<p>CNI 全称为 Container Network Interface，是用来定义容器网络的一个 <a href="https://github.com/containernetworking/cni/blob/master/SPEC.md">规范</a>。<a href="https://github.com/containernetworking/cni">containernetworking/cni</a> 是一个 CNCF 的 CNI 实现项目，包括基本额 bridge,macvlan等基本网络插件。</p>

<p>这里我们以此为例来简单了解下 CNI 是如何工作的。</p>

<h2>安装 CNI 插件</h2>

<p>我们采取自己下载编译的方式来安装 CNI 插件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> <span class="nv">$GOPATH</span>/src/github.com/containernetworking/plugins
</span><span class='line'><span class="nv">$ </span>./build_linux.sh
</span><span class='line'>ls bin/
</span><span class='line'>bandwidth  dhcp      flannel      host-local  loopback  portmap  sbr     tuning  vrf
</span><span class='line'>bridge     firewall  host-device  ipvlan      macvlan   ptp      static  vlan
</span></code></pre></td></tr></table></div></figure>


<p><code>bin/</code>下面的内容就是编译好的各 CNI 插件。我们也可以放到标准的 <code>/opt/cni/bin</code> 下面。</p>

<h2>配置文件</h2>

<p>我们的示例配置文件为 <code>/etc/cni/net.d/10-mynet.conf</code>，内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;cniVersion&quot;</span><span class="p">:</span> <span class="s2">&quot;0.4.0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;mynet&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;bridge&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;bridge&quot;</span><span class="p">:</span> <span class="s2">&quot;cni0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;isGateway&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;ipMasq&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;ipam&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;host-local&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;subnet&quot;</span><span class="p">:</span> <span class="s2">&quot;172.19.0.0/24&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;routes&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span> <span class="nt">&quot;dst&quot;</span><span class="p">:</span> <span class="s2">&quot;0.0.0.0/0&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>不难看出，我们的网络名为 mynet，网络类型为 bridge，这个 bridge 既是网络类型名称，也是网络插件可执行文件的名称。ipam 这里使用了 host-local ，也在上面我们编译后的 bin/ 目录下能找到。</p>

<h2>CNI 插件调用规则</h2>

<p>CNI 插件都是直接通过 exec 的方式调用，而不是通过 socket 这样 C/S 方式，所有参数都是通过环境变量、标准输入输出来实现的，具体来说调用规则如下：</p>

<ul>
<li>输入：

<ul>
<li>运行参数：环境变量</li>
<li>网络配置：stdin</li>
</ul>
</li>
<li>输出：

<ul>
<li>正常退出： stdout</li>
<li>异常退出： stderr</li>
</ul>
</li>
</ul>


<h3>运行参数</h3>

<p>传递给 CNI 插件的参数都通过 CNI_ 开头的环境变量来实现。</p>

<ul>
<li><code>CNI_COMMAND</code>: 要执行的操作，包括 <code>ADD</code>, <code>DEL</code>, <code>CHECK</code>, 或 <code>VERSION</code>。</li>
<li><code>CNI_CONTAINERID</code>: 唯一的容器 ID。</li>
<li><code>CNI_NETNS</code>: 网络命名空间。</li>
<li><code>CNI_IFNAME</code>: 在容器内创建的网络接口名称。</li>
<li><code>CNI_ARGS</code>: 传递给插件本身的额外参数，以 &ldquo;FOO=BAR;ABC=123&rdquo; 的格式设置。</li>
<li><code>CNI_PATH</code>: 查找 CNI 插件的路径，格式如同 PATH 环境变量，即 Linux 使用 <code>:</code> 分割多个路径，Windows 使用 <code>;</code> 分割。</li>
</ul>


<h3>CNI operations</h3>

<p>CNI defines 4 operations: <code>ADD</code>, <code>DEL</code>, <code>CHECK</code>, and <code>VERSION</code>. These are passed to the plugin via the <code>CNI_COMMAND</code> environment variable.</p>

<h3>返回值</h3>

<p>按一般 Linux 程序惯例，成功返回 0 ，失败返回非 0，且错误消息为指定格式，示例如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;cniVersion&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;code&quot;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;msg&quot;</span><span class="p">:</span> <span class="s2">&quot;Invalid Configuration&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;details&quot;</span><span class="p">:</span> <span class="s2">&quot;Network 192.168.0.0/31 too small to allocate from.&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>示例</h2>

<p>这里我们来手工创建和删除一些网络接口，来看一下 CNI 是如何工作的。</p>

<h3>添加网络接口</h3>

<p>创建一个新的网络命名空间，这里我们以 <code>ctr-1</code> 为网络命名空间的名字。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ contid</span><span class="o">=</span>ctr-1
</span><span class='line'><span class="nv">$ netnspath</span><span class="o">=</span>/var/run/netns/<span class="nv">$contid</span>
</span><span class='line'><span class="nv">$ </span>ip netns add <span class="nv">$contid</span>
</span></code></pre></td></tr></table></div></figure>


<p>设置一些共通的环境变量，这样添加和删除网络设备的时候就不必再设置一遍了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">CNI_PATH</span><span class="o">=</span><span class="nv">$GOPATH</span>/src/github.com/containernetworking/plugins/bin
</span><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$CNI_PATH</span>:<span class="nv">$PATH</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">CNI_CONTAINERID</span><span class="o">=</span><span class="nv">$contid</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">CNI_NETNS</span><span class="o">=</span><span class="nv">$netnspath</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">CNI_IFNAME</span><span class="o">=</span>eth0
</span></code></pre></td></tr></table></div></figure>


<p>下面就可以在指定的命名空间中添加网络设备了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">CNI_COMMAND</span><span class="o">=</span>ADD
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>jq -r <span class="s1">&#39;.type&#39;</span> /etc/cni/net.d/10-mynet.conf
</span><span class='line'>bridge
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>bridge &lt; /etc/cni/net.d/10-mynet.conf
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;cniVersion&quot;</span>: <span class="s2">&quot;0.4.0&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;interfaces&quot;</span>: <span class="o">[</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;cni0&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;mac&quot;</span>: <span class="s2">&quot;e6:4b:0e:c8:52:d0&quot;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;vethb56e47e8&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;mac&quot;</span>: <span class="s2">&quot;de:aa:02:3b:58:a3&quot;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;eth0&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;mac&quot;</span>: <span class="s2">&quot;36:a4:28:8a:da:e0&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;sandbox&quot;</span>: <span class="s2">&quot;/var/run/netns/ctr-1&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">]</span>,
</span><span class='line'>    <span class="s2">&quot;ips&quot;</span>: <span class="o">[</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;version&quot;</span>: <span class="s2">&quot;4&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;interface&quot;</span>: 2,
</span><span class='line'>            <span class="s2">&quot;address&quot;</span>: <span class="s2">&quot;172.19.0.12/24&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;gateway&quot;</span>: <span class="s2">&quot;172.19.0.1&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">]</span>,
</span><span class='line'>    <span class="s2">&quot;routes&quot;</span>: <span class="o">[</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;dst&quot;</span>: <span class="s2">&quot;0.0.0.0/0&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">]</span>,
</span><span class='line'>    <span class="s2">&quot;dns&quot;</span>: <span class="o">{}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里我们的网络类型为 <code>bridge</code> ，所以调用的二进制文件也是 <code>bridge</code>。从 <code>bridge</code> 命令的标准输出，我们也可以看到新创建的接口信息，<code>bridge/host-local</code> 插件为其分配的 IP 地址是 <code>172.19.0.12</code>。</p>

<p>我们也像下面这样验证一下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ip netns <span class="nb">exec</span> <span class="nv">$contid</span> ip addr show
</span><span class='line'>1: lo: &lt;LOOPBACK&gt; mtu <span class="m">65536</span> qdisc noop state DOWN group default qlen 1000
</span><span class='line'>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
</span><span class='line'>2: eth0@if6: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="m">1500</span> qdisc noqueue state UP group default
</span><span class='line'>    link/ether 36:a4:28:8a:da:e0 brd ff:ff:ff:ff:ff:ff link-netnsid 0
</span><span class='line'>    inet 172.19.0.12/24 brd 172.19.0.255 scope global eth0
</span><span class='line'>       valid_lft forever preferred_lft forever
</span><span class='line'>    inet6 fe80::34a4:28ff:fe8a:dae0/64 scope link
</span><span class='line'>       valid_lft forever preferred_lft forever
</span></code></pre></td></tr></table></div></figure>


<h3>删除网络接口</h3>

<p>接着上面的操作，继续来看一下如何删除刚才创建的网络接口。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">CNI_COMMAND</span><span class="o">=</span>DEL
</span><span class='line'><span class="nv">$ </span>bridge &lt; /etc/cni/net.d/10-mynet.conf
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$?</span>
</span><span class='line'>0
</span></code></pre></td></tr></table></div></figure>


<p>删除成功的话，标准输出将不会有任何内容，我们可以从返回的状态码来判断是否成功。</p>

<p>再来验证一下指定的网络命名空间中该接口是否已经被成功删除：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ip netns <span class="nb">exec</span> <span class="nv">$contid</span> ip addr show
</span><span class='line'>1: lo: &lt;LOOPBACK&gt; mtu <span class="m">65536</span> qdisc noop state DOWN group default qlen 1000
</span><span class='line'>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
</span></code></pre></td></tr></table></div></figure>


<p>最后测试完了别忘了删除刚才创建的网络命名空间：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ip netns delete <span class="nv">$contid</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Array/Slice/Vector in Rust]]></title>
    <link href="http://liubin.org/blog/2021/11/19/rust-array-slice-vector/"/>
    <updated>2021-11-19T15:35:15+08:00</updated>
    <id>http://liubin.org/blog/2021/11/19/rust-array-slice-vector</id>
    <content type="html"><![CDATA[<p>不管哪种编程语言，最常用的数据类型不外乎数值、字符串以及数组。这里数组是一种泛称，一般指能存放多个元素的集合，当然这里的集合也不是严格的数学定义。</p>

<h2>Array</h2>

<p>先来看数组。</p>

<p>一个 array 是一组相同类型的数据集合，这些数据位于连续的内存块中，且保存在栈上而不是堆上。</p>

<p>以下都是数组的基本使用方式。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">];</span>
</span><span class='line'>    <span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">let</span> <span class="n">a</span><span class="o">:</span> <span class="p">[</span><span class="kt">i32</span><span class="p">;</span> <span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">];</span>
</span><span class='line'>    <span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="n">a</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">let</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">;</span> <span class="mi">4</span><span class="p">];</span>
</span><span class='line'>    <span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">let</span> <span class="k">mut</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span><span class='line'>    <span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">11</span><span class="p">;</span>
</span><span class='line'>    <span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>主要有 3 种方法创建数组：</p>

<ul>
<li><code>[V]</code>：直接使用元素值，不指定数组类型，比如 <code>let a = [1, 2, 3, 4]</code></li>
<li><code>[T; N]</code>：声明一个类型为 T 长度为 N 的数组，比如 <code>let a: [i32; 4]</code></li>
<li><code>[V; N]</code>：声明一个每个元素值为 V，长度为 N 的数组，比如 <code>let a: [0; 4]</code> 。当然数组的类型为 V 的类型 T。</li>
</ul>


<p>如果我们声明中使用了可变关键字 mut ，则表示该数组的元素值可以被修改：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="k">mut</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span><span class='line'><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">11</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rust 中数组最大的特点是大小不可变，这对于一些编程语言用户来说能难以理解，也就是说虽然我们能修改数组中某个元素的值，但是不能往里添加元素，或者删除元素。</p>

<p>总结一下就是数组在编译时分配大小，保存在栈上，数组长度不可变，虽然我们能改变数组中某个元素的值。</p>

<h2>Vector</h2>

<p>我们大多数情况下都希望“数组”元素的个数是可变的，这时候可以使用 Vector 类型。</p>

<p>Vector 的使用方式如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">v</span> <span class="o">=</span> <span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span><span class='line'>    <span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">v</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">let</span> <span class="n">v</span> <span class="o">=</span> <span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="mi">4</span><span class="p">;</span> <span class="mi">3</span><span class="p">];</span>
</span><span class='line'>    <span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="n">v</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">let</span> <span class="k">mut</span> <span class="n">v</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="kt">i32</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">Vec</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'>    <span class="n">v</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'>    <span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="n">v</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Vector 主要有两种初始化方式：</p>

<ul>
<li>使用 <code>vec!</code> 宏</li>
<li>使用 <code>Vec::new()</code> 方法</li>
</ul>


<p>Vector在内存中由三部分组成：
- 指向堆地址的指针，因为分配在堆上，所以才能动态修改大小
- 现有元素个数
- Vector 的容量（capacity），即一共可以保存多少个元素。</p>

<p>像其他语言一样， Rust 在创建 Vector 的时候，也可以预留一定数量的存储空间，以防止在元素增加时因元素移动、拷贝导致的开销。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="k">mut</span> <span class="n">v</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="kt">i32</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">Vec</span><span class="o">::</span><span class="n">with_capacity</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">v</span><span class="p">.</span><span class="n">len</span><span class="p">());</span>
</span><span class='line'><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">v</span><span class="p">.</span><span class="n">capacity</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="n">v</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">v</span><span class="p">.</span><span class="n">len</span><span class="p">());</span>
</span><span class='line'><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">v</span><span class="p">.</span><span class="n">capacity</span><span class="p">());</span>
</span><span class='line'><span class="n">v</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="n">v</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">v</span><span class="p">.</span><span class="n">len</span><span class="p">());</span>
</span><span class='line'><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">v</span><span class="p">.</span><span class="n">capacity</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="n">v</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="n">v</span><span class="p">.</span><span class="n">len</span><span class="p">());</span>
</span><span class='line'><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="n">v</span><span class="p">.</span><span class="n">capacity</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可以使用 <code>Vec::with_capacity()</code> 来预分配指定大小的存储空间，然后如果实际元素个数超过这个值时，Vector 的容量会扩展，我们看到当元素个数超过预分配的 3 之后，capacity 涨到了 6。</p>

<p>从上面我们也可以看到，Array 最大的一个限制是它的固定大小。与此相对，Vector 的特点是：</p>

<ul>
<li>分配在堆上</li>
<li>可以在运行时动态添加或删除元素</li>
</ul>


<h2>Slice</h2>

<p>我们再来看一下 Slice ，一般语言翻译为切片。Slice 一般是指向 Array 或 Vector 的位置，一般用 <code>&amp;[T]</code> 表示。</p>

<p>我们可以通过使用指向 Array 或 Vector 的 range 来创建 Slice 类型的变量。Slice 在使用的时候和 Array 非常像。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">v</span> <span class="o">=</span> <span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">let</span> <span class="n">sa</span><span class="o">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="kt">i32</span><span class="p">]</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">sv</span><span class="o">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="kt">i32</span><span class="p">]</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">v</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assert_eq</span><span class="o">!</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="n">sa</span><span class="p">);</span>
</span><span class='line'>    <span class="n">assert_eq</span><span class="o">!</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="n">sv</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">let</span> <span class="n">sa</span><span class="o">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="kt">i32</span><span class="p">]</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">[</span><span class="mf">1.</span><span class="p">.</span><span class="mi">3</span><span class="p">];</span>
</span><span class='line'>    <span class="n">assert_eq</span><span class="o">!</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="n">sa</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">let</span> <span class="n">sa</span><span class="o">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="kt">i32</span><span class="p">]</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">[</span><span class="mf">1.</span><span class="p">.</span><span class="o">=</span><span class="mi">3</span><span class="p">];</span>
</span><span class='line'>    <span class="n">assert_eq</span><span class="o">!</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="n">sa</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Slice 在实现上被称作 fat pointer。fat pointer 在内存中保存了两个值：
- Slice 指向的位置
- Slice 包含的元素数量</p>

<p>Rust 中，<code>&amp;[T]</code>、<code>&amp;mut [T]</code>,、<code>Box&lt;[T]&gt;</code> 等类型在内存中占有 16 个字节，其中前 8 个字节为指针位置，后 8 个字节为 Slice 包含的元素个数，即长度。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'> <span class="mi">0</span><span class="o">-</span><span class="mi">7</span> <span class="o">|</span> <span class="mi">8</span><span class="o">-</span><span class="mi">15</span>
</span><span class='line'><span class="o">-----|------</span>
</span><span class='line'> <span class="n">ptr</span> <span class="o">|</span> <span class="n">len</span>
</span></code></pre></td></tr></table></div></figure>


<p>而 <code>Vec&lt;T&gt;</code> 在内存中结构如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'> <span class="mi">0</span><span class="o">-</span><span class="mi">7</span> <span class="o">|</span> <span class="mi">8</span><span class="o">-</span><span class="mi">15</span> <span class="o">|</span> <span class="mi">16</span><span class="o">-</span><span class="mi">23</span>
</span><span class='line'><span class="o">-----|------|-------</span>
</span><span class='line'> <span class="n">ptr</span> <span class="o">|</span> <span class="n">cap</span>  <span class="o">|</span>  <span class="n">len</span>
</span></code></pre></td></tr></table></div></figure>


<p>在内存中 <code>Vec&lt;T&gt;</code> 占用 24 个字节，和 Slice 相比，多了 8 个字节的空间来存储 capacity 属性。</p>

<p>有了静态分配大小的 Array，以及可以动态增减元素的 Vector，为什么还有一个叫做 Slice 的东西呢？按照官方文档的说明，Slice是一个指向底层 Array 或 Vector 的视图，可以实现安全、高效的数据访问而不会发生内存拷贝。一般来说我们都不会直接创建 Slice ，而是从已有的 Array 或 Vector 创建 Slice。</p>

<p>Slice 虽然是一个视图（view），但是也可以通过 <code>&amp;mut [T]</code> 它来修改底层元素：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="k">mut</span> <span class="n">v</span> <span class="o">=</span> <span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span><span class='line'><span class="kd">let</span> <span class="n">sv</span><span class="o">:</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="p">[</span><span class="kt">i32</span><span class="p">]</span> <span class="o">=</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'><span class="n">sv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">9</span><span class="p">;</span>
</span><span class='line'><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="n">sv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>String and <code>&amp;str</code></h2>

<p>最后稍微来介绍一下 String 和 &amp;str 的关系，这有点像 Vector 和 Slice 的对应关系关系。在内存中，&amp;str也包括指向实际数据位置的指针和长度属性。</p>

<p>字符串 Slice 也可以看做是 8 bit 整数 Slice 重新定义的类型，两者的对应关系如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">Byte</span> <span class="n">slice</span> <span class="o">|</span> <span class="err">字符串</span> <span class="n">slice</span>
</span><span class='line'><span class="o">------------|-------------</span>
</span><span class='line'> <span class="o">&amp;</span><span class="p">[</span><span class="kt">u8</span><span class="p">]</span>      <span class="o">|</span> <span class="o">&amp;</span><span class="kt">str</span>
</span><span class='line'> <span class="n">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span>    <span class="o">|</span> <span class="n">String</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 Kata Containers 中使用 SPDK]]></title>
    <link href="http://liubin.org/blog/2021/11/18/spdk-with-ctr/"/>
    <updated>2021-11-18T09:15:52+08:00</updated>
    <id>http://liubin.org/blog/2021/11/18/spdk-with-ctr</id>
    <content type="html"><![CDATA[<p>关于如何在 Kata Containers 中使用 SPDK，官方有一个<a href="https://github.com/kata-containers/kata-containers/blob/main/docs/use-cases/using-SPDK-vhostuser-and-kata.md">使用说明</a>，只是之前是基于 Docker 的，由于 Kata Containers 已经不直接支持 Docker（或者说反过来 Docker 不支持 Kata Containers），所以原来的文档需要更新，比如使用 ctr 来演示如何在 Kata Containers 中使用 SPDK 设备。</p>

<p>趁这次更新文档的机会，顺便记录了一些中间的具体过程，但是全部放到 <a href="https://github.com/kata-containers/kata-containers/pull/3055">原文档</a> 中又有些冗余，所以在这里记录一下。</p>

<p>演示示例主要在于 ctr 需要自己准备 rootfs 和 OCI spec （<code>config.json</code>）文档，这里我直接给出了相关脚本，直接使用即可。</p>

<p>首先确保你已经按照官方 <a href="https://github.com/kata-containers/kata-containers/blob/main/docs/use-cases/using-SPDK-vhostuser-and-kata.md">使用说明</a> 准备好了 SPDK 设备。</p>

<h2>创建 rootfs</h2>

<p>使用这个脚本即可，这会使用一个 busybox 镜像作为 rootfs。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ctr i pull quay.io/prometheus/busybox:latest
</span><span class='line'>ctr i <span class="nb">export </span>rootfs.tar quay.io/prometheus/busybox:latest
</span><span class='line'>
</span><span class='line'><span class="nv">rootfs_tar</span><span class="o">=</span>rootfs.tar
</span><span class='line'><span class="nv">bundle_dir</span><span class="o">=</span><span class="s2">&quot;./bundle&quot;</span>
</span><span class='line'>mkdir -p <span class="s2">&quot;${bundle_dir}&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># extract busybox rootfs</span>
</span><span class='line'><span class="nv">rootfs_dir</span><span class="o">=</span><span class="s2">&quot;${bundle_dir}/rootfs&quot;</span>
</span><span class='line'>mkdir -p <span class="s2">&quot;${rootfs_dir}&quot;</span>
</span><span class='line'><span class="nv">layers_dir</span><span class="o">=</span><span class="s2">&quot;$(mktemp -d)&quot;</span>
</span><span class='line'>tar -C <span class="s2">&quot;${layers_dir}&quot;</span> -pxf <span class="s2">&quot;${rootfs_tar}&quot;</span>
</span><span class='line'><span class="k">for</span> <span class="o">((</span><span class="nv">i</span><span class="o">=</span>0<span class="p">;</span>i&lt;<span class="k">$(</span>cat <span class="k">${</span><span class="nv">layers_dir</span><span class="k">}</span>/manifest.json <span class="p">|</span> jq -r <span class="s2">&quot;.[].Layers | length&quot;</span><span class="k">)</span><span class="p">;</span>i++<span class="o">))</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>  tar -C <span class="k">${</span><span class="nv">rootfs_dir</span><span class="k">}</span> -xf <span class="k">${</span><span class="nv">layers_dir</span><span class="k">}</span>/<span class="k">$(</span>cat <span class="k">${</span><span class="nv">layers_dir</span><span class="k">}</span>/manifest.json <span class="p">|</span> jq -r <span class="s2">&quot;.[].Layers[${i}]&quot;</span><span class="k">)</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>该脚本会使用 ctr 下载镜像，将镜像导出为 tar 文件，这时候 export 出来的还是 blob 格式，不能直接当做 rootfs 使用，需要再将每层解压缩，才能作为 rootfs 使用。</p>

<p>上面的脚本执行后，就可以在本地看到 rootfs 了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ./create_rootfs.sh </span>
</span><span class='line'>quay.io/prometheus/busybox:latest:                                                resolved       <span class="p">|</span>++++++++++++++++++++++++++++++++++++++<span class="p">|</span>
</span><span class='line'>index-sha256:a56e11cce1c09f50a71290d65733ebe976adc8654395091d5379c7f294cc891e:    <span class="k">done</span>           <span class="p">|</span>++++++++++++++++++++++++++++++++++++++<span class="p">|</span>
</span><span class='line'>manifest-sha256:de4af55df1f648a334e16437c550a2907e0aed4f0b0edf454b0b215a9349bdbb: <span class="k">done</span>           <span class="p">|</span>++++++++++++++++++++++++++++++++++++++<span class="p">|</span>
</span><span class='line'>layer-sha256:b45d31ee2d7f9f452678a85b0c837c29e12089f31ee8dbac6c8c24dfa4054a30:    <span class="k">done</span>           <span class="p">|</span>++++++++++++++++++++++++++++++++++++++<span class="p">|</span>
</span><span class='line'>layer-sha256:aa2a8d90b84cb2a9c422e7005cd166a008ccf22ef5d7d4f07128478585ce35ea:    <span class="k">done</span>           <span class="p">|</span>++++++++++++++++++++++++++++++++++++++<span class="p">|</span>
</span><span class='line'>config-sha256:765c5b099deb79705ac7f947580453504f7c5d81d38e1e661b397e2648383815:   <span class="k">done</span>           <span class="p">|</span>++++++++++++++++++++++++++++++++++++++<span class="p">|</span>
</span><span class='line'>elapsed: 1.1 s                                                                    total:   0.0 B <span class="o">(</span>0.0 B/s<span class="o">)</span>
</span><span class='line'>unpacking linux/amd64 sha256:a56e11cce1c09f50a71290d65733ebe976adc8654395091d5379c7f294cc891e...
</span><span class='line'><span class="k">done</span>
</span><span class='line'>root@kant:/tmp/rootfs
</span><span class='line'><span class="c"># ls </span>
</span><span class='line'>bundle  create_rootfs.sh  rootfs.tar
</span><span class='line'>root@kant:/tmp/rootfs# ls bundle/
</span><span class='line'>rootfs
</span><span class='line'>root@kant:/tmp/rootfs# ls bundle/rootfs/
</span><span class='line'>bin  dev  etc  home  lib  root  tmp  usr  var
</span></code></pre></td></tr></table></div></figure>


<h2>准备 config.json 文件</h2>

<p>将下面的 <code>config.json</code> 文件拷贝到 bundle 下即可，注意其中的 rootfs 要根据自己的实际情况修改。</p>

<p>将 SPDK 设备传递给 Kata Containers 是通过指定 <code>devices</code> 属性实现的。其中 <code>major: 241</code> 是 Kata Containers 约定的 vhost-user-blk 设备的编号，文件模式 420 即 8 进制的 644。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;linux&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;devices&quot;</span><span class="p">:</span> <span class="p">[{</span>
</span><span class='line'>      <span class="nt">&quot;path&quot;</span><span class="p">:</span> <span class="s2">&quot;/dev/vda&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;major&quot;</span><span class="p">:</span> <span class="mi">241</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;minor&quot;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;fileMode&quot;</span><span class="p">:</span> <span class="mi">420</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;uid&quot;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;gid&quot;</span><span class="p">:</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">}]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后就可以启动 Kata Containers 容器了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo ctr run -d --runtime io.containerd.run.kata.v2 --config bundle/config.json spdk_container
</span><span class='line'><span class="nv">$ </span>sudo ctr t <span class="nb">exec</span> --exec-id <span class="m">1</span> -t spdk_container sh
</span><span class='line'>/ <span class="c"># ls -l /dev/vda</span>
</span><span class='line'>brw-r--r--    <span class="m">1</span> root     root      254,   <span class="m">0</span> Jan <span class="m">20</span> 03:54 /dev/vda
</span><span class='line'>/ <span class="c"># dd if=/dev/vda of=/tmp/ddtest bs=4k count=20</span>
</span><span class='line'>20+0 records in
</span><span class='line'>20+0 records out
</span><span class='line'><span class="m">81920</span> bytes <span class="o">(</span>80.0KB<span class="o">)</span> copied, 0.002996 seconds, 26.1MB/s
</span></code></pre></td></tr></table></div></figure>


<p>完整的 <code>config.json</code> 如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;ociVersion&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.0-rc2-dev&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;platform&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;os&quot;</span><span class="p">:</span> <span class="s2">&quot;linux&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;arch&quot;</span><span class="p">:</span> <span class="s2">&quot;amd64&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;process&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;terminal&quot;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;consoleSize&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;height&quot;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;width&quot;</span><span class="p">:</span> <span class="mi">0</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nt">&quot;user&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;uid&quot;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;gid&quot;</span><span class="p">:</span> <span class="mi">0</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nt">&quot;args&quot;</span><span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;/bin/tail&quot;</span><span class="p">,</span> <span class="s2">&quot;-f&quot;</span><span class="p">,</span> <span class="s2">&quot;/dev/null&quot;</span> <span class="p">],</span>
</span><span class='line'>      <span class="nt">&quot;env&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>          <span class="s2">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;TERM=xterm&quot;</span>
</span><span class='line'>      <span class="p">],</span>
</span><span class='line'>      <span class="nt">&quot;cwd&quot;</span><span class="p">:</span> <span class="s2">&quot;/&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;rlimits&quot;</span><span class="p">:</span> <span class="p">[{</span>
</span><span class='line'>          <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;RLIMIT_NOFILE&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;hard&quot;</span><span class="p">:</span> <span class="mi">1024</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;soft&quot;</span><span class="p">:</span> <span class="mi">1024</span>
</span><span class='line'>      <span class="p">}],</span>
</span><span class='line'>      <span class="nt">&quot;noNewPrivileges&quot;</span><span class="p">:</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;root&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;path&quot;</span><span class="p">:</span> <span class="s2">&quot;/tmp/rootfs/bundle/rootfs&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;readonly&quot;</span><span class="p">:</span> <span class="kc">false</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;hostname&quot;</span><span class="p">:</span> <span class="s2">&quot;spdk-test&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;mounts&quot;</span><span class="p">:</span> <span class="p">[{</span>
</span><span class='line'>          <span class="nt">&quot;destination&quot;</span><span class="p">:</span> <span class="s2">&quot;/proc&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;proc&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;source&quot;</span><span class="p">:</span> <span class="s2">&quot;proc&quot;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;destination&quot;</span><span class="p">:</span> <span class="s2">&quot;/dev&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;tmpfs&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;source&quot;</span><span class="p">:</span> <span class="s2">&quot;tmpfs&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;options&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>              <span class="s2">&quot;nosuid&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s2">&quot;strictatime&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s2">&quot;mode=755&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s2">&quot;size=65536k&quot;</span>
</span><span class='line'>          <span class="p">]</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;destination&quot;</span><span class="p">:</span> <span class="s2">&quot;/dev/pts&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;devpts&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;source&quot;</span><span class="p">:</span> <span class="s2">&quot;devpts&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;options&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>              <span class="s2">&quot;nosuid&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s2">&quot;noexec&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s2">&quot;newinstance&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s2">&quot;ptmxmode=0666&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s2">&quot;mode=0620&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s2">&quot;gid=5&quot;</span>
</span><span class='line'>          <span class="p">]</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;destination&quot;</span><span class="p">:</span> <span class="s2">&quot;/dev/shm&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;tmpfs&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;source&quot;</span><span class="p">:</span> <span class="s2">&quot;shm&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;options&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>              <span class="s2">&quot;nosuid&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s2">&quot;noexec&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s2">&quot;nodev&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s2">&quot;mode=1777&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s2">&quot;size=65536k&quot;</span>
</span><span class='line'>          <span class="p">]</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;destination&quot;</span><span class="p">:</span> <span class="s2">&quot;/dev/mqueue&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;mqueue&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;source&quot;</span><span class="p">:</span> <span class="s2">&quot;mqueue&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;options&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>              <span class="s2">&quot;nosuid&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s2">&quot;noexec&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s2">&quot;nodev&quot;</span>
</span><span class='line'>          <span class="p">]</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;destination&quot;</span><span class="p">:</span> <span class="s2">&quot;/sys&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;sysfs&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;source&quot;</span><span class="p">:</span> <span class="s2">&quot;sysfs&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;options&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>              <span class="s2">&quot;nosuid&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s2">&quot;noexec&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s2">&quot;nodev&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s2">&quot;ro&quot;</span>
</span><span class='line'>          <span class="p">]</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;destination&quot;</span><span class="p">:</span> <span class="s2">&quot;/sys/fs/cgroup&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;cgroup&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;source&quot;</span><span class="p">:</span> <span class="s2">&quot;cgroup&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;options&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>              <span class="s2">&quot;nosuid&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s2">&quot;noexec&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s2">&quot;nodev&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s2">&quot;relatime&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s2">&quot;ro&quot;</span>
</span><span class='line'>          <span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nt">&quot;hooks&quot;</span><span class="p">:</span> <span class="p">{},</span>
</span><span class='line'>  <span class="nt">&quot;linux&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;devices&quot;</span><span class="p">:</span> <span class="p">[{</span>
</span><span class='line'>          <span class="nt">&quot;path&quot;</span><span class="p">:</span> <span class="s2">&quot;/dev/vda&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;major&quot;</span><span class="p">:</span> <span class="mi">241</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;minor&quot;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;fileMode&quot;</span><span class="p">:</span> <span class="mi">420</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;uid&quot;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;gid&quot;</span><span class="p">:</span> <span class="mi">0</span>
</span><span class='line'>      <span class="p">}],</span>
</span><span class='line'>      <span class="nt">&quot;cgroupsPath&quot;</span><span class="p">:</span> <span class="s2">&quot;kata/spdktest&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;resources&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;devices&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>          <span class="p">]</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nt">&quot;namespaces&quot;</span><span class="p">:</span> <span class="p">[{</span>
</span><span class='line'>              <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;pid&quot;</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;network&quot;</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;ipc&quot;</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;uts&quot;</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;mount&quot;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">],</span>
</span><span class='line'>      <span class="nt">&quot;maskedPaths&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>          <span class="s2">&quot;/proc/kcore&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;/proc/latency_stats&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;/proc/timer_list&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;/proc/timer_stats&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;/proc/sched_debug&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;/sys/firmware&quot;</span>
</span><span class='line'>      <span class="p">],</span>
</span><span class='line'>      <span class="nt">&quot;readonlyPaths&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>          <span class="s2">&quot;/proc/asound&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;/proc/bus&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;/proc/fs&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;/proc/irq&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;/proc/sys&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;/proc/sysrq-trigger&quot;</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初试 Nydus]]></title>
    <link href="http://liubin.org/blog/2021/11/05/nydus-intro/"/>
    <updated>2021-11-05T16:49:13+08:00</updated>
    <id>http://liubin.org/blog/2021/11/05/nydus-intro</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/dragonflyoss/image-service">Nydus</a> 是一个镜像加速方案，用于解决大规模集群中镜像部署的性能问题。</p>

<p>在多数情况下，镜像尽管很大，但是里面的文件不一定全会在容器运行中使用。尤其是 Docker 多层镜像机制中，即使在上层被删除的文件，在底层还是存在的，拉取镜像的时候，这部分数据也会造成无谓的浪费。</p>

<p>最大的问题在于，容器必须在镜像下载到本地之后，才能启动容器。如果镜像没有优化，会大幅度降低镜像启动速度。 Nydus 的想法是容器启动时并不真正的把所有文件都下载到本地，而是在容器真的读取该文件时，才会从网络下载该文件（块），这样就可以减少容器启动的时间。</p>

<p>这篇文章不打算深入了解它的结构，只是先体验一下它是如何管理镜像的。</p>

<p>Nydus 采用 RAFS 文件系统，以 FUSE 形式提供给容器运行时使用。Nydus 数据分为两类：</p>

<ul>
<li>bootstrap：RAFS 的 metadata</li>
<li>blob：存储真正的数据块</li>
</ul>


<h2>转换镜像</h2>

<p>我们这里使用了一个非常简单的 2 层的镜像：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Dockerfile
</span><span class='line'>FROM docker.io/library/alpine:latest
</span><span class='line'>ADD readme.txt /</span></code></pre></td></tr></table></div></figure>


<p>基于这个 Dockerfile 构建后 push 到 Docker Hub.</p>

<p>然后可以使用 <code>nydusify</code> 命令将标准的 OCI 镜像转换为 Nydus 格式的镜像：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># nydusify convert \</span>
</span><span class='line'>  --source docker.io/liubin/nydus:two-layers <span class="se">\</span>
</span><span class='line'>  --target liubin/nydus:two-layers-nydus <span class="se">\</span>
</span><span class='line'>  -log-level debug
</span></code></pre></td></tr></table></div></figure>


<p>该命令会将源镜像转换成 Nydus 的格式，并存储到 liubin/nydus:two-layers-nydus 中。</p>

<p>Nydus 的 blob 存储可以选择 Registry 和阿里云 OSS 两种方式。默认使用 Image Retistry。</p>

<p>默认情况下临时文件会保存到 <code>./tmp</code> 下面：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># tree tmp/</span>
</span><span class='line'>tmp/
</span><span class='line'>├── blobs
</span><span class='line'>├── bootstraps
</span><span class='line'>│   ├── 1-sha256:a0d0a0d46f8b52473982a3c466318f479767577551a53ffc9074c9fa7035982e
</span><span class='line'>│   ├── 1-sha256:a0d0a0d46f8b52473982a3c466318f479767577551a53ffc9074c9fa7035982e-output.json
</span><span class='line'>│   ├── 2-sha256:f2afd747bba4e4e1ae68a143d8f610cc44ae712e988a50ef47c9dfb2fddbc290
</span><span class='line'>│   └── 2-sha256:f2afd747bba4e4e1ae68a143d8f610cc44ae712e988a50ef47c9dfb2fddbc290-output.json
</span><span class='line'>├── conversion_metrics.prom
</span><span class='line'>└── <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>tmp/bootstraps/2-sha256\:f2afd747bba4e4e1ae68a143d8f610cc44ae712e988a50ef47c9dfb2fddbc290-output.json</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;blobs&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;66127347ad6d346cef12a6fdef2bb4ca611ff0f918b235136453da45bba83da9&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;0bb9d4bf5810ee24b997ce82186a6ec43c3b6e89ba0e1c8e9288157bb704cdd1&quot;</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nt">&quot;trace&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;consumed_time&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;apply layers&quot;</span><span class="p">:</span> <span class="mf">6.585999926755903e-06</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;build rafs&quot;</span><span class="p">:</span> <span class="mf">0.0015352850314229727</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;dump bootstrap and blob&quot;</span><span class="p">:</span> <span class="mf">0.0024188628885895014</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;load nodes from local directory&quot;</span><span class="p">:</span> <span class="mf">3.126099909422919e-05</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;load nodes from parent&quot;</span><span class="p">:</span> <span class="mf">0.001709955045953393</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;total build time&quot;</span><span class="p">:</span> <span class="mf">0.005979558918625116</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;validate bootstrap out of band&quot;</span><span class="p">:</span> <span class="mf">0.002757467096671462</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;write all nodes to blob including hashing&quot;</span><span class="p">:</span> <span class="mf">0.0011135309468954802</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;write all nodes to bootstrap&quot;</span><span class="p">:</span> <span class="mf">0.0011579629499465227</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;registered_events&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;blob compressed size&quot;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;egid&quot;</span><span class="p">:</span> <span class="s2">&quot;0&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;euid&quot;</span><span class="p">:</span> <span class="s2">&quot;0&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;loading files from directory&quot;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;loading files from parent&quot;</span><span class="p">:</span> <span class="mi">1125</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>验证镜像</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># nydusify check \</span>
</span><span class='line'>  --source docker.io/liubin/nydus:two-layers <span class="se">\</span>
</span><span class='line'>  --target liubin/nydus:two-layers-nydus
</span></code></pre></td></tr></table></div></figure>


<p>该命令会下载 OCI 镜像和 Nydus 镜像的 metadata 等数据，我们可以通过对比这两种不同类型的镜像的文件看一下看一下 Nydus 是如何保存镜像的。</p>

<p>默认情况下该命令会将结果都写到 <code>./output</code> 文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># tree output/</span>
</span><span class='line'>output/
</span><span class='line'>├── fs
</span><span class='line'>│   ├── nydus_api.sock
</span><span class='line'>│   ├── nydus_blobs
</span><span class='line'>│   ├── nydusd_config.json
</span><span class='line'>│   ├── nydus_mounted
</span><span class='line'>│   └── source_mounted
</span><span class='line'>├── nydus_bootstrap
</span><span class='line'>├── nydus_bootstrap_debug.json
</span><span class='line'>├── nydus_config.json
</span><span class='line'>├── nydus_manifest.json
</span><span class='line'>├── oci_config.json
</span><span class='line'>└── oci_manifest.json
</span><span class='line'>
</span><span class='line'><span class="m">4</span> directories, <span class="m">8</span> files
</span></code></pre></td></tr></table></div></figure>


<p>我们这里只来看一下 OCI 和 Nydus 两种镜像的 manifest 文件。</p>

<p>首先看一下 OCI 的：</p>

<p><code>oci_manifest.json</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;schemaVersion&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;config&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;mediaType&quot;</span><span class="p">:</span> <span class="s2">&quot;application/vnd.docker.container.image.v1+json&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;digest&quot;</span><span class="p">:</span> <span class="s2">&quot;sha256:85f3e7735ea66cc3df14a38419b199913b84d616298fb38d1a4a5c92cf885d49&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;size&quot;</span><span class="p">:</span> <span class="mi">1674</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;layers&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;mediaType&quot;</span><span class="p">:</span> <span class="s2">&quot;application/vnd.docker.image.rootfs.diff.tar.gzip&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;digest&quot;</span><span class="p">:</span> <span class="s2">&quot;sha256:a0d0a0d46f8b52473982a3c466318f479767577551a53ffc9074c9fa7035982e&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;size&quot;</span><span class="p">:</span> <span class="mi">2814446</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;mediaType&quot;</span><span class="p">:</span> <span class="s2">&quot;application/vnd.docker.image.rootfs.diff.tar.gzip&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;digest&quot;</span><span class="p">:</span> <span class="s2">&quot;sha256:f2afd747bba4e4e1ae68a143d8f610cc44ae712e988a50ef47c9dfb2fddbc290&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;size&quot;</span><span class="p">:</span> <span class="mi">123</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>oci_config.json</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;created&quot;</span><span class="p">:</span> <span class="s2">&quot;2021-11-05T07:39:26.692325137Z&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;architecture&quot;</span><span class="p">:</span> <span class="s2">&quot;amd64&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;os&quot;</span><span class="p">:</span> <span class="s2">&quot;linux&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;config&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;Env&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s2">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;Cmd&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s2">&quot;/bin/sh&quot;</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;rootfs&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;layers&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;diff_ids&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s2">&quot;sha256:e2eb06d8af8218cfec8210147357a68b7e13f7c485b991c288c2d01dc228bb68&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;sha256:f66394ac63df4047b5f85b83ace284471b145ca9d0c029e204318c5641b3fa43&quot;</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;history&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;created&quot;</span><span class="p">:</span> <span class="s2">&quot;2021-08-27T17:19:45.553092363Z&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;created_by&quot;</span><span class="p">:</span> <span class="s2">&quot;/bin/sh -c #(nop) ADD file:aad4290d27580cc1a094ffaf98c3ca2fc5d699fe695dfb8e6e9fac20f1129450 in / &quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;created&quot;</span><span class="p">:</span> <span class="s2">&quot;2021-08-27T17:19:45.758611523Z&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;created_by&quot;</span><span class="p">:</span> <span class="s2">&quot;/bin/sh -c #(nop)  CMD [\&quot;/bin/sh\&quot;]&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;empty_layer&quot;</span><span class="p">:</span> <span class="kc">true</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;created&quot;</span><span class="p">:</span> <span class="s2">&quot;2021-11-05T07:39:26.692325137Z&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;created_by&quot;</span><span class="p">:</span> <span class="s2">&quot;/bin/sh -c #(nop) ADD file:d46e26bb98315616de9963c6399d128eabb29c54472e7633417d95a13ee6a287 in / &quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可以看到 OCI 镜像的 manifest 中有两层文件，每一层都是 <code>application/vnd.docker.image.rootfs.diff.tar.gzip</code> 类型，也是 Docker Hub 存储的 Blob。</p>

<p>再来看一下 Nydus 的镜像 manifest ：</p>

<p><code>nydus_manifest.json</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;schemaVersion&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;config&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;mediaType&quot;</span><span class="p">:</span> <span class="s2">&quot;application/vnd.oci.image.config.v1+json&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;digest&quot;</span><span class="p">:</span> <span class="s2">&quot;sha256:2f47f937739061383e02392a922b317f8865a7cb0d49643a8bf0c042380bcc34&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;size&quot;</span><span class="p">:</span> <span class="mi">447</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;layers&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;mediaType&quot;</span><span class="p">:</span> <span class="s2">&quot;application/vnd.oci.image.layer.nydus.blob.v1&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;digest&quot;</span><span class="p">:</span> <span class="s2">&quot;sha256:66127347ad6d346cef12a6fdef2bb4ca611ff0f918b235136453da45bba83da9&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;size&quot;</span><span class="p">:</span> <span class="mi">3687032</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;annotations&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;containerd.io/snapshot/nydus-blob&quot;</span><span class="p">:</span> <span class="s2">&quot;true&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;mediaType&quot;</span><span class="p">:</span> <span class="s2">&quot;application/vnd.oci.image.layer.nydus.blob.v1&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;digest&quot;</span><span class="p">:</span> <span class="s2">&quot;sha256:0bb9d4bf5810ee24b997ce82186a6ec43c3b6e89ba0e1c8e9288157bb704cdd1&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;size&quot;</span><span class="p">:</span> <span class="mi">17</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;annotations&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;containerd.io/snapshot/nydus-blob&quot;</span><span class="p">:</span> <span class="s2">&quot;true&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;mediaType&quot;</span><span class="p">:</span> <span class="s2">&quot;application/vnd.oci.image.layer.v1.tar+gzip&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;digest&quot;</span><span class="p">:</span> <span class="s2">&quot;sha256:8ca1c17af7e6230b522cea7e12ff7262a63331a09ae895cfb5fca3b6d1631a45&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;size&quot;</span><span class="p">:</span> <span class="mi">17819</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;annotations&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;containerd.io/snapshot/nydus-blob-ids&quot;</span><span class="p">:</span> <span class="s2">&quot;[\&quot;66127347ad6d346cef12a6fdef2bb4ca611ff0f918b235136453da45bba83da9\&quot;,\&quot;0bb9d4bf5810ee24b997ce82186a6ec43c3b6e89ba0e1c8e9288157bb704cdd1\&quot;]&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;containerd.io/snapshot/nydus-bootstrap&quot;</span><span class="p">:</span> <span class="s2">&quot;true&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nt">&quot;annotations&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;nydus.trace.nydusify-version&quot;</span><span class="p">:</span> <span class="s2">&quot;2f10c409cb302eb63e29363e330bc00e89a39c8b.20211027.0608&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;nydus.trace.source-digest&quot;</span><span class="p">:</span> <span class="s2">&quot;sha256:00e2afc814fb9c3c48858dc5b17758e49ca2619f2bdd544c6f9810c397d83137&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;nydus.trace.source-reference&quot;</span><span class="p">:</span> <span class="s2">&quot;docker.io/liubin/nydus:two-layers&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>nydus_config.json</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;created&quot;</span><span class="p">:</span> <span class="s2">&quot;2021-11-05T07:39:26.692325137Z&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;architecture&quot;</span><span class="p">:</span> <span class="s2">&quot;amd64&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;os&quot;</span><span class="p">:</span> <span class="s2">&quot;linux&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;config&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;Env&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s2">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;Cmd&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s2">&quot;/bin/sh&quot;</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;rootfs&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;layers&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;diff_ids&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s2">&quot;sha256:66127347ad6d346cef12a6fdef2bb4ca611ff0f918b235136453da45bba83da9&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;sha256:0bb9d4bf5810ee24b997ce82186a6ec43c3b6e89ba0e1c8e9288157bb704cdd1&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;sha256:227fce4a699330352477cc3569e37459151e4e6cde2a38c5248c58053be34c9d&quot;</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>从 <code>nydus_manifest.json</code> 文件我们可以看到以下一些变化：</p>

<ul>
<li>OCI 的 2 层镜像变成了 3 层，这是因为多了一层 <code>"containerd.io/snapshot/nydus-bootstrap": "true"</code> 的 bootstrap 层</li>
<li>Blob 层类型为 <code>application/vnd.oci.image.layer.nydus.blob.v1</code> ，且增加了一个 <code>"containerd.io/snapshot/nydus-blob": "true"</code> 的 annotation。</li>
<li>bootstrap 层里 <code>containerd.io/snapshot/nydus-blob-ids</code> 保存了它所依赖的 Blobs。</li>
</ul>


<p>今天的了解就到这里为止，下次再见。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rust async/await 内部是怎么实现的]]></title>
    <link href="http://liubin.org/blog/2021/04/15/async-slash-await-internal/"/>
    <updated>2021-04-15T16:50:22+08:00</updated>
    <id>http://liubin.org/blog/2021/04/15/async-slash-await-internal</id>
    <content type="html"><![CDATA[<p>同事问 Rust aysnc/await 是怎么实现的呢，在 await 的地方停住，之后又在继续的时候继续恢复（当前线程/coroutine）的执行，也是用了 yield/generator 这样的东西？</p>

<p>简单的试了下，猜测大概是这样吧。</p>

<p>如下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">async</span> <span class="k">fn</span> <span class="n">say_world</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;hello world&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#[tokio::main]</span>
</span><span class='line'><span class="n">async</span> <span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">op</span> <span class="o">=</span> <span class="n">say_world</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">op</span><span class="p">.</span><span class="n">await</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用 nightly 的 <code>rustc</code> “编译”：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="err">$</span> <span class="n">cargo</span> <span class="n">rustc</span> <span class="o">--</span> <span class="o">-</span><span class="n">Z</span> <span class="n">unpretty</span><span class="o">=</span><span class="n">hir</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面是输出结果，这里只显示了 <code>main()</code> 函数相关处理后的代码（修改过格式后）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">tokio</span><span class="o">::</span><span class="n">runtime</span><span class="o">::</span><span class="n">Builder</span><span class="o">::</span><span class="n">new_multi_thread</span><span class="p">().</span><span class="n">enable_all</span><span class="p">().</span><span class="n">build</span><span class="p">().</span><span class="n">unwrap</span><span class="p">().</span><span class="n">block_on</span><span class="p">(</span><span class="cp">#[lang = </span><span class="s">&quot;from_generator&quot;</span><span class="cp">]</span><span class="p">(</span><span class="o">|</span><span class="k">mut</span> <span class="n">_task_context</span><span class="o">|</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">op</span> <span class="o">=</span> <span class="n">say_world</span><span class="p">();</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">op</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>        <span class="k">mut</span> <span class="n">pinned</span> <span class="o">=&gt;</span> <span class="k">loop</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">match</span> <span class="k">unsafe</span>
</span><span class='line'>                  <span class="p">{</span>
</span><span class='line'>                      <span class="cp">#[lang = </span><span class="s">&quot;poll&quot;</span><span class="cp">]</span><span class="p">(</span><span class="cp">#[lang = </span><span class="s">&quot;new_unchecked&quot;</span><span class="cp">]</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="n">pinned</span><span class="p">),</span>
</span><span class='line'>                                       <span class="cp">#[lang = </span><span class="s">&quot;get_context&quot;</span><span class="cp">]</span><span class="p">(</span><span class="n">_task_context</span><span class="p">))</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="cp">#[lang = </span><span class="s">&quot;Ready&quot;</span><span class="cp">]</span> <span class="p">{</span>
</span><span class='line'>                    <span class="mi">0</span><span class="o">:</span> <span class="n">result</span>
</span><span class='line'>                    <span class="p">}</span> <span class="o">=&gt;</span>
</span><span class='line'>                    <span class="k">break</span> <span class="n">result</span><span class="p">,</span>
</span><span class='line'>                    <span class="cp">#[lang = </span><span class="s">&quot;Pending&quot;</span><span class="cp">]</span> <span class="p">{</span> <span class="p">}</span> <span class="o">=&gt;</span>
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">_task_context</span> <span class="o">=</span> <span class="p">(</span><span class="kr">yield</span><span class="p">());</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}))</span>
</span></code></pre></td></tr></table></div></figure>


<p>抛去那么多 attribute ，大概流程就是不挺的 loop ，查看 Future（这里的 <code>op</code>） 是否 ready。如果已经是 ready 的状态，那么就会对该结果进行处理，然后退出；否则（Pending的状态）就继续等待，让 runtime 调度其他 task 。</p>

<p>Future 在 tokio 里就“是”一个 task（确切说是 future.await？），tokio runtime 负责调度 task ，task 有些像 goroutine，不过 Rust 本身不自带 runtime 的实现。</p>

<p>根据<a href="https://rust-lang.github.io/rfcs/2394-async_await.html#generators-and-streams">这里对 <code>await!</code>宏</a>的说明：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="k">mut</span> <span class="n">future</span> <span class="o">=</span> <span class="n">IntoFuture</span><span class="o">::</span><span class="n">into_future</span><span class="p">(</span><span class="err">$</span><span class="n">expression</span><span class="p">);</span>
</span><span class='line'><span class="kd">let</span> <span class="k">mut</span> <span class="n">pin</span> <span class="o">=</span> <span class="k">unsafe</span> <span class="p">{</span> <span class="n">Pin</span><span class="o">::</span><span class="n">new_unchecked</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="n">future</span><span class="p">)</span> <span class="p">};</span>
</span><span class='line'><span class="k">loop</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">Future</span><span class="o">::</span><span class="n">poll</span><span class="p">(</span><span class="n">Pin</span><span class="o">::</span><span class="n">borrow</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="n">pin</span><span class="p">),</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">ctx</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">Poll</span><span class="o">::</span><span class="n">Ready</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">break</span> <span class="n">item</span><span class="p">,</span>
</span><span class='line'>          <span class="n">Poll</span><span class="o">::</span><span class="n">Pending</span>     <span class="o">=&gt;</span> <span class="kr">yield</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以及<a href="https://rust-lang.github.io/rfcs/2033-experimental-coroutines.html">这里</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="cp">#[async]</span>
</span><span class='line'><span class="k">fn</span> <span class="n">print_lines</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">io</span><span class="o">::</span><span class="nb">Result</span><span class="o">&lt;</span><span class="p">()</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">addr</span> <span class="o">=</span> <span class="s">&quot;127.0.0.1:8080&quot;</span><span class="p">.</span><span class="n">parse</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">tcp</span> <span class="o">=</span> <span class="n">await</span><span class="o">!</span><span class="p">(</span><span class="n">TcpStream</span><span class="o">::</span><span class="n">connect</span><span class="p">(</span><span class="o">&amp;</span><span class="n">addr</span><span class="p">))</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">io</span> <span class="o">=</span> <span class="n">BufReader</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">tcp</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cp">#[async]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">line</span> <span class="k">in</span> <span class="n">io</span><span class="p">.</span><span class="n">lines</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">line</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">Ok</span><span class="p">(())</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面代码经过“翻译”后，会类似这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">print_lines</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="k">impl</span> <span class="n">Future</span><span class="o">&lt;</span><span class="n">Item</span> <span class="o">=</span> <span class="p">(),</span> <span class="n">Error</span> <span class="o">=</span> <span class="n">io</span><span class="o">::</span><span class="n">Error</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">CoroutineToFuture</span><span class="p">(</span><span class="o">||</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">addr</span> <span class="o">=</span> <span class="s">&quot;127.0.0.1:8080&quot;</span><span class="p">.</span><span class="n">parse</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">tcp</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">let</span> <span class="k">mut</span> <span class="n">future</span> <span class="o">=</span> <span class="n">TcpStream</span><span class="o">::</span><span class="n">connect</span><span class="p">(</span><span class="o">&amp;</span><span class="n">addr</span><span class="p">);</span>
</span><span class='line'>            <span class="k">loop</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">match</span> <span class="n">future</span><span class="p">.</span><span class="n">poll</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nb">Ok</span><span class="p">(</span><span class="n">Async</span><span class="o">::</span><span class="n">Ready</span><span class="p">(</span><span class="n">e</span><span class="p">))</span> <span class="o">=&gt;</span> <span class="k">break</span> <span class="nb">Ok</span><span class="p">(</span><span class="n">e</span><span class="p">),</span>
</span><span class='line'>                    <span class="nb">Ok</span><span class="p">(</span><span class="n">Async</span><span class="o">::</span><span class="n">NotReady</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="kr">yield</span><span class="p">,</span>
</span><span class='line'>                    <span class="nb">Err</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">break</span> <span class="nb">Err</span><span class="p">(</span><span class="n">e</span><span class="p">),</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">let</span> <span class="n">io</span> <span class="o">=</span> <span class="n">BufReader</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">tcp</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">let</span> <span class="k">mut</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">io</span><span class="p">.</span><span class="n">lines</span><span class="p">();</span>
</span><span class='line'>        <span class="k">loop</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">let</span> <span class="n">line</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">match</span> <span class="n">stream</span><span class="p">.</span><span class="n">poll</span><span class="p">()</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">Async</span><span class="o">::</span><span class="n">Ready</span><span class="p">(</span><span class="nb">Some</span><span class="p">(</span><span class="n">e</span><span class="p">))</span> <span class="o">=&gt;</span> <span class="n">e</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">Async</span><span class="o">::</span><span class="n">Ready</span><span class="p">(</span><span class="nb">None</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">break</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">Async</span><span class="o">::</span><span class="n">NotReady</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>                        <span class="kr">yield</span><span class="p">;</span>
</span><span class='line'>                        <span class="k">continue</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>            <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">line</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nb">Ok</span><span class="p">(())</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note:</strong> 上面代码 poll 结果还有 NotReady，应该是 RFC 更新不及时吧，最新版的 Future 应该都是 Pendding了。</p>

<p>从上面两处说明，我们也可以大概了解这种 generator 机制了：Ready 的时候返回结果，Pending 的时候让出调度。</p>

<p>今天只是大致搜了下资料，抛出了这样一个问题。下一步计划再确认下 tokio 的实现，看看它到底是怎么做的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于 K8s 的 Secret 并不安全这件事]]></title>
    <link href="http://liubin.org/blog/2021/04/14/k8s-secrets-secret/"/>
    <updated>2021-04-14T15:56:47+08:00</updated>
    <id>http://liubin.org/blog/2021/04/14/k8s-secrets-secret</id>
    <content type="html"><![CDATA[<p>K8s 提供了 Secret 资源供我们来保存、设置一些敏感信息，比如 API endpoint 地址，各种用户密码或 token 之类的信息。在没有使用 K8s 的时候，这些信息可能是通过配置文件或者环境变量在部署的时候设置的。</p>

<p>不过，Secret 其实并不安全，稍微用 kubectl 查看过 Secret 的人都知道，我们可以非常方便的看到 Secret 的原文，只要有相关的权限即可，尽管它的内容是 base64 编码的，这基本上等同于明文。</p>

<p>所以说，K8s 原生的 Secret 是非常简单的，不是特别适合在大型公司里直接使用，对 RBAC 的挑战也比较大，很多不该看到明文信息的人可能都能看到。</p>

<p>尤其是现在很多公司采用了所谓的 GitOps 理念，很多东西都需要放到 VCS，比如 git 中，这一问题就更日益突出，因为 VCS 也得需要设置必要的权限。</p>

<h2>问题</h2>

<p>简单来说，大概有几个地方都可以让不应该看到 Secret 内容的人获得 Secret 内容：</p>

<ul>
<li>etcd 存储</li>
<li>通过 API server</li>
<li>在 node 上直接查看文件</li>
</ul>


<p>这里我们以这个例子来看一下 Secret 在 K8s 中的使用情况。</p>

<p>Secret 定义， 用户名和密码分别为 <code>admin</code> 和 <code>hello-secret</code>：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apiVersion: v1
</span><span class='line'>kind: Secret
</span><span class='line'>metadata:
</span><span class='line'>  name: mysecret
</span><span class='line'>type: Opaque
</span><span class='line'>data:
</span><span class='line'>  username: YWRtaW4=
</span><span class='line'>  password: aGVsbG8tc2VjcmV0Cg==
</span></code></pre></td></tr></table></div></figure>


<p>Pod 定义，这里我们将 Secret 作为 volume mount 到容器中。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apiVersion: v1
</span><span class='line'>kind: Pod
</span><span class='line'>metadata:
</span><span class='line'>  name: mypod
</span><span class='line'>spec:
</span><span class='line'>  containers:
</span><span class='line'>  - name: mypod
</span><span class='line'>    image: docker.io/containerstack/alpine-stress
</span><span class='line'>    command:
</span><span class='line'>      - top
</span><span class='line'>    volumeMounts:
</span><span class='line'>    - name: foo
</span><span class='line'>      mountPath: "/etc/foo"
</span><span class='line'>      readOnly: true
</span><span class='line'>  volumes:
</span><span class='line'>  - name: foo
</span><span class='line'>    secret:
</span><span class='line'>      secretName: mysecret</span></code></pre></td></tr></table></div></figure>


<p>Pod 启动后，我们可以到容器中来查看 Secret 作为 volume mount 到容器后的文件内容。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl exec -it mypod sh
</span><span class='line'>/ # cd /etc/foo/
</span><span class='line'>/etc/foo # ls -tal
</span><span class='line'>total 4
</span><span class='line'>drwxr-xr-x    1 root     root          4096 Apr 14 08:55 ..
</span><span class='line'>drwxrwxrwt    3 root     root           120 Apr 14 08:55 .
</span><span class='line'>drwxr-xr-x    2 root     root            80 Apr 14 08:55 ..2021_04_14_08_55_54.401661151
</span><span class='line'>lrwxrwxrwx    1 root     root            31 Apr 14 08:55 ..data -&gt; ..2021_04_14_08_55_54.401661151
</span><span class='line'>lrwxrwxrwx    1 root     root            15 Apr 14 08:55 password -&gt; ..data/password
</span><span class='line'>lrwxrwxrwx    1 root     root            15 Apr 14 08:55 username -&gt; ..data/username
</span><span class='line'>/etc/foo # ls -tal ..2021_04_14_08_55_54.401661151
</span><span class='line'>total 8
</span><span class='line'>drwxr-xr-x    2 root     root            80 Apr 14 08:55 .
</span><span class='line'>drwxrwxrwt    3 root     root           120 Apr 14 08:55 ..
</span><span class='line'>-rw-r--r--    1 root     root            13 Apr 14 08:55 password
</span><span class='line'>-rw-r--r--    1 root     root             5 Apr 14 08:55 username
</span><span class='line'>/etc/foo # cat password
</span><span class='line'>hello-secret
</span><span class='line'>/etc/foo # </span></code></pre></td></tr></table></div></figure>


<h3>etcd 存储</h3>

<p>API server 中的资源都保存在 etcd 中，我们可以直接从文件看到相关内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># hexdump -C /var/lib/etcd/member/snap/db | grep -A 5 -B 5 hello
</span><span class='line'>00043640  12 00 1a 07 64 65 66 61  75 6c 74 22 00 2a 24 32  |....default".*$2|
</span><span class='line'>00043650  35 66 37 35 38 30 38 2d  37 33 31 33 2d 34 38 64  |5f75808-7313-48d|
</span><span class='line'>00043660  39 2d 39 61 38 65 2d 38  61 35 66 66 32 32 63 64  |9-9a8e-8a5ff22cd|
</span><span class='line'>00043670  64 35 39 32 00 38 00 42  08 08 98 dc da 83 06 10  |d592.8.B........|
</span><span class='line'>00043680  00 7a 00 12 19 0a 08 70  61 73 73 77 6f 72 64 12  |.z.....password.|
</span><span class='line'>00043690  0d 68 65 6c 6c 6f 2d 73  65 63 72 65 74 0a 12 11  |.hello-secret...|
</span><span class='line'>000436a0  0a 08 75 73 65 72 6e 61  6d 65 12 05 61 64 6d 69  |..username..admi|
</span><span class='line'>000436b0  6e 1a 06 4f 70 61 71 75  65 1a 00 22 00 00 00 00  |n..Opaque.."....|
</span><span class='line'>000436c0  00 00 00 08 95 5f 00 00  00 00 00 00 00 00 0a 37  |....._.........7|
</span><span class='line'>000436d0  2f 72 65 67 69 73 74 72  79 2f 73 65 72 76 69 63  |/registry/servic|
</span><span class='line'>000436e0  65 73 2f 65 6e 64 70 6f  69 6e 74 73 2f 6b 75 62  |es/endpoints/kub|</span></code></pre></td></tr></table></div></figure>


<p>可以看到，基本 yaml 中的内容都是明文存放的，而且是进行 base64 解码之后的内容。</p>

<p>使用下面的命令也可以获得类似的结果。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ETCDCTL_API=3 etcdctl get --prefix /registry/secrets/default/mysecret | hexdump -C</span></code></pre></td></tr></table></div></figure>


<p>etcd 本来存储的是明文数据，这个好像已经从 1.7 开始支持 <a href="https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/">加密存储</a> 了，而且直接访问 etcd 从物理上来说也不是那么容易。</p>

<h3>API server</h3>

<p>通过 API server 则简单的多，只要有权限就可以从任何节点上通过访问 API server 来得到 secret 的明文内容。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get secret mysecret -o yaml
</span><span class='line'>
</span><span class='line'>apiVersion: v1
</span><span class='line'>data:
</span><span class='line'>  password: aGVsbG8tc2VjcmV0Cg==
</span><span class='line'>  username: YWRtaW4=
</span><span class='line'>kind: Secret
</span><span class='line'>metadata:
</span><span class='line'>  creationTimestamp: "2021-04-14T08:55:52Z"
</span><span class='line'>  name: mysecret
</span><span class='line'>  namespace: default
</span><span class='line'>  resourceVersion: "2196"
</span><span class='line'>  selfLink: /api/v1/namespaces/default/secrets/mysecret
</span><span class='line'>  uid: 25f75808-7313-48d9-9a8e-8a5ff22cdd59
</span><span class='line'>type: Opaque
</span></code></pre></td></tr></table></div></figure>


<h3>节点上</h3>

<p>在节点上也可以看到 Secret 文件的内容。</p>

<p>查找 foo volume 的挂载点：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># mount | grep foo
</span><span class='line'>tmpfs on /var/lib/kubelet/pods/280451e8-512b-489c-b5dd-df2b1a3c9b29/volumes/kubernetes.io~secret/foo type tmpfs (rw,relatime)</span></code></pre></td></tr></table></div></figure>


<p>查看这个 volume 下面的文件内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># ls -tal /var/lib/kubelet/pods/280451e8-512b-489c-b5dd-df2b1a3c9b29/volumes/kubernetes.io~secret/foo
</span><span class='line'>total 4
</span><span class='line'>drwxrwxrwt 3 root root  120 4月  14 16:55 .
</span><span class='line'>drwxr-xr-x 2 root root   80 4月  14 16:55 ..2021_04_14_08_55_54.401661151
</span><span class='line'>lrwxrwxrwx 1 root root   31 4月  14 16:55 ..data -&gt; ..2021_04_14_08_55_54.401661151
</span><span class='line'>lrwxrwxrwx 1 root root   15 4月  14 16:55 password -&gt; ..data/password
</span><span class='line'>lrwxrwxrwx 1 root root   15 4月  14 16:55 username -&gt; ..data/username
</span><span class='line'>drwxr-xr-x 4 root root 4096 4月  14 16:55 ..
</span><span class='line'>
</span><span class='line'># cat /var/lib/kubelet/pods/280451e8-512b-489c-b5dd-df2b1a3c9b29/volumes/kubernetes.io~secret/foo/password
</span><span class='line'>hello-secret</span></code></pre></td></tr></table></div></figure>


<h2>第三方方案</h2>

<p>针对上面提到的可能泄露 Secret 的几点，大概解决方案不难想到如下几种：</p>

<ul>
<li>etcd 加密</li>
<li>API server 严格进行权限设计</li>
<li>强化 node 节点用户权限管理和系统安全</li>
</ul>


<p>不过，要相关确保 Secret 的绝对安全，上面这几种方案都是必须，缺一不可，缺少了那一个都相当于在墙上留了一个洞。</p>

<p>社区和公有云提供商都有一些产品和方案，我们可以参考一下。</p>

<ul>
<li><a href="https://github.com/shyiko/kubesec">shyiko/kubesec</a>: Secure Secret management for Kubernetes (with gpg, Google Cloud KMS and AWS KMS backends)</li>
<li><a href="https://github.com/bitnami-labs/sealed-secrets">bitnami-labs/sealed-secrets</a>: A Kubernetes controller and tool for one-way encrypted Secrets</li>
<li><a href="https://www.vaultproject.io/docs/platform/k8s">Vault by HashiCorp</a></li>
<li><a href="https://github.com/mozilla/sops">mozilla/sops</a></li>
<li><a href="https://github.com/external-secrets/kubernetes-external-secrets">Kubernetes External Secrets</a></li>
<li><a href="https://github.com/Soluto/kamus">Kamus</a></li>
</ul>


<h3>shyiko/kubesec</h3>

<p>kubesec 只对 Secret 中数据进行加密/解密，支持如下 key 管理服务或软件：</p>

<ul>
<li>AWS Key Management Service</li>
<li>Google Cloud KMS</li>
<li>GnuPG</li>
</ul>


<h3>bitnami-labs/sealed-secrets</h3>

<p>Bitnami 在 K8s 领域也是一家人人知晓的公司，输出了很多技术和最佳实践。</p>

<p><img src="http://liubin.org/images/2021/sealed-secrets.png" alt="" /></p>

<p><em>本图来自 <a href="https://engineering.bitnami.com/articles/sealed-secrets.html">Sealed Secrets: Protecting your passwords before they reach Kubernetes</a></em></p>

<p>SealeSecret 将 secret 资源整个加密保存为 <code>SealedSecret</code> 资源，而解密只能由该集群中的 controller 进行。</p>

<p>SealeSecret 提供了一个 kubeseal 工具来对 secret 资源进行加密，这个过程需要一个公开 key（公钥），这个公开 key 就是从 SealeSecret controller 拿到的。</p>

<p>不过，只从从说明文档来看， SealeSecret controller 加密解密所依赖的 key，也是通过普通的 Secret 来保存的，这难道不是一个问题？同时也增加了 SealeSecret controller 的运维成本。</p>

<h3>mozilla/sops</h3>

<p>严格来说， sops 跟 K8s 并没有什么必然关系，它只是一个支持 YAML/JSON/ENV/INI 等文件格式的加密文件编辑器，它支持 AWS KMS, GCP KMS, Azure Key Vault, age, 和 PGP 等服务与应用。</p>

<p>如果有有兴趣可以看它的<a href="https://github.com/mozilla/sops">主页</a>。</p>

<h3>Kubernetes External Secrets</h3>

<p>Kubernetes External Secrets 是知名域名服务提供商 godaddy 开发的开源软件，它可以直接将保存在外部 KMS 中的机密信息传给 K8s 。目前支持的 KSM 包括：</p>

<ul>
<li>AWS Secrets Manager</li>
<li>AWS System Manager</li>
<li>Hashicorp Vault</li>
<li>Azure Key Vault</li>
<li>GCP Secret Manager</li>
<li>Alibaba Cloud KMS Secret Manager</li>
</ul>


<p>它通过自定义 controller 和 CRD 来实现，具体架构图如下：</p>

<p><img src="http://liubin.org/images/2021/kubernetes-external-secrets-architecture.png" alt="" /></p>

<p>具体来说用户需要创建一个 ExternalSecret 类型的资源，来将外部 KMS 的数据映射到 K8s 的 Secret 上。</p>

<p>不过，这个中方式大概只有两点好处：</p>

<ul>
<li>统一 key 的管理，或者沿用既有 key 资产</li>
<li>key 信息不想放到 VCS 等</li>
</ul>


<p>对于防止 Sercet 信息泄露，作用不大，因为其明文资源还是可以在 API server/etcd 上看到。</p>

<p>或者说，External Secrets 真正做的事情，也就是从外部 KMS 中的 key ，映射成 K8s 中的 Secret 资源而已，对保证在 K8s 集群中数据的安全性用处不大。</p>

<h3>Kamus</h3>

<p>Kamus 同样提供了加密 key 的方法（一个命令行工具），同时只有通过 K8s 中的 controller 才能对这个 key 进行解密。不过它 保存在 K8s 中的 Secret 是加密的状态，用户不能像 External Secrets 那样直接获得 Secret 的明文内容。</p>

<p>Kamus 由 3 个组件组成，分别是：</p>

<ul>
<li>Encrypt API</li>
<li>Decrypt API</li>
<li>Key Management System (KMS)</li>
</ul>


<p>KMS 是一个外部加密服务的封装，目前支持如下服务：
- AES
- AWS KMS
- Azure KeyVault
- Google Cloud KMS</p>

<p>Kamus 以 service account 为单位对 secret 进行加密，之后 Pod 会通过 service account 来请求 Kamus 的解密服务来对该 secret 进行解密。</p>

<p>对 K8s 来说，解密 secret 可以通过 init container 来实现：定义一个 基于内存的 emptyDir ，业务容器和 init 容器使用同一个 volume， init 容器解密后，将数据存放到该 volume 下，之后业务容器就可以使用解密后的 secret 数据了。</p>

<p><img src="http://liubin.org/images/2021/kamus-pod.png" alt="" /></p>

<h3>Vault by HashiCorp</h3>

<p>HashiCorp 公司就不多说，在云计算/DevOps领域也算是数一数二的公司了。</p>

<p>Vault 本身就是一个 KMS 类似的服务，用于管理机密数据。对于 K8s 的原生 secret ，大概提供了如下两种方式的支持：</p>

<ul>
<li><a href="https://www.vaultproject.io/docs/platform/k8s/injector">Agent Sidecar Injector/vault-k8s</a></li>
<li><a href="https://www.vaultproject.io/docs/platform/k8s/csi">Vault CSI Provider</a></li>
</ul>


<h4>Agent Sidecar Injector</h4>

<p>这种方式和上面的 Kamus 类似，也是需要两个组件：</p>

<ul>
<li>Mutation webhook：负责修改 pod 定义，注入init/sidecar</li>
<li>agent-sidecar：负责获取和解密数据，将数据保存到指定的 volume/路径下</li>
</ul>


<p>Vault agent sidecar injector 不仅提供了 init container 来初始化 secret ，还通过 sidecar 来定期更新 secret ，这样就非常接近原生 secret 的实现了。</p>

<p>应用程序则只需要在文件系统上读取指定的文件就可以了，而不必关系如何从外部获取加密信息。</p>

<p>这是官方 blog 中的一个示例：</p>

<p>Pod 信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>spec:
</span><span class='line'>  template:
</span><span class='line'>    metadata:
</span><span class='line'>      annotations:
</span><span class='line'>        vault.hashicorp.com/agent-inject: "true"
</span><span class='line'>        vault.hashicorp.com/agent-inject-secret-helloworld: "secrets/helloworld"
</span><span class='line'>        vault.hashicorp.com/role: "myapp"</span></code></pre></td></tr></table></div></figure>


<p>这个定义中，<code>vault-k8s</code> 会对该 pod 注入 <code>vault agent</code>，并使用 <code>secrets/helloworld</code> 来初始化。Pod 运行后，可以在 <code>/vault/secrets</code> 下找到一个名为 <code>helloworld</code> 的文件。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl exec -ti app-XXXXXXXXX -c app -- cat /vault/secrets/helloworld
</span><span class='line'>data: map[password:foobarbazpass username:foobaruser]
</span><span class='line'>metadata: map[created_time:2019-12-16T01:01:58.869828167Z deletion_time: destroyed:false version:1]</span></code></pre></td></tr></table></div></figure>


<p>当然这个数据是raw data，没有经过格式化。如果想指定输出到文件中的格式，可以使用 vault 的模板功能。</p>

<h4>Vault CSI Provider</h4>

<p>这部分可以参考下面的社区方案部分。</p>

<h2>社区方案</h2>

<p>当然，社区没有理由意识不到原生 secret 的问题，因此社区也有 <a href="https://github.com/kubernetes-sigs/secrets-store-csi-driver">Kubernetes Secrets Store CSI Driver</a> ，一种通过 CSI 接口将 Secret 集成到 K8s 的方案。</p>

<p>Secrets Store CSI driver（<code>secrets-store.csi.k8s.io</code>）可以让 K8s mount 多个 secret 以 volume 的形式，从外部 KMS mount 到 Pod 里。</p>

<p>要想使用 Secrets Store CSI Driver ，大致过程如下:</p>

<ul>
<li>定义 SecretProviderClass</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apiVersion: secrets-store.csi.x-k8s.io/v1alpha1
</span><span class='line'>kind: SecretProviderClass
</span><span class='line'>metadata:
</span><span class='line'>  name: my-provider
</span><span class='line'>spec:
</span><span class='line'>  provider: vault   # accepted provider options: azure or vault or gcp
</span><span class='line'>  parameters:       # provider-specific parameters</span></code></pre></td></tr></table></div></figure>


<ul>
<li>为 Pod 配置 Volume</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kind: Pod
</span><span class='line'>apiVersion: v1
</span><span class='line'>metadata:
</span><span class='line'>  name: secrets-store-inline
</span><span class='line'>spec:
</span><span class='line'>  containers:
</span><span class='line'>  - image: k8s.gcr.io/e2e-test-images/busybox:1.29
</span><span class='line'>    name: busybox
</span><span class='line'>    command:
</span><span class='line'>    - "/bin/sleep"
</span><span class='line'>    - "10000"
</span><span class='line'>    volumeMounts:
</span><span class='line'>    - name: secrets-store-inline
</span><span class='line'>      mountPath: "/mnt/secrets-store"
</span><span class='line'>      readOnly: true
</span><span class='line'>  volumes:
</span><span class='line'>    - name: secrets-store-inline
</span><span class='line'>      csi:
</span><span class='line'>        driver: secrets-store.csi.k8s.io
</span><span class='line'>        readOnly: true
</span><span class='line'>        volumeAttributes:
</span><span class='line'>          secretProviderClass: "my-provider"</span></code></pre></td></tr></table></div></figure>


<p>Pod 启动之后，就可以确认解密后的数据了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl exec secrets-store-inline -- ls /mnt/secrets-store/
</span><span class='line'>foo</span></code></pre></td></tr></table></div></figure>


<h2>总结</h2>

<p>上面的总结都是基于互联网公开的资料而来，并没有经过亲身体验，因此有些地方可能理解有误，要想深入了解还需要自己亲手确认最好。</p>

<p>不过总体来说，社区这种方案可能最简单，部署也不是很麻烦，只是这就和原生的 secret 基本没什么关系了。。。</p>

<p>Vault 方案也很成熟，值得关注。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Rust async/await]]></title>
    <link href="http://liubin.org/blog/2021/03/25/hello-rust-async/"/>
    <updated>2021-03-25T19:26:43+08:00</updated>
    <id>http://liubin.org/blog/2021/03/25/hello-rust-async</id>
    <content type="html"><![CDATA[<p>Rust 对 async/await 的支持越来越成熟了，在一些场景下相对于线程等模型能显著提高效率。</p>

<p>这里我们来简单了解下怎么在 Rust 最快速的入手异步编程。</p>

<h2>Hello world async/await</h2>

<p>在 Rust 中，异步编程都抽象为 Future trait，类似 JavaScript 中的 Promise 。在最近的 Rust 中，直接使用 async 关键字即可创建 Future 对象。</p>

<p>async 关键字可以用于创建如下类型的 Future：</p>

<ul>
<li>定义函数：<code>async fn</code></li>
<li>定义 block： <code>async {}</code></li>
</ul>


<p>Future 不会立即执行，要想执行 Future 定义的函数，需要：</p>

<ul>
<li>使用 <code>await</code></li>
<li>或者在异步运行时中为该 Future 创建 task</li>
</ul>


<p>创建异步任务，可以选择如下方式：</p>

<ul>
<li>使用 <code>block_on</code></li>
<li>使用 <code>spawn</code></li>
</ul>


<h2>使用 async/await 关键字</h2>

<p>这里我们以 tokio 为例来看一些简单的入门示例，来加深一下对这几个概念的理解。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">async</span> <span class="k">fn</span> <span class="n">world</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&quot;world&quot;</span><span class="p">.</span><span class="n">to_string</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">async</span> <span class="k">fn</span> <span class="n">hello</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 使用 .await 关键字调用 world() 函数</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">w</span> <span class="o">=</span> <span class="n">world</span><span class="p">().</span><span class="n">await</span><span class="p">;</span>
</span><span class='line'>    <span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;hello {} async from function&quot;</span><span class="p">,</span> <span class="n">w</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 创建运行时</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">rt</span> <span class="o">=</span> <span class="n">tokio</span><span class="o">::</span><span class="n">runtime</span><span class="o">::</span><span class="n">Runtime</span><span class="o">::</span><span class="n">new</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">// 使用 block_on 调用 async 函数</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">rt</span><span class="p">.</span><span class="n">block_on</span><span class="p">(</span><span class="n">hello</span><span class="p">());</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">msg</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 使用 block_on 调用 async block</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">_</span> <span class="o">=</span> <span class="n">rt</span><span class="p">.</span><span class="n">block_on</span><span class="p">(</span><span class="n">async</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;hello world async from block&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这个例子中，hello 和 world 函数都使用了 async 关键字，表示该函数要以异步的方式执行。两个函数的返回值本来为 String，但是加了 async 关键字后，这两个函数的最终的签名会在内部表示为 <code>fn hello() -&gt; impl Future&lt;Output=String&gt;</code>。即返回值是一个 Future 类型，这个 Future 执行后，会返回 String 类型的结果。</p>

<p>这里我们使用了两种方法执行 Future。</p>

<p>在 hello 函数中，使用了 <code>world().await</code> 来调用 world 函数，并等待该函数返回，其结果不是 Future 类型，而是 Future 关联的 Output 类型，在这里即 String。</p>

<p>除了直接使用 await 关键字，我们还使用了 <code>tokio::runtime::Runtime::new()</code> 创建了 tokio 运行时，并在其中运行我们的 Future ，即 <code>rt.block_on(hello())</code> 和 <code>rt.block_on(async {})</code> 这两处。</p>

<p>对于 async block，也可以直接调用 await：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">async</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;hello world async&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}.</span><span class="n">await</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实，tokio 提供了一个非常方便的注解（或称属性），方便我们在 main 函数中执行 Future 任务。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="cp">#[tokio::main]</span>
</span><span class='line'><span class="n">async</span> <span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">hello</span><span class="p">().</span><span class="n">await</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">msg</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">async</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;hello world async from block&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">.</span><span class="n">await</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>只需要在 main 上面加上 <code>#[tokio::main]</code> ，前面加上 async 关键字，即可在其内部直接执行 await 方法，而不必使用 block_on 或者 spawn 方法。</p>

<p><strong>Tip:</strong> <code>async</code> 关键字可以创建一个 Future ，与之相对，<code>.await</code> 则会销毁（解构）这个 Future. 因此，我们也可以说这两个关键字互相消解，<code>async { foo.await }</code> 就相当于 <code>foo</code>。</p>

<h2>使用 spawn</h2>

<p>前面的例子直接执行了 Future 任务，我们也可以使用 spawn 来创建 Future 的任务，然后让任务并行执行，并获取任务的执行结果。</p>

<p>spawn 会启动一个异步任务，并返回 JoinHandle 类型的结果。这个任务虽然启动，但是 spawn 不保证（等待）它会正常执行完成。考虑如下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">use</span> <span class="n">tokio</span><span class="o">::</span><span class="n">time</span><span class="o">::</span><span class="p">{</span><span class="n">sleep</span><span class="p">,</span> <span class="n">Duration</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#[tokio::main]</span>
</span><span class='line'><span class="n">async</span> <span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">tokio</span><span class="o">::</span><span class="nb">spawn</span><span class="p">(</span><span class="n">async</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">sleep</span><span class="p">(</span><span class="n">Duration</span><span class="o">::</span><span class="n">from_millis</span><span class="p">(</span><span class="mi">100</span><span class="p">)).</span><span class="n">await</span><span class="p">;</span>
</span><span class='line'>        <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;hard work finished&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;mission started&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行上面的代码，我们只能看到 <code>mission started</code> 打印出来，而不会看到异步任务的输出，这是因为在异步任务输出语句执行之前，main 函数就结束了，进程将会退出，异步任务中的打印语句将不会有机会执行。</p>

<p>这时候，我们需要使用 JoinHandle 来确保该任务执行完成。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">use</span> <span class="n">tokio</span><span class="o">::</span><span class="n">time</span><span class="o">::</span><span class="p">{</span><span class="n">sleep</span><span class="p">,</span> <span class="n">Duration</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#[tokio::main]</span>
</span><span class='line'><span class="n">async</span> <span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">jh</span> <span class="o">=</span> <span class="n">tokio</span><span class="o">::</span><span class="nb">spawn</span><span class="p">(</span><span class="n">async</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">sleep</span><span class="p">(</span><span class="n">Duration</span><span class="o">::</span><span class="n">from_millis</span><span class="p">(</span><span class="mi">100</span><span class="p">)).</span><span class="n">await</span><span class="p">;</span>
</span><span class='line'>        <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;hard work finished&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;mission started&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">let</span> <span class="n">_</span> <span class="o">=</span> <span class="n">jh</span><span class="p">.</span><span class="n">await</span><span class="p">.</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里我们只需要拿到 spawn 的 JoinHandle ，并使用 await，即可以等待该任务结束，从而确保在所有工作完成后，再退出 main 函数。</p>

<p>JoinHandle 也可以用于获取异步任务的返回值，这里我们看一个 <a href="https://docs.rs/tokio/1.4.0/tokio/task/struct.JoinHandle.html">官方文档</a> 的示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">use</span> <span class="n">tokio</span><span class="o">::</span><span class="n">task</span><span class="p">;</span>
</span><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#[tokio::main]</span>
</span><span class='line'><span class="n">async</span> <span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">io</span><span class="o">::</span><span class="nb">Result</span><span class="o">&lt;</span><span class="p">()</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">join_handle</span><span class="o">:</span> <span class="n">task</span><span class="o">::</span><span class="n">JoinHandle</span><span class="o">&lt;</span><span class="nb">Result</span><span class="o">&lt;</span><span class="kt">i32</span><span class="p">,</span> <span class="n">io</span><span class="o">::</span><span class="n">Error</span><span class="o">&gt;&gt;</span> <span class="o">=</span> <span class="n">tokio</span><span class="o">::</span><span class="nb">spawn</span><span class="p">(</span><span class="n">async</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">Ok</span><span class="p">(</span><span class="mi">5</span> <span class="o">+</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">join_handle</span><span class="p">.</span><span class="n">await</span><span class="o">??</span><span class="p">;</span>
</span><span class='line'>    <span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="mi">8</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">Ok</span><span class="p">(())</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们也可以用类似 golang 中的 chan 的机制来实现不同的异步任务之间的通信：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">use</span> <span class="n">tokio</span><span class="o">::</span><span class="n">sync</span><span class="o">::</span><span class="n">oneshot</span><span class="p">;</span>
</span><span class='line'><span class="kn">use</span> <span class="n">tokio</span><span class="o">::</span><span class="n">time</span><span class="o">::</span><span class="p">{</span><span class="n">sleep</span><span class="p">,</span> <span class="n">Duration</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#[tokio::main]</span>
</span><span class='line'><span class="n">async</span> <span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="p">(</span><span class="n">tx</span><span class="p">,</span> <span class="n">rx</span><span class="p">)</span> <span class="o">=</span> <span class="n">oneshot</span><span class="o">::</span><span class="n">channel</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">tokio</span><span class="o">::</span><span class="nb">spawn</span><span class="p">(</span><span class="n">async</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">sleep</span><span class="p">(</span><span class="n">Duration</span><span class="o">::</span><span class="n">from_millis</span><span class="p">(</span><span class="mi">100</span><span class="p">)).</span><span class="n">await</span><span class="p">;</span>
</span><span class='line'>        <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;hard work finished&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">tx</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;ping&quot;</span><span class="p">.</span><span class="n">to_string</span><span class="p">()).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;mission started&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">_</span> <span class="o">=</span> <span class="n">rx</span><span class="p">.</span><span class="n">await</span><span class="p">.</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;mission completed&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面代码的输出结果为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">mission</span> <span class="n">started</span>
</span><span class='line'><span class="n">hard</span> <span class="n">work</span> <span class="n">finished</span>
</span><span class='line'><span class="n">mission</span> <span class="n">completed</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，在 rx.await 的时候，main 函数会等待，直到异步任务结束之后，通过 <code>tx.send</code> 发送消息给了这个 chan ，main 函数才继续执行下面的步骤，打印了 &ldquo;mission completed&rdquo; 之后退出。</p>

<h2>等待多个异步任务</h2>

<p>有很多时候，我们可能会在开始启动多个异步任务，并等待所有异步任务执行完成。</p>

<p>tolio 提供了 <code>tokio::join!</code> 宏来实现该功能。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">use</span> <span class="n">tokio</span><span class="o">::</span><span class="n">time</span><span class="o">::</span><span class="p">{</span><span class="n">sleep</span><span class="p">,</span> <span class="n">Duration</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#[tokio::main]</span>
</span><span class='line'><span class="n">async</span> <span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">f1</span> <span class="o">=</span> <span class="n">async</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">sleep</span><span class="p">(</span><span class="n">Duration</span><span class="o">::</span><span class="n">from_millis</span><span class="p">(</span><span class="mi">100</span><span class="p">)).</span><span class="n">await</span><span class="p">;</span>
</span><span class='line'>        <span class="mi">1</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">f2</span> <span class="o">=</span> <span class="n">async</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">sleep</span><span class="p">(</span><span class="n">Duration</span><span class="o">::</span><span class="n">from_millis</span><span class="p">(</span><span class="mi">50</span><span class="p">)).</span><span class="n">await</span><span class="p">;</span>
</span><span class='line'>        <span class="s">&quot;hello&quot;</span><span class="p">.</span><span class="n">to_string</span><span class="p">()</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">let</span> <span class="p">(</span><span class="n">r1</span><span class="p">,</span> <span class="n">r2</span><span class="p">)</span><span class="o">:</span> <span class="p">(</span><span class="kt">i32</span><span class="p">,</span> <span class="n">String</span><span class="p">)</span> <span class="o">=</span> <span class="n">tokio</span><span class="o">::</span><span class="n">join</span><span class="o">!</span><span class="p">(</span><span class="n">f1</span><span class="p">,</span> <span class="n">f2</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;r1:{}</span><span class="se">\n</span><span class="s">r2:{}&quot;</span><span class="p">,</span> <span class="n">r1</span><span class="p">,</span> <span class="n">r2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 简单等待前面的异步任务结束</span>
</span><span class='line'>    <span class="n">sleep</span><span class="p">(</span><span class="n">Duration</span><span class="o">::</span><span class="n">from_millis</span><span class="p">(</span><span class="mi">1000</span><span class="p">)).</span><span class="n">await</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>要注意，<code>tokio::join!</code> 只有所有的异步任务都结束的时候才会返回。</p>

<p>如果想同时启动几个任务，只需要一个返回就继续进行后续处理的话，可以使用 select 宏。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">use</span> <span class="n">tokio</span><span class="o">::</span><span class="n">time</span><span class="o">::</span><span class="p">{</span><span class="n">sleep</span><span class="p">,</span> <span class="n">Duration</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">async</span> <span class="k">fn</span> <span class="n">test_select</span><span class="p">(</span><span class="n">t1</span><span class="o">:</span> <span class="kt">u64</span><span class="p">,</span> <span class="n">t2</span><span class="o">:</span> <span class="kt">u64</span><span class="p">,</span> <span class="n">timeout</span><span class="o">:</span> <span class="kt">u64</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">f1</span> <span class="o">=</span> <span class="n">async</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">sleep</span><span class="p">(</span><span class="n">Duration</span><span class="o">::</span><span class="n">from_millis</span><span class="p">(</span><span class="n">t1</span><span class="p">)).</span><span class="n">await</span><span class="p">;</span>
</span><span class='line'>        <span class="mi">1</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">f2</span> <span class="o">=</span> <span class="n">async</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">sleep</span><span class="p">(</span><span class="n">Duration</span><span class="o">::</span><span class="n">from_millis</span><span class="p">(</span><span class="n">t2</span><span class="p">)).</span><span class="n">await</span><span class="p">;</span>
</span><span class='line'>        <span class="s">&quot;hello&quot;</span><span class="p">.</span><span class="n">to_string</span><span class="p">()</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">let</span> <span class="n">timeout</span> <span class="o">=</span> <span class="n">sleep</span><span class="p">(</span><span class="n">Duration</span><span class="o">::</span><span class="n">from_millis</span><span class="p">(</span><span class="n">timeout</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">tokio</span><span class="o">::</span><span class="n">select</span><span class="o">!</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_</span> <span class="o">=</span> <span class="n">timeout</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;got timeout!&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">v</span> <span class="o">=</span> <span class="n">f1</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;got r1: {}&quot;</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">v</span> <span class="o">=</span> <span class="n">f2</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;got r2: {}&quot;</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#[tokio::main]</span>
</span><span class='line'><span class="n">async</span> <span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// got first task result</span>
</span><span class='line'>    <span class="n">test_select</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">500</span><span class="p">).</span><span class="n">await</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// got second task result</span>
</span><span class='line'>    <span class="n">test_select</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">500</span><span class="p">).</span><span class="n">await</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// timeout</span>
</span><span class='line'>    <span class="n">test_select</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">50</span><span class="p">).</span><span class="n">await</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的程序执行结果如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">got</span> <span class="n">r1</span><span class="o">:</span> <span class="mi">1</span>
</span><span class='line'><span class="n">got</span> <span class="n">r2</span><span class="o">:</span> <span class="n">hello</span>
</span><span class='line'><span class="n">got</span> <span class="n">timeout</span><span class="o">!</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先，我们在 test_select 方法中，定义了另外两个异步任务，分别返回整数型和字符串类型的值，并且分别设置了不同的 sleep 时间。我们分 3 次调用了这个方法：</p>

<ul>
<li>test_select(100, 200, 500).await;</li>
<li>test_select(200, 100, 500).await;</li>
<li>test_select(200, 100, 50).await;</li>
</ul>


<p>其中前两个参数是两个异步任务的 sleep 时间，第三个参数是超时时间。从这三次调用所使用的参数来看，第三次超时时间小于两个异步任务的 sleep 时间，所以会打印超时的信息。</p>

<h2>小结</h2>

<p>这里我们只是简单入门了一下基于 tokio 的异步任务编程模型，其实 tokio 还提供了很多非常有用的库函数，等待我们在以后继续深挖。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[成为 Kata Containers 开发者 Day 2]]></title>
    <link href="http://liubin.org/blog/2021/03/25/kata-dev-day-2/"/>
    <updated>2021-03-25T14:01:50+08:00</updated>
    <id>http://liubin.org/blog/2021/03/25/kata-dev-day-2</id>
    <content type="html"><![CDATA[<p>上一篇文章中介绍了如何使用VirtualBox + Vagrant 构建一台基于 Ubuntu 的虚拟机，并在里面安装了 containerd + Kata Containers 2.0，同时安装好了开发环境，包括 Golang 和 Rust 。不过我们还没有进行过任何开发活动，这也是我们从这篇文章开始将要接触到的内容。</p>

<p>在本篇文章中，我们将会主要讲述如下一些内容：</p>

<ul>
<li>Kata Containers 仓库介绍</li>
<li>如何编译 runtime 和 agent 两个组件</li>
</ul>


<h2>Kata Containers 仓库介绍</h2>

<p>Kata Containers 代码托管在 GitHub 上，这是它的主页： <a href="https://github.com/kata-containers">https://github.com/kata-containers</a> 。</p>

<p>目前 Kata Containers 有两个版本：1.x 和 2.0 ，1.x 基本处于维护阶段，新功能都在 2.0 上开发。</p>

<p>根据 Kata Containers 版本的不同，代码仓库也有些不一样。</p>

<h3>Kata Containers 1.x</h3>

<p><strong>Note：</strong>本系列文章以 Kata Containers 2.0 为对象进行说明，对 1.x 的说明仅供了解。</p>

<p>在 Kata Containers 1.x 中，涉及到的组件比较多，主要有以下几个：</p>

<table>
<thead>
<tr>
<th>组件</th>
<th>语言</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/kata-containers/runtime">runtime</a></td>
<td>Golang</td>
<td>runtime/shimv2</td>
</tr>
<tr>
<td><a href="https://github.com/kata-containers/agent">kata-agent</a></td>
<td>Golang</td>
<td>运行在 guest 中的 agent，和 runtime 通过 gRPC 协议通信，负责 guest 内容器的管理</td>
</tr>
<tr>
<td><a href="https://github.com/kata-containers/proxy">kata-proxy</a></td>
<td>Golang</td>
<td>运行在 guest 中的 agent</td>
</tr>
<tr>
<td><a href="https://github.com/kata-containers/shim">kata-shim</a></td>
<td>Golang</td>
<td>运行在 host 中，负责 guest 中进程的 I/O 拷贝和信号处理</td>
</tr>
<tr>
<td><a href="https://github.com/kata-containers/documentation">documentation</a></td>
<td>文档</td>
<td>开发、使用文档</td>
</tr>
<tr>
<td><a href="https://github.com/kata-containers/packaging">packaging</a></td>
<td>文档、脚本</td>
<td>构建内核、安装包、发布新版本</td>
</tr>
<tr>
<td><a href="https://github.com/kata-containers/osbuilder">osbuilder</a></td>
<td>文档、脚本</td>
<td>构建 guest OS 镜像</td>
</tr>
</tbody>
</table>


<h3>Kata Containers 2.0</h3>

<p>从上面的仓库介绍来说，2.0 在开发上主要有以下几个重大的变更点：</p>

<ul>
<li>agent 使用 Rust 重写</li>
<li>只支持 shimv2，因此少了 proxy 和 shim 组件</li>
</ul>


<p>在 Kata Containers 2.0 中，核心组件只剩下两个：runtime 和 agent ，且都在<a href="https://github.com/kata-containers/kata-containers">kata-containers</a> 这个 repo 下。</p>

<p>这个 repo 的目录和文件有如下几个可以拿出来先提前说明一下的（开发中经常会修改或参考的）：</p>

<ul>
<li>versions.yaml：记录了测试、构建所需要的软件版本信息</li>
<li>ci：CI 测试脚本（主要依赖的其实是 <a href="https://github.com/kata-containers/tests">tests</a> 仓库）。</li>
<li>docs：文档信息，对应 1.x 的 documentation 仓库。</li>
<li>tools：原来的 packaging 和 osbuilder 挪到了这里。</li>
<li>src：核心组件的源代码。</li>
</ul>


<h4>src 目录介绍</h4>

<p>kata-containers/src 下有如下几个项目的代码：</p>

<ul>
<li>agent： agent 代码</li>
<li>runtime： runtime（shimv2）代码</li>
<li>trace-forwarder：可选，一个用于将 guest 内的 trace 通过 vsock 转发出来的组件。</li>
<li>kata-monitor：可选，运行在主机中，运行一些 shimv2 协议之外的管理接口。</li>
</ul>


<h3>其他仓库</h3>

<p>除了上面的主要代码仓库之外，作为一个颇具规模的开源软件，Kata Containers 还有一些其他的仓库需要了解下。</p>

<h4>community</h4>

<p><a href="https://github.com/kata-containers/community">community</a> 里面记录的是如何进行项目管理，包括治理委员会的组成和选举，以及开发者和贡献者的管理等内容。</p>

<h4>tests</h4>

<p><a href="https://github.com/kata-containers/tests">tests</a> 是非常重要的一个仓库，所有关于测试的代码都在这里，我们提交的每个 PR ，都会通过 CI 进行测试，而测试的主体代码都在这个仓库里。</p>

<h2>Kata Containers 开发流程</h2>

<p>Kata Containers 社区通过 PR 的方式来修改软件，也就是任何提交，都需要通过创建 PR、review 后，合并到主分支。</p>

<p>在提交代码之前，你还需要先 <a href="https://github.com/kata-containers/kata-containers/issues/new/choose">创建一个 issue</a>， 来介绍你为什么要做这次提交。基本来说 issue 有两种类型： bug 和 feature（enhancement）。不管是哪种类型，都需要描述问题的背景，以及如何解决，这样可以方便其他开发人员理解该问题，提高 review 代码的速度，这也是 PR 能今早合并的一个前提条件。</p>

<p>Issue 有了后，就可以在本地修改代码、测试，如果测试通过，就可以提交代码了。</p>

<p>提交代码的时候，对 commit message 的要求比较严格，一般来说是需要按照这样的格式来填写的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>subsystem: One line change summary
</span><span class='line'>
</span><span class='line'>More detailed explanation of your changes (why and how)
</span><span class='line'>that spans as many lines as required.
</span><span class='line'>
</span><span class='line'>Fixes: #1234
</span><span class='line'>
</span><span class='line'>Signed-off-by: Contributors Name &lt;contributor@foo.com&gt;</span></code></pre></td></tr></table></div></figure>


<p>即，commit message 包含 4 部分：</p>

<ul>
<li>title： 由 subsystem: title 组成</li>
<li>body： 具体的说明，比如为了解决什么问题，如何处理，注意事项，参考资料等</li>
<li>Fixes：需要指明这个 PR 是为了解决哪个 issue</li>
<li>Signed-off-by：这个可以通过 git commit -s 来自动生成。</li>
</ul>


<p>关于 commit message，我们会在后面的实例中再次进行说明。</p>

<p>代码提交、push 到 GitHub 后，就可以到 GitHub 上创建 PR 了，这部分可以参考 GitHub 的官方文档，这里不做说明，假设你了解该如何去做。如果你有 gitlab 的使用经验，应该可以很快入手。</p>

<p>这里列出的只是 Kata Containers 开发中比较重要的点，具体的一些注意事项，比如 git config 的配置，代码格式的检查等，我们都会在后面的系列文章中逐步进行详细的说明。</p>

<h2>编译 Kata Containers 组件</h2>

<h3>Fork Kata Containers 仓库</h3>

<p>首先，你需要在 GitHub 上 fork Kata Containers 的代码仓库，然后把自己 fork 的仓库下载到本地。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git@github.com:{your-github-username}/kata-containers.git $GOPATH/src/github.com/kata-containers/kata-containers</span></code></pre></td></tr></table></div></figure>


<h3>编译 runtime 组件</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd $GOPATH/src/github.com/kata-containers/kata-containers/src/runtime
</span><span class='line'>$ make</span></code></pre></td></tr></table></div></figure>


<p>第一次 make 的时候大概率会需要安装 yq 命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INFO: yq was not found, installing it</span></code></pre></td></tr></table></div></figure>


<p>如果安装失败，则可能需要配置下网络代理。</p>

<p>如果一切正常，构建会比较快，你可以在当前文件夹下看到如下的一些二进制文件：</p>

<ul>
<li>containerd-shim-kata-v2</li>
<li>kata-monitor</li>
<li>kata-netmon</li>
<li>kata-runtime</li>
</ul>


<p>我们的大部分开发工作，基本都会围绕着 containerd-shim-kata-v2 进行。</p>

<p>如果想使用自己编译的 containerd-shim-kata-v2 代替系统的 containerd-shim-kata-v2， 可以做一个符号链接即可：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># ln -s $GOPATH/src/github.com/kata-containers/kata-containers/src/runtime/containerd-shim-kata-v2 /usr/local/bin/containerd-shim-kata-v2</span></code></pre></td></tr></table></div></figure>


<h3>编译 agent 组件</h3>

<p>和 runtime 组件不同，agent 采用 Rust 编写，所有依赖的库都没有被以 vendor 的形式放到代码仓库里，在构建的时候，需要从网络上下载，所以初次构建 agent 会比较慢，所耗时间，还和宿主机的配置有关。</p>

<p>在编译 agent 之前，需要先安装 x86_64-unknown-linux-musl 用于静态链接（默认链接方式）。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rustup target add x86_64-unknown-linux-musl</span></code></pre></td></tr></table></div></figure>


<p>之后就可以编译 agent 了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd $GOPATH/src/github.com/kata-containers/kata-containers/src/agent
</span><span class='line'>$ make</span></code></pre></td></tr></table></div></figure>


<p>在我的 2C4G 虚拟机中，这个构建过程花费了近 6 分钟的时间。不过这只是第一次构建的耗时而已，只要你不执行 make clean ，如果只是简单修改代码后再构建，耗时应该会比这个低一些。</p>

<p>编译后的 kata-agent 文件在 target/x86_64-unknown-linux-musl/release/ 下面，这个文件需要在 guest OS 中运行，所以我们编译完了之后还不能直接使用，而必须要把它放到 guest OS 的镜像之中，不过这里我们暂时还不打算立刻介绍如何去做，等到后面有机会的时候，再做具体的详细说明。</p>

<h2>小结</h2>

<p>这篇文章给大家介绍了要想参与 Kata Containers 的开发，都会需要解除哪些代码仓库，大致的开发流程，也介绍了如何编译 runtime 和 agent 组件。在下一章，我们将会看到如何做一些具体的修改，并进行测试。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[成为 Kata Containers 开发者 Day 1]]></title>
    <link href="http://liubin.org/blog/2021/03/24/kata-dev-day-1/"/>
    <updated>2021-03-24T15:36:59+08:00</updated>
    <id>http://liubin.org/blog/2021/03/24/kata-dev-day-1</id>
    <content type="html"><![CDATA[<p>在平时闲聊或者吃饭的时候，隔壁同学谈到对 Kata Containers 也很感兴趣，问如何才能参与下或者学习下呢？确实现在 Kata Containers 社区版基本都是英文资料，而且也缺乏比较基础的入门资料，这也成为了这一系列文章的契机。</p>

<p>这一系列文章主要是介绍如何开始参与到 Kata Containers 的开发，这是其中第一部分，主要是看如何来安装开发环境。在这系列教程中，主要是以在 macOS 为宿主机，使用 VirtualBox + Vagrant + Ubuntu 为例来进行说明。</p>

<h2>安装虚拟机</h2>

<h3>安装 VirtualBox</h3>

<p>到<a href="https://www.virtualbox.org/wiki/Downloads">官网</a>下载安装。</p>

<h3>安装 Vagrant</h3>

<p>到<a href="https://www.vagrantup.com/downloads.html">官网</a>下载安装。</p>

<p>这时候需要确保命令行中可以使用 <code>vagrant</code> 命令。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant  version
</span><span class='line'>==&gt; vagrant: A new version of Vagrant is available: 2.2.14 (installed version: 2.2.7)!
</span><span class='line'>==&gt; vagrant: To upgrade visit: https://www.vagrantup.com/downloads.html</span></code></pre></td></tr></table></div></figure>


<h3>创建虚拟机</h3>

<p>首先创建一个工作目录：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir kata-box
</span><span class='line'>$ cd kata-box</span></code></pre></td></tr></table></div></figure>


<p>创建 Vagrant 配置文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat <span class="s">&lt;&lt;EOF &gt; Vagrantfile</span>
</span><span class='line'><span class="s">Vagrant.configure(&quot;2&quot;) do |config|</span>
</span><span class='line'><span class="s">  # 磁盘大小，30 GB比较保守</span>
</span><span class='line'><span class="s">  config.disksize.size = &#39;30GB&#39;</span>
</span><span class='line'><span class="s">  config.vm.box = &quot;bento/ubuntu-20.04&quot;</span>
</span><span class='line'><span class="s">  # 主机名，选择自己喜欢的</span>
</span><span class='line'><span class="s">  config.vm.hostname=&quot;kata-box&quot;</span>
</span><span class='line'><span class="s">  config.vm.network &quot;private_network&quot;, ip: &quot;192.168.33.19&quot;</span>
</span><span class='line'><span class="s">  config.vm.provider &quot;virtualbox&quot; do |vb|</span>
</span><span class='line'><span class="s">    # 虚拟机的资源，当然是越大越好。</span>
</span><span class='line'><span class="s">    vb.cpus = 2</span>
</span><span class='line'><span class="s">    vb.memory = &quot;4096&quot;</span>
</span><span class='line'><span class="s">    # 开启嵌套虚拟化，即在虚拟机中再运行虚拟机（QEMU等）。</span>
</span><span class='line'><span class="s">    vb.customize [&quot;modifyvm&quot;, :id, &quot;--nested-hw-virt&quot;, &quot;on&quot;]</span>
</span><span class='line'><span class="s">  end</span>
</span><span class='line'><span class="s">end</span>
</span><span class='line'><span class="s">EOF</span>
</span></code></pre></td></tr></table></div></figure>


<p>配置文件编辑完之后，就可以启动虚拟机了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant up
</span></code></pre></td></tr></table></div></figure>


<p>第一次启动会比较慢，完全依赖于你的网速，因为初次启动需要从网络下载虚拟机镜像，即上面的 <code>bento/ubuntu-20.04</code> ，还会安装 GuestAdditions（ Vagrant 用于管理虚拟机的 guest OS ） ，这也是很耗时的一步。</p>

<p>如果启动没有问题，就可以通过 ssh 登录到虚拟机了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant ssh
</span></code></pre></td></tr></table></div></figure>


<p>以后，我们每次进到 kata-box 目录，都可以直接通过 vagrant 命令来管理虚拟机。</p>

<p>在 guest OS 中，通过检查内核模块看是否启用了kvm：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>lsmod <span class="p">|</span> grep kvm
</span><span class='line'>kvm_intel             <span class="m">282624</span>  0
</span><span class='line'>kvm                   <span class="m">663552</span>  <span class="m">1</span> kvm_intel
</span></code></pre></td></tr></table></div></figure>


<h2>安装开发环境</h2>

<p>Kata Containers 使用了 Golang 和 Rust 两种开发语言，分别对应 <code>runtime</code> 和 <code>agent</code> 两个子模块。<code>runtime</code> 主要和 <code>contaienrd</code> 等交互，实现了 <code>shimv2</code> 协议，负责 sandbox/containers 的管理。<code>agent</code> 运行在虚拟机（guest）内，通过 <a href="https://github.com/containerd/ttrpc-rust"><code>ttrpc</code></a> 协议和runtime交互。</p>

<p>以下操作均在虚拟机中进行。</p>

<p>最好提前设置好代理，如果想在线安装的话。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">http_proxy</span><span class="o">=</span>http://xxx
</span><span class='line'><span class="nb">export </span><span class="nv">https_proxy</span><span class="o">=</span>http://yyy
</span></code></pre></td></tr></table></div></figure>


<h3>安装 Golang</h3>

<p>安装最新版即可，这里都是用的 root 用户。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># wget https://golang.org/dl/go1.16.2.linux-amd64.tar.gz</span>
</span><span class='line'><span class="c"># rm -rf /usr/local/go &amp;&amp; tar -C /usr/local -xzf go1.16.2.linux-amd64.tar.gz</span>
</span><span class='line'><span class="c"># export PATH=$PATH:/usr/local/go/bin</span>
</span><span class='line'><span class="c"># go version</span>
</span><span class='line'>go version go1.16.2 linux/amd64
</span></code></pre></td></tr></table></div></figure>


<p>注意要把上面的 PATH 更新到 <code>$HOME/.profile</code> 或相应文件里。</p>

<h3>安装 Rust</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果安装失败或者很慢，可能是需要设置代理。这条命令会安装 cargo 等 Rust 所需要的各种工具，也需要一定耗时。</p>

<p>确认 cargo 是否安装成功：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># source $HOME/.cargo/env</span>
</span><span class='line'><span class="c"># cargo -V</span>
</span><span class='line'>cargo 1.50.0 <span class="o">(</span>f04e7fab7 2021-02-04<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>安装 Kata Containers 2.0</h2>

<h3>安装 Kata Containers 2.0</h3>

<p>这里使用直接从 GitHub 下载最新压缩包的方式安装。别问我为什么，貌似 Ubuntu 上还没有 2.0 的安装包，即通过 apt 来安装。</p>

<p>下载并解压缩：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># wget https://github.com/kata-containers/kata-containers/releases/download/2.0.1/kata-static-2.0.1-x86_64.tar.xz</span>
</span><span class='line'><span class="c"># tar -C / -Jxvf kata-static-2.0.1-x86_64.tar.xz </span>
</span></code></pre></td></tr></table></div></figure>


<p>Kata 相关文件都会被解压到 /opt/kata/ 下面。Kata 的配置文件在 /opt/kata/share/defaults/kata-containers/ 下面，每种 hypervisor 都有一个对应的文件，默认使用 QEMU 。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ls -tl /opt/kata/share/defaults/kata-containers/
</span><span class='line'>total 60
</span><span class='line'>-rw-r--r-- <span class="m">1</span> <span class="m">1001</span> lpadmin  <span class="m">9686</span> Jan <span class="m">19</span> 20:07 configuration-acrn.toml
</span><span class='line'>-rw-r--r-- <span class="m">1</span> <span class="m">1001</span> lpadmin  <span class="m">9315</span> Jan <span class="m">19</span> 20:07 configuration-clh.toml
</span><span class='line'>-rw-r--r-- <span class="m">1</span> <span class="m">1001</span> lpadmin <span class="m">14948</span> Jan <span class="m">19</span> 20:07 configuration-fc.toml
</span><span class='line'>-rw-r--r-- <span class="m">1</span> <span class="m">1001</span> lpadmin <span class="m">19703</span> Jan <span class="m">19</span> 20:07 configuration-qemu.toml
</span><span class='line'>lrwxrwxrwx <span class="m">1</span> <span class="m">1001</span> lpadmin    <span class="m">23</span> Jan <span class="m">19</span> 20:07 configuration.toml -&gt; configuration-qemu.toml
</span></code></pre></td></tr></table></div></figure>


<h3>安装 containerd</h3>

<p>只有 Kata Containers 还不能单独工作，必须要有高层的 runtime 配合才行，比如 containerd 或者 CRI-O 。</p>

<p>这里使用传统方法来安装 containerd 。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>apt-get update <span class="o">&amp;&amp;</span> apt-get install -y apt-transport-https ca-certificates curl software-properties-common
</span><span class='line'><span class="nv">$ </span>curl -fsSL https://download.docker.com/linux/ubuntu/gpg <span class="p">|</span> apt-key add -
</span><span class='line'><span class="nv">$ </span>add-apt-repository <span class="se">\</span>
</span><span class='line'>    <span class="s2">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span>
</span><span class='line'><span class="s2">    $(lsb_release -cs) \</span>
</span><span class='line'><span class="s2">    stable&quot;</span>
</span><span class='line'><span class="nv">$ </span>apt-get update <span class="o">&amp;&amp;</span> apt-get install -y containerd.io
</span></code></pre></td></tr></table></div></figure>


<p>最后生成默认的配置文件，并重启 containerd：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>containerd config default &gt; /etc/containerd/config.toml
</span><span class='line'><span class="nv">$ </span>systemctl daemon-reload
</span><span class='line'><span class="nv">$ </span>systemctl restart containerd
</span></code></pre></td></tr></table></div></figure>


<h3>安装 CNI</h3>

<h4>安装 CNI</h4>

<p>没办法，一切都是为 K8s 服务。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir /go
</span><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">GOPATH</span><span class="o">=</span>/go
</span><span class='line'><span class="nv">$ </span>git clone https://github.com/containernetworking/plugins.git <span class="nv">$GOPATH</span>/src/github.com/containernetworking/plugins
</span></code></pre></td></tr></table></div></figure>


<p>build：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> <span class="nv">$GOPATH</span>/src/github.com/containernetworking/plugins
</span><span class='line'><span class="nv">$ </span>./build_linux.sh
</span></code></pre></td></tr></table></div></figure>


<p>部署：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir -p /opt/cni/bin
</span><span class='line'><span class="nv">$ </span>cp bin/* /opt/cni/bin/
</span></code></pre></td></tr></table></div></figure>


<h4>配置 CNI</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir -p /etc/cni/net.d
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>cat &gt; /etc/cni/net.d/10-mynet.conf <span class="s">&lt;&lt;EOF</span>
</span><span class='line'><span class="s">{</span>
</span><span class='line'><span class="s">  &quot;cniVersion&quot;: &quot;0.2.0&quot;,</span>
</span><span class='line'><span class="s">  &quot;name&quot;: &quot;mynet&quot;,</span>
</span><span class='line'><span class="s">  &quot;type&quot;: &quot;bridge&quot;,</span>
</span><span class='line'><span class="s">  &quot;bridge&quot;: &quot;cni0&quot;,</span>
</span><span class='line'><span class="s">  &quot;isGateway&quot;: true,</span>
</span><span class='line'><span class="s">  &quot;ipMasq&quot;: true,</span>
</span><span class='line'><span class="s">  &quot;ipam&quot;: {</span>
</span><span class='line'><span class="s">    &quot;type&quot;: &quot;host-local&quot;,</span>
</span><span class='line'><span class="s">    &quot;subnet&quot;: &quot;172.19.0.0/24&quot;,</span>
</span><span class='line'><span class="s">    &quot;routes&quot;: [</span>
</span><span class='line'><span class="s">      { &quot;dst&quot;: &quot;0.0.0.0/0&quot; }</span>
</span><span class='line'><span class="s">    ]</span>
</span><span class='line'><span class="s">  }</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'><span class="s">EOF</span>
</span></code></pre></td></tr></table></div></figure>


<h3>配置 containerd</h3>

<p>为 containerd 添加 Kata 运行时。这需要编辑 <code>/etc/containerd/config.toml</code> 文件，在合适的位置添加下面的内容（注意配置项目的嵌套关系）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># diff /etc/containerd/config.toml /etc/containerd/config.toml.orig </span>
</span><span class='line'>90,93d89
</span><span class='line'>&lt;         <span class="o">[</span>plugins.<span class="s2">&quot;io.containerd.grpc.v1.cri&quot;</span>.containerd.runtimes.kata<span class="o">]</span>
</span><span class='line'>&lt;           <span class="nv">runtime_type</span> <span class="o">=</span> <span class="s2">&quot;io.containerd.kata.v2&quot;</span>
</span><span class='line'>&lt;           <span class="nv">pod_annotations</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;io.kata-containers.*&quot;</span><span class="o">]</span>
</span><span class='line'>&lt;           <span class="nv">privileged_without_host_devices</span> <span class="o">=</span> <span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后重启 containerd：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>systemctl restart containerd
</span></code></pre></td></tr></table></div></figure>


<h3>验证 Kata Containers + containerd 是否正常工作</h3>

<p>可以使用 containerd 自带的 ctr 命令来创建容器，这个命令类似 Docker 的客户端命令。</p>

<p>下载镜像：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ctr image pull docker.io/library/busybox:latest
</span></code></pre></td></tr></table></div></figure>


<p>启动容器：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ctr run --runtime io.containerd.run.kata.v2 -t --rm docker.io/library/busybox:latest hello sh
</span><span class='line'>ctr: runtime <span class="s2">&quot;io.containerd.run.kata.v2&quot;</span> binary not installed <span class="s2">&quot;containerd-shim-kata-v2&quot;</span>: file does not exist: unknown
</span></code></pre></td></tr></table></div></figure>


<p>莫慌，因为我们的 Kata containers 不是标准安装，所以 containerd 没有找到我们的 runtime binary 文件。</p>

<p>链接一下即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ln -s /opt/kata/bin/containerd-shim-kata-v2 /usr/local/bin/containerd-shim-kata-v2
</span></code></pre></td></tr></table></div></figure>


<p>之后就可以启动使用了 Kata Containres 的容器了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ctr run --runtime io.containerd.run.kata.v2 -t --rm docker.io/library/busybox:latest hello sh
</span><span class='line'>/ <span class="c"># </span>
</span></code></pre></td></tr></table></div></figure>


<p>新开一个窗口，通过 ps 命令就可以看到 qemu 虚拟机在运行了。</p>

<h2>安装 crictl 工具</h2>

<h3>安装 crictl 二进制文件</h3>

<p><a href="https://github.com/kubernetes-sigs/cri-tools">crictl</a> 是支持 CRI 协议的命令行工具，可以进行Pod、Container的管理。</p>

<p>安装也很简单：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ VERSION</span><span class="o">=</span><span class="s2">&quot;v1.20.0&quot;</span>
</span><span class='line'><span class="nv">$ </span>wget https://github.com/kubernetes-sigs/cri-tools/releases/download/<span class="nv">$VERSION</span>/crictl-<span class="nv">$VERSION</span>-linux-amd64.tar.gz
</span><span class='line'><span class="nv">$ </span>sudo tar zxvf crictl-<span class="nv">$VERSION</span>-linux-amd64.tar.gz -C /usr/local/bin
</span><span class='line'><span class="nv">$ </span>rm -f crictl-<span class="nv">$VERSION</span>-linux-amd64.tar.gz
</span></code></pre></td></tr></table></div></figure>


<h3>配置 crictl</h3>

<p>为了能正常使用 crictl 命令，需要创建 crictl 命令用的配置文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># cat &gt; /etc/crictl.yaml &lt;&lt;EOF</span>
</span><span class='line'>runtime-endpoint: unix:///var/run/containerd/containerd.sock
</span><span class='line'>image-endpoint: unix:///var/run/containerd/containerd.sock
</span><span class='line'>timeout: 10
</span><span class='line'>debug: <span class="nb">false</span>
</span><span class='line'>EOF
</span></code></pre></td></tr></table></div></figure>


<h3>验证 crictl</h3>

<p>使用 crictl 需要手工先下载 2 个镜像。</p>

<ul>
<li>crictl pull k8s.gcr.io/pause:3.1</li>
<li>crictl pull busybox:latest</li>
</ul>


<p>上面的 k8s.gcr.io/pause:3.1 是 Pod 中 的 pause 容器的镜像，创建 Pod 的时候需要。busybox:latest 是容器运行的镜像。crictl 不会在运行创建或容器的时候自动下载镜像，所以需要提前手工下载。</p>

<p>镜像下载之后就可以创建 Pod 和容器，并启动容器。</p>

<p>创建 pod：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># pod=`crictl runp -r kata sandbox.yaml`</span>
</span></code></pre></td></tr></table></div></figure>


<p>查看 pod：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># crictl pods</span>
</span><span class='line'>POD ID              CREATED             STATE               NAME                NAMESPACE           ATTEMPT             RUNTIME
</span><span class='line'>d3e1a1567602e       <span class="m">24</span> seconds ago      Ready               busybox-sandbox     default             <span class="m">1</span>                   kata
</span></code></pre></td></tr></table></div></figure>


<p>创建容器：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># cnt=`crictl create $pod container.yaml sandbox.yaml`</span>
</span></code></pre></td></tr></table></div></figure>


<p>启动容器：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># crictl start $cnt</span>
</span><span class='line'>25222afa5327a5c4f11aee9c615df019fc39d9134700135606cdc3f49f113d7d
</span></code></pre></td></tr></table></div></figure>


<p>查看运行中的容器：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># crictl ps</span>
</span><span class='line'>CONTAINER           IMAGE               CREATED             STATE               NAME                ATTEMPT             POD ID
</span><span class='line'>25222afa5327a       busybox:latest      <span class="m">15</span> seconds ago      Running             busybox             <span class="m">0</span>                   d3e1a1567602e
</span></code></pre></td></tr></table></div></figure>


<p>停止并删除 pod：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># crictl stopp $pod</span>
</span><span class='line'>Stopped sandbox d3e1a1567602e12335dc0f772774f96f4ef66736c0a98d9dd0ab14164292c4e9
</span><span class='line'>
</span><span class='line'><span class="c"># crictl rmp $pod</span>
</span><span class='line'>Removed sandbox d3e1a1567602e12335dc0f772774f96f4ef66736c0a98d9dd0ab14164292c4e9
</span></code></pre></td></tr></table></div></figure>


<h2>常用 vagrant 命令</h2>

<ul>
<li>vagrant up： 启动虚拟机</li>
<li>vagrant halt：关机</li>
<li>vagrant reload：重启</li>
<li>vagrant ssh：登录虚拟机，用户都是vagrant来管理，不用自己操心</li>
<li>vagrant destroy：删除虚拟机，危险操作。</li>
</ul>


<h2>小结</h2>

<p>这一章，介绍了如何使用 Vagrant + VirtualBox 创建虚拟机，在虚拟机中安装 Kata Containers 2.0，并通过 crictl 工具来创建兼容 K8s 的 Pod。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安装老版本的 Kubernetes]]></title>
    <link href="http://liubin.org/blog/2021/01/28/install-old-version-k8s/"/>
    <updated>2021-01-28T14:56:13+08:00</updated>
    <id>http://liubin.org/blog/2021/01/28/install-old-version-k8s</id>
    <content type="html"><![CDATA[<p>记得前些日子看过一个报告，说是私有部署中公司内部用的 Kubernetes ，要比社区版延迟有 17 个月。所以，在很多公司，安装一个老版本的 Kubernetes ，可能还真是一个日常操作。</p>

<p>不过不光 Kubernetes 有版本问题，连它的安装工具 kubeadm 也是有版本要求的，要想安装指定版本的 Kubernetes ，还得安装指定版本的 kubeadm 。</p>

<p>这里以在 Ubuntu 下为例，记录一下如何安装一个 1.16 版本的 Kubernetes。</p>

<p>可以使用 <code>apt-cache</code> 命令查看支持的 Kubernetes 版本。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># apt-cache madison kubectl | grep 1.16
</span><span class='line'>   kubectl | 1.16.15-00 | https://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
</span><span class='line'>   kubectl | 1.16.14-00 | https://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
</span><span class='line'>   kubectl | 1.16.13-00 | https://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
</span><span class='line'>   kubectl | 1.16.12-00 | https://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
</span><span class='line'>   kubectl | 1.16.11-01 | https://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
</span><span class='line'>   kubectl | 1.16.11-00 | https://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
</span><span class='line'>   kubectl | 1.16.10-00 | https://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
</span><span class='line'>   kubectl |  1.16.9-00 | https://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
</span><span class='line'>   kubectl |  1.16.8-00 | https://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
</span><span class='line'>   kubectl |  1.16.7-00 | https://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
</span><span class='line'>   kubectl |  1.16.6-00 | https://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
</span><span class='line'>   kubectl |  1.16.5-00 | https://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
</span><span class='line'>   kubectl |  1.16.4-00 | https://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
</span><span class='line'>   kubectl |  1.16.3-00 | https://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
</span><span class='line'>   kubectl |  1.16.2-00 | https://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
</span><span class='line'>   kubectl |  1.16.1-00 | https://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
</span><span class='line'>   kubectl |  1.16.0-00 | https://apt.kubernetes.io kubernetes-xenial/main amd64 Packages</span></code></pre></td></tr></table></div></figure>


<p>所以我们可以选择一个最大的数字来作为版本号安装。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># apt install -y kubelet=1.16.15-00 kubeadm=1.16.15-00 kubectl=1.16.15-00
</span><span class='line'>
</span><span class='line'>... ...
</span><span class='line'>
</span><span class='line'>Setting up kubelet (1.16.15-00) ...
</span><span class='line'>Setting up kubectl (1.16.15-00) ...
</span><span class='line'>Setting up kubeadm (1.16.15-00) ...</span></code></pre></td></tr></table></div></figure>


<p>最后再使用 kubeadm 安装指定版本的 Kubernetes：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># kubeadm init --cri-socket /run/containerd/containerd.sock \
</span><span class='line'>    --pod-network-cidr=10.244.0.0/16 \
</span><span class='line'>    --apiserver-advertise-address 192.168.2.147 \
</span><span class='line'>    --kubernetes-version v1.16.0</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rust 学习笔记：package/crate/module]]></title>
    <link href="http://liubin.org/blog/2021/01/19/packages-slash-crate-slash-modules-in-rust/"/>
    <updated>2021-01-19T20:45:37+08:00</updated>
    <id>http://liubin.org/blog/2021/01/19/packages-slash-crate-slash-modules-in-rust</id>
    <content type="html"><![CDATA[<p>cargo new 会生成项目的雏形，提供了src/main.rs和src/lib.rs文件，但是随着项目的增长，代码的量也会变大，靠一个文件维护一大堆代码，肯定是不合适的。这时候一般都会按“模块”来拆分文件，rust也不例外。</p>

<p>这里学习一下rust中代码的组织方式，主要涉及到以下几个概念：</p>

<ul>
<li>package：Cargo中的概念，管理crate</li>
<li>crate：模块的集合，编译单位，有lib和bin两种，即供别人调用，或者是一个可执行文件</li>
<li>module：用于在crate内组织代码</li>
<li>workspace：项目复杂时，管理多个package</li>
</ul>


<h2>package</h2>

<p>cargo new 命令会创建一个新项目，也是一个package，里面有一个Cargo.toml文件，用于定义package、所需外部依赖，以及如何编译crate等。</p>

<h2>crate</h2>

<p>rust里有两种crate，lib类型和bin类型，并且默认以文件名为标准按以下规则处理crate：</p>

<ul>
<li>src/main.rs：表示该crate是一个bin类型的crate</li>
<li>src/lib.rs：表示该crate是一个lib类型的crate</li>
</ul>


<p>src/main.rs和src/lib.rs都是crate的根，也就是crate引用、rustc编译的入口。</p>

<p>此外，一个package中的crate还有如下约束：</p>

<ol>
<li>多个bin类型的crate</li>
<li>0个或1个lib类型的crate</li>
</ol>


<p>其中，1和2并不互斥，也就是说一个项目下可以有1个lib和多个bin类型的crate，即一个package还以编译出多个可执行文件。</p>

<p>只是如果有多个bin类型的crate，一个src/main.rs就不行了，就得放到 src/bin 下面，每个crate一个文件，换句话说，每个文件都是一个不同的crate。</p>

<h2>mod</h2>

<p>代码多了可以对代码以mod（文件/文件夹）为单位进行拆分，而不必把所有代码都写在src/lib.rs或者src/main.rs里。</p>

<p>以lib类型的crate为例，该crate的入口在src/lib.rs，也是crate的根。在 src/lib.rs 里定义模块很简单：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">mod</span> <span class="n">mymod</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">test</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;test&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>而实际项目中，我们都不可能只有一个lib.rs文件，而是会将代码按功能等拆分为多个模块。</p>

<h3>模块拆分</h3>

<p>一般来说，一个文件都会被视为一个mod，而且mod可以嵌套定义。嵌套定义的mod既可以写在同一个文件里，也可以通过文件夹的形式来实现。</p>

<p>具体我们来看几个例子。</p>

<p>假设当前项目文件结构如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">src</span>
</span><span class='line'><span class="err">├──</span> <span class="n">lib</span><span class="p">.</span><span class="n">rs</span>
</span><span class='line'><span class="err">├──</span> <span class="n">mod_a</span>
</span><span class='line'><span class="err">│</span>   <span class="err">├──</span> <span class="kn">mod</span><span class="p">.</span><span class="n">rs</span>
</span><span class='line'><span class="err">│</span>   <span class="err">└──</span> <span class="n">mod_b</span><span class="p">.</span><span class="n">rs</span>
</span><span class='line'><span class="err">└──</span> <span class="n">mod_c</span><span class="p">.</span><span class="n">rs</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里显示定义了3个mod：mod_a、mod_b和mod_c，其中mod_a为文件夹形式，而mod b 和mod c都有对应的文件。其中mod_b是mod_a的子模块。</p>

<p>我们来看一下各个模块是怎么声明的，以及应该如何引用。</p>

<p>首先来看一下crate的根，也就是入口lib.rs：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="kn">mod</span> <span class="n">mod_a</span><span class="p">;</span>
</span><span class='line'><span class="kn">mod</span> <span class="n">mod_c</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里声明了两个mod，如果需要在crate外部访问，可以在mod前面加上pub关键字。注意这里不需要声明mod_a的子模块mod_c，这个需要由mod_a来声明。</p>

<p>再来看一下这两个mod。先看mod_a，这是一个文件夹形式存在的mod，按cargo规定，这时候需要在该文件夹下有一个名为mod.rs的文件定义该mod下的内容。该文件内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// src/mod_a/mod.rs</span>
</span><span class='line'><span class="k">pub</span> <span class="kn">mod</span> <span class="n">mod_b</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，这个文件和lib.rs类似，都可以声明mod。该文件声明的mod_b的代码则保存为mod_b.rs：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// src/mod_a/mod_b.rs</span>
</span><span class='line'><span class="kn">use</span> <span class="n">super</span><span class="o">::</span><span class="n">super</span><span class="o">::</span><span class="n">mod_c</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">pub</span> <span class="k">fn</span> <span class="n">test</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;i&#39;m mod_b&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">call_mod_c</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">mod_c</span><span class="o">::</span><span class="n">test</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>再来看一下mod_c的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// src/mod_c.rs</span>
</span><span class='line'><span class="kn">use</span> <span class="n">crate</span><span class="o">::</span><span class="n">mod_a</span><span class="o">::</span><span class="n">mod_b</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">pub</span> <span class="k">fn</span> <span class="n">test</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">mod_b</span><span class="o">::</span><span class="n">test</span><span class="p">();</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;i&#39;, mod_c&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>除了如何定义mod，还需要注意的是如何引用其他mod的定义。这里在mod_c中，要想使用mod_b，可以使用 <strong>use crate::mod_a::mod_b</strong> 这种绝对路径形式。</p>

<p>而在mod_b中使用mod_c的时候，使用了 <strong>use super::super::mod_c</strong> 这种先对路径的形式。</p>

<h3>添加main.rs</h3>

<p>最后在上面代码的基础上添加一下main.rs，看看如何作为外部crate使用上面的mod_a。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// src/main.rs</span>
</span><span class='line'><span class="kn">use</span> <span class="n">testlib</span><span class="o">::</span><span class="n">mod_a</span><span class="o">::</span><span class="n">mod_b</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;main&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">mod_b</span><span class="o">::</span><span class="n">test</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里唯一想要提醒的就是lib的引用方法，不能使用crate开头的绝对路径或者相对路径引用方式，必须使用该crate的名称（也就是Cargo.toml里的名称，本例为testlib）来引用。因为main和lib分别属于不同的crate。</p>

<p>假如将上面的testlib改为crate，编译器会报如下错误：</p>

<p><img class="center-image" src="http://liubin.org/images/2021/01/rust-compile-error.png" title="'编译错误'" ></p>

<p>很多时候编译器都是我们最好的老师。</p>

<h3>pub修饰符</h3>

<h4>结构体和枚举</h4>

<p>要想访问其他mod里的结构体，需要将结构体声明为pub，但是这也只能访问到结构体而已，如果要想操作里面的字段，可以有两种方式：</p>

<ul>
<li>提供pub的方法修改字段</li>
<li>将需要操作的字段直接修改为pub类型</li>
</ul>


<p>可能前者更“面向对象”一些。</p>

<p>而枚举类型的话只需要在枚举名前面加上pub即可，不需要对其中的variant进行设置。</p>

<h2>use语句</h2>

<p>讲了这么多基础概念，下面看一下如何使用。</p>

<p>在crate和模块了可能定义了函数、结构体等，要想在其他模块或crate使用，需要将其引入到当前scope中，类似java的import的功能，rust里需要使用use。</p>

<p>如何表示要被引用的对象（rust中称为item），rust里称之为path，可以理解为我们在操作系统里使用文件一下。</p>

<p>rust中path有两种形式，也跟文件系统一样，绝对路径和相对路径：</p>

<ul>
<li>绝对路径始于crate的根（src/main.rs或src/lib.rs），可以使用crate名或者crate这个字面值表示</li>
<li>相对路径可以使用当前模块名、当前模块中可以使用的对象，super和self等。</li>
</ul>


<p>path中的层级使用两个冒号，类似文件系统中的斜线。</p>

<p>假设有如下代码（来自trpl）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">mod</span> <span class="n">front_of_house</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">pub</span> <span class="kn">mod</span> <span class="n">hosting</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">pub</span> <span class="k">fn</span> <span class="n">add_to_waitlist</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">pub</span> <span class="k">fn</span> <span class="n">eat_at_restaurant</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Absolute path</span>
</span><span class='line'>    <span class="n">crate</span><span class="o">::</span><span class="n">front_of_house</span><span class="o">::</span><span class="n">hosting</span><span class="o">::</span><span class="n">add_to_waitlist</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Relative path</span>
</span><span class='line'>    <span class="n">front_of_house</span><span class="o">::</span><span class="n">hosting</span><span class="o">::</span><span class="n">add_to_waitlist</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的第9行就是绝对路径形式的引用，而第12行就是相对路径的引用，这里，front_of_house处于crate的根之下，而不是位于其他子模块之下。</p>

<p>有一些限制需要知道：</p>

<ul>
<li>在父模块中不能使用子模块中的private项目</li>
<li>子模块可以使用父模块中的所有item</li>
</ul>


<p>注意 front_of_house 模块虽然不是pub的，但是eat_at_restaurant却可以使用，因为他们在同一模块下，这不需要pub就可以使用，否则所有item都只能变成pub才能使用了。但是hosting模块和add_to_waitlist方法必须为pub类型的，否则就不能从他们的父模块中的项目中使用了。</p>

<p>下面是一个使用了super的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">serve_order</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="kn">mod</span> <span class="n">back_of_house</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">fix_incorrect_order</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">cook_order</span><span class="p">();</span>
</span><span class='line'>        <span class="n">super</span><span class="o">::</span><span class="n">serve_order</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fn</span> <span class="n">cook_order</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>fix_incorrect_order方法属于back_of_house模块，要调用的serve_order和back_of_house同级，因此在back_of_house模块中的函数里，可以使用super::serve_order，访问到该模块同级的serve_order方法。</p>

<p>如果use后面的路径具有具有共同的父路径，可以使用简化的模式。比如 ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="p">;</span>
</span><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">cmp</span><span class="o">::</span><span class="nb">Ordering</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以简化为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="p">{</span><span class="n">cmp</span><span class="o">::</span><span class="nb">Ordering</span><span class="p">,</span> <span class="n">io</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果同时use的mod之间有父子关系，也可以像上面那样简化，使用self代表父mod。比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="p">;</span>
</span><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">Write</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以简化为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="p">{</span><span class="bp">self</span><span class="p">,</span> <span class="n">Write</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果想将某一路径下的所有public的item都引入到当前scope中，可以使用<code>*</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">collections</span><span class="o">::*</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>一般业务代码文件内的单元测试中常用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="cp">#[cfg(test)]</span>
</span><span class='line'><span class="kn">mod</span> <span class="n">tests</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">super</span><span class="o">::*</span><span class="p">;</span>
</span><span class='line'>    <span class="cp">#[test]</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">it_works</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样在单测mod中，可以使用父mod中的所有item。</p>

<h3>引用层级</h3>

<p>对比两段代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="err">#</span> <span class="n">case</span> <span class="mi">1</span>
</span><span class='line'><span class="kn">use</span> <span class="n">crate</span><span class="o">::</span><span class="n">front_of_house</span><span class="o">::</span><span class="n">hosting</span><span class="p">;</span>
</span><span class='line'><span class="n">hosting</span><span class="o">::</span><span class="n">add_to_waitlist</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="n">case</span> <span class="mi">2</span>
</span><span class='line'><span class="kn">use</span> <span class="n">crate</span><span class="o">::</span><span class="n">front_of_house</span><span class="o">::</span><span class="n">hosting</span><span class="o">::</span><span class="n">add_to_waitlist</span><span class="p">;</span>
</span><span class='line'><span class="n">add_to_waitlist</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>这两种方法结果一样，但是阅读起来给人的感觉是不一样的。一般来说推荐前者，因为这样可以明确的知道使用的方法是外部的hosting模块的方法，后者的话则不知道该方法是use进来的，还是本模块定义的。</p>

<h3>名称冲突</h3>

<p>有的时候可能从不同的crate或者mod引入了同名的item，这时候最简单的方式是使用 as 关键字进行重命名。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">fmt</span><span class="p">;</span>
</span><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">function1</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">fmt</span><span class="o">::</span><span class="nb">Result</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">function2</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">io</span><span class="o">::</span><span class="nb">Result</span><span class="o">&lt;</span><span class="p">()</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">fmt</span><span class="o">::</span><span class="nb">Result</span><span class="p">;</span>
</span><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="nb">Result</span> <span class="k">as</span> <span class="n">IoResult</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">function1</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">Result</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">function2</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">IoResult</span><span class="o">&lt;</span><span class="p">()</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>re-exporting 再导出</h3>

<p>当使用use关键字将外部item导入到当前scope之后，这个item在当前scope是private的，如果使用 pub use 的话，还能让使用当前mod的第三者，使用在该mod中引入的item。</p>

<p>该机制称为 re-exporting 。</p>

<h2>workspace</h2>

<p>workspace用于管理多个相关的package，不同的package有各自的Cargo.toml，但是整个workspace共享一个Cargo.lock，也只有一个target目录（编译输出）。</p>

<p>虽然workspace内的项目共享一个Cargo.lock，但是他们之间默认不互相依赖，需要显示添加它们之间的依赖关系。而且在一个项目中添加的依赖，在其他项目中如果想使用，还需要再次声明依赖才行。</p>

<p>不过据我观察workspace功能没有什么特别强大之处，不使用该功能也可以同时管理几个Cargo项目，因此这里就不再深入介绍了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于 K8s Mutating Webhook 的几点摘记]]></title>
    <link href="http://liubin.org/blog/2021/01/18/something-about-k8s-mutatingwebhook/"/>
    <updated>2021-01-18T17:03:56+08:00</updated>
    <id>http://liubin.org/blog/2021/01/18/something-about-k8s-mutatingwebhook</id>
    <content type="html"><![CDATA[<p>最近又写了一个 K8s 的 Mutating Webhook ，阅读了一下 <a href="https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/">官方文档</a>，有些特殊需要记住的地摘记如下。虽然主要是针对 Mutating 类型的 webhook 的，但是应该对 Validating 类型的 webhook 一样有效。</p>

<h2>版本说明</h2>

<p>在 K8s 里编程最麻烦的一件事就是版本的问题，以及由此引起的 go mod 的依赖问题。所以在写代码之前，参考别人的代码之前，第一件事就是要确认需要支持和使用的各 API 版本。</p>

<p>对于 Mutating Webhook 来说，在 K8s 1.9 之前，API 版本需要使用 <code>admissionregistration.k8s.io/v1beta1</code> ，如果是 1.16 之后的 K8s ，则使用 <code>admissionregistration.k8s.io/v1</code>。</p>

<h2>默认超时时间</h2>

<p>对于 <code>admissionregistration.k8s.io/v1</code> 来说，默认超时时间是 10s，对于 <code>admissionregistration.k8s.io/v1beta1</code> 来说默认的超时时间是 30s。</p>

<p>但是从 K8s 1.14 开始支持自定义超时时间。一般来说推荐使用一个较小的 timeout 值，这有两个原因，一是 webhook 一般都跑在 K8s 同一个集群中，所以不会有太大延迟。二是这个值如果太大了，会增加资源创建的延迟，降低响应时间。Webhook 耗时太长，应该说程序有问题或者设计有问题，本着 fast fail 的原则，应该设置较小的 timeout 时间。</p>

<h2>关于资源过滤器</h2>

<p>可以使用资源过滤器来过滤需要进行修改的资源。</p>

<h3>objectSelector</h3>

<p>比如下面的例子只选择带有 <code>foo: bar</code> label 的资源。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">apiVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">admissionregistration.k8s.io/v1</span>
</span><span class='line'><span class="l-Scalar-Plain">kind</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">MutatingWebhookConfiguration</span>
</span><span class='line'><span class="l-Scalar-Plain">webhooks</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my-webhook.example.com</span>
</span><span class='line'>  <span class="l-Scalar-Plain">objectSelector</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">matchLabels</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">foo</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">bar</span>
</span><span class='line'>  <span class="l-Scalar-Plain">rules</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">operations</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&quot;CREATE&quot;</span><span class="p-Indicator">]</span>
</span><span class='line'>    <span class="l-Scalar-Plain">apiGroups</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&quot;*&quot;</span><span class="p-Indicator">]</span>
</span><span class='line'>    <span class="l-Scalar-Plain">apiVersions</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&quot;*&quot;</span><span class="p-Indicator">]</span>
</span><span class='line'>    <span class="l-Scalar-Plain">resources</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&quot;*&quot;</span><span class="p-Indicator">]</span>
</span><span class='line'>    <span class="l-Scalar-Plain">scope</span><span class="p-Indicator">:</span> <span class="s">&quot;*&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>namespaceSelector</h3>

<p><code>namespaceSelector</code> 通过判断资源所在 namespace 的 labels 中是否包含指定的 laable 来对 namespaced 资源或者 Namespace 类型的资源进行筛选。如果要检查的对象类型就是 Namespace ，则会对其 <code>object.metadata.labels</code> 进行判断。</p>

<p><code>namespaceSelector</code> 对集群级别的资源无效。</p>

<p>这个例子显示的是一个 validating 类型的 webhook ，将会匹配到 namespaced 资源的 CREATR 请求中，<code>environment</code> 被设置为 &ldquo;prod&rdquo; 或 &ldquo;staging&rdquo; 的资源：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">apiVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">admissionregistration.k8s.io/v1</span>
</span><span class='line'><span class="l-Scalar-Plain">kind</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ValidatingWebhookConfiguration</span>
</span><span class='line'><span class="nn">...</span>
</span><span class='line'><span class="l-Scalar-Plain">webhooks</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my-webhook.example.com</span>
</span><span class='line'>  <span class="l-Scalar-Plain">namespaceSelector</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">matchExpressions</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">key</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">environment</span>
</span><span class='line'>      <span class="l-Scalar-Plain">operator</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">In</span>
</span><span class='line'>      <span class="l-Scalar-Plain">values</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&quot;prod&quot;</span><span class="p-Indicator">,</span><span class="s">&quot;staging&quot;</span><span class="p-Indicator">]</span>
</span><span class='line'>  <span class="l-Scalar-Plain">rules</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">operations</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&quot;CREATE&quot;</span><span class="p-Indicator">]</span>
</span><span class='line'>    <span class="l-Scalar-Plain">apiGroups</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&quot;*&quot;</span><span class="p-Indicator">]</span>
</span><span class='line'>    <span class="l-Scalar-Plain">apiVersions</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&quot;*&quot;</span><span class="p-Indicator">]</span>
</span><span class='line'>    <span class="l-Scalar-Plain">resources</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&quot;*&quot;</span><span class="p-Indicator">]</span>
</span><span class='line'>    <span class="l-Scalar-Plain">scope</span><span class="p-Indicator">:</span> <span class="s">&quot;Namespaced&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>指定 webhook 连接方式。</h2>

<p>有两种连接设置方式，告诉 API server 如何找到 webhook 的地址，一种是直接使用 URL 指定，另一种方式是使用 K8s 的 service 资源。</p>

<h3>URL 方式</h3>

<p>这种方式只需要指定一个 <code>scheme://host:port/path</code> 格式的网址，比较简单直接，比如可以用于指定一个 K8s 之外的服务地址。</p>

<p>有一个限制，就是 <code>scheme</code> 必须是 <code>https</code> ，也就是说你可能在部署的时候会遇到证书认证的问题，关于如何创建证书，特别是自签名的证书，这里就不作说明了。</p>

<p>同时这种方式有一个限制，就是不支持 <code>user@pass</code> 这样的 basic 认证，也不支持在 URL 中使用 <code>?</code> 或 <code>#</code> 这两个 href 中具特殊意义的分隔符。</p>

<p>示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">apiVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">admissionregistration.k8s.io/v1</span>
</span><span class='line'><span class="l-Scalar-Plain">kind</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">MutatingWebhookConfiguration</span>
</span><span class='line'><span class="l-Scalar-Plain">webhooks</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my-webhook.example.com</span>
</span><span class='line'>  <span class="l-Scalar-Plain">clientConfig</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">url</span><span class="p-Indicator">:</span> <span class="s">&quot;https://my-webhook.example.com:9443/my-webhook-path&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>service 引用</h3>

<p>如果 webhook 运行在集群中，则通过 service 来指定 webhook 的地址会比较方便。Service 的 <code>namespace</code> 和 <code>name</code> 都是必须的， <code>port</code> 不是必须的，有一个默认值 443 ，因为要走 <code>https</code> 协议。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">apiVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">admissionregistration.k8s.io/v1</span>
</span><span class='line'><span class="l-Scalar-Plain">kind</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">MutatingWebhookConfiguration</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">webhooks</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my-webhook.example.com</span>
</span><span class='line'>  <span class="l-Scalar-Plain">clientConfig</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">caBundle</span><span class="p-Indicator">:</span> <span class="s">&quot;Ci0tLS0tQk...&lt;base64-encoded</span><span class="nv"> </span><span class="s">PEM</span><span class="nv"> </span><span class="s">bundle</span><span class="nv"> </span><span class="s">containing</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">CA</span><span class="nv"> </span><span class="s">that</span><span class="nv"> </span><span class="s">signed</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">webhook&#39;s</span><span class="nv"> </span><span class="s">serving</span><span class="nv"> </span><span class="s">certificate&gt;...tLS0K&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">service</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">namespace</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my-service-namespace</span>
</span><span class='line'>      <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my-service-name</span>
</span><span class='line'>      <span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/my-path</span>
</span><span class='line'>      <span class="l-Scalar-Plain">port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1234</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：这时候 ca 证书签署时 server 名必须为 <code>&lt;svc_name&gt;.&lt;svc_namespace&gt;.svc</code> 。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bash 常用 if 判断条件]]></title>
    <link href="http://liubin.org/blog/2021/01/05/shell-test-command/"/>
    <updated>2021-01-05T11:47:07+08:00</updated>
    <id>http://liubin.org/blog/2021/01/05/shell-test-command</id>
    <content type="html"><![CDATA[<p>作为一个运维，Shell 技能是必不可少的，只是 Shell 语法确实有些古怪，经常要查文档或者参考之前的代码。</p>

<h2>数值比较</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if [ ${foo} -eq 0 ]; then</span></code></pre></td></tr></table></div></figure>


<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>-eq </td>
<td> 相等     </td>
<td> equal                </td>
</tr>
<tr>
<td>-ne </td>
<td> 不相等 </td>
<td> not equal            </td>
</tr>
<tr>
<td>-lt </td>
<td> 小于     </td>
<td> less than            </td>
</tr>
<tr>
<td>-le </td>
<td> 小于等于       </td>
<td> less than or equal   </td>
</tr>
<tr>
<td>-gt </td>
<td> 大于     </td>
<td> greater than         </td>
</tr>
<tr>
<td>-ge </td>
<td> 大于等于       </td>
<td> greater than or equal</td>
</tr>
</tbody>
</table>


<h2>字符串比较</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if [ "${foo}" = "bar" ]; then</span></code></pre></td></tr></table></div></figure>


<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>=  </td>
<td> 相等 </td>
</tr>
<tr>
<td>!= </td>
<td> 不相等 </td>
</tr>
</tbody>
</table>


<h2>字符串长度的比较</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  if [ -z ${foor} ]; then</span></code></pre></td></tr></table></div></figure>


<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-z </td>
<td> 长度为 0    </td>
</tr>
<tr>
<td>-n </td>
<td> 长度大于 0 </td>
</tr>
</tbody>
</table>


<h2>文件、文件夹判断</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if [ -d ${foo} ]; then</span></code></pre></td></tr></table></div></figure>


<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-d </td>
<td> 如果是文件夹则返回true        </td>
</tr>
<tr>
<td>-f </td>
<td> 是否为普通文件        </td>
</tr>
<tr>
<td>-s </td>
<td> 文件大小是否大于 0  </td>
</tr>
<tr>
<td>-e </td>
<td> 存在           </td>
</tr>
<tr>
<td>-r </td>
<td> 文件可读         </td>
</tr>
<tr>
<td>-w </td>
<td> 文件可写        </td>
</tr>
<tr>
<td>-x </td>
<td> 可执行文件        </td>
</tr>
</tbody>
</table>


<p>最后更新： 2020-1-5</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I'm back]]></title>
    <link href="http://liubin.org/blog/2020/12/17/im-back/"/>
    <updated>2020-12-17T12:32:17+08:00</updated>
    <id>http://liubin.org/blog/2020/12/17/im-back</id>
    <content type="html"><![CDATA[<p>在 2020 年底，终于又想起了还有这么个页面，上次更新还是在 2018 年，2019 一年空白，不知道 2021 能记录多少。</p>

<p>主页用的是 Octopress ，但是最近换了台机器，重新 clone blog 的 repo，结果并不能像原来那样直接就发布了。关键问题在 <code>_deploy</code> 文件夹，这里面是 repo 的 master 分支，所以必须要和 repo 同步才行。</p>

<h2>Clone 代码并安装需要的软件</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone git@github.com:liubin/liubin.github.io.git blog
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>blog/
</span><span class='line'><span class="nv">$ </span>git co <span class="nb">source</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>sudo gem install octopress
</span><span class='line'><span class="nv">$ </span>bundle
</span></code></pre></td></tr></table></div></figure>


<h2>初始化 <code>_deploy</code> 目录</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone git@github.com:liubin/liubin.github.io.git _deploy
</span></code></pre></td></tr></table></div></figure>


<h2>创建新页面</h2>

<p>创建新页面并编辑：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake new_post<span class="o">[</span><span class="s2">&quot;I&#39;m back&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>编辑并预览：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake preview
</span></code></pre></td></tr></table></div></figure>


<p>发布：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake generate
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake deploy
</span></code></pre></td></tr></table></div></figure>


<p>最后别忘了提交到 <code>source</code> 分支：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git status
</span><span class='line'><span class="nv">$ </span>git add .
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;some message&quot;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[世界是 container 的，也是 microservice 的，但最终还是 serverless 的]]></title>
    <link href="http://liubin.org/blog/2018/05/04/the-world-is-full-managed/"/>
    <updated>2018-05-04T07:53:41+08:00</updated>
    <id>http://liubin.org/blog/2018/05/04/the-world-is-full-managed</id>
    <content type="html"><![CDATA[<p>副标题是这样的： “Hyper，Fargate，以及 Serverless infrastructure”。</p>

<p>世界上有两种基础设施，一种是拿来主义，另一种是自主可控。</p>

<p>原谅我也蹭个已经被浇灭的、没怎么火起来的热点。不过我们喜欢的是拿来主义，<strong>够用就行，不想也不需要过多的控制，也不想惹过多的麻烦</strong>，也就是 fully managed。</p>

<p>之所以想到写这篇文章，源于前几天看到的这篇来自微软 Azure 的博客内容： <a href="https://thenewstack.io/the-future-of-Kubernetes-is-serverless/">The Future of Kubernetes Is Serverless</a> ，然后又顺手温习了一遍 AWS CTO 所撰写的 <a href="https://www.allthingsdistributed.com/2018/04/changing-calculus-containers-cloud.html">Changing the calculus of containers in the cloud</a> 这篇文章。这两篇文章你觉得有可能有广告的嫌疑，都是在推销自家的共有云服务，但是仔细品味每一句话，我却觉得几乎没有几句废话，都很说到点子上，你可以点击进去看下原文。</p>

<p>有个前提需要说明的是，这里的 Serverless 指的是 Serverless infrastructure，而不是我们常听到的 AWS Lambda，Microsoft Azure Functions 或 Google Cloud Functions 等函数（功能）即服务（FaaS）技术，为了便于区分，我们将这些 FaaS 称为无服务器计算，和我们本文要介绍的无服务器基础设施还是不一样的。</p>

<h2>IaaS：变革的开始</h2>

<p>说到基础设施，首先来介绍下最先出现的 IaaS，即基础设施即服务。IaaS 免除了大部分硬件的 provision 工作，没人再关心机架、电源和服务器问题，使得运维工作更快捷，更轻松，感觉解放了很多人，让大家走上了富裕之路。</p>

<p>当然这一代的云计算服务，可不只是可以几分钟启动一台虚拟机那么简单。</p>

<p>除了 VM 之外， IaaS 厂商还提供了很多其他基础设施和中间件服务，这些组件被称为 building block ，比如网络和防火墙、数据库、缓存等老三样，最近还出现了非常多非常多的业务场景服务，大数据、机器学习和算法，以及IoT等，看起来就像个百货商店，使用云计算就像购物，架构设计就是购物清单，架构里的组件都可以在商店里买到。</p>

<p>基础设施则使用 IaaS 服务商所提供的各种服务，编写应用程序可以更专注于业务。这能带来很多好处：</p>

<ul>
<li>将精力集中投入到核心业务</li>
<li>加快上线速度</li>
<li>提高可用性</li>
<li>快速扩缩容</li>
<li>不必关心中间件的底层基础设施</li>
<li>免去繁杂的安装、配置、备份和安全管理等运维工作</li>
</ul>


<p>在 AWS 成为业界标准之后，各大软件公司，不管是新兴的还是老牌的，都开始着手打造自己的云，国外有微软、谷歌、IBM等，国内的 BAT 也都有自己的云，以及京东和美团这样的电商类公司也有自己的云产品，独立的厂商类似 UCloud 和青云等公司也发展的不错，甚至有开饭馆的也要出来凑热闹。而开源软件 OpenStack 和基于 OS 的创业公司和产品也层出不穷。</p>

<p>全民皆云。</p>

<h2>容器：云计算的深入人心</h2>

<p>之后在 2013 年，容器技术开始面向大众普及了。在 LXC 之前，容器对普通开发人员甚至 IT 业者来说几乎不是同一个维度的术语，那是些专业人员才能掌控的晦涩的术语和繁杂的命令集，大部分人都没有用过容器技术；但是随着 Docker 的出现，容器技术的门槛降低，也在软件行业变得普及。随着几年的发展，基本可以说容器技术已经非常成熟，已成为了开发的标配。</p>

<p>随着容器技术的成熟和普及，应用程序架构也出现了新的变化，可以说软件和基础设施的进化相辅相成。人们越来越多的认识到对技术栈的分层和解耦更加重要，不同层之间的技术和责任、所有权等界限清晰明了，这也和软件设计中的模块松耦合原则很相像。</p>

<p>在有了责权明晰的分层结构之后，每个人可以更容易集中在自己所关注的重点上。开发人员更关注应用程序本身了，在 Docker 火了的同时，也出现了 app-centric 的概念。甚至 CoreOS 还将自己对抗 OCI/runc 的标准称为 appc 。当然现在的 Docker 也不是原来的 Docker ，也是一个组件化的东西，很多组件，尤其是 runtime ，都可以替换为其他运行时。</p>

<p>和以应用程序为重心相对应的是传统的以基础设施为中心，即先有基础设施，围绕基础设施做架构设计和开发、部署，受基础设施的限制较多。而随着 IaaS 等服务的兴起，基础设施越来越简单，越来越多容易入手，而且还提供了编程化的接口，开发人员也可以非常方便的对基础设施进行管理，可以说云计算的出现也使得开发人员抢了一部分运维人员的饭碗（遗憾的是这种趋势太 high 了停不下来。。。）。</p>

<p>当然，现在以应用为中心这一概念也已经深入人心。特别是进化到极致的 FaaS ，自己只需要写几行代码，其他平台全给搞定了。</p>

<h2>编排：兵家必争之地</h2>

<p>容器解决了代码的可移植性的问题，也使得在云计算中出现新的基础设施应用模式成为可能。使用一个一致的、不可变的部署制品，比如镜像，可以让我们从复杂的服务器部署中解脱出来，也可以非常方便的部署到不同的运行环境中（可移植性）。</p>

<p>但是容器的出现也增加了新的工作内容，要想使用容器运行我们的代码，就需要一套容器管理系统，在我们编写完代码，打包到容器之后，需要选择合适的运行环境，设置好正确的扩容配置，相关的网络连接，安全策略和访问控制，以及监控、日志和分布式追踪系统。</p>

<p>之所以出现编排系统，就是因为一台机器已经不够用了，我们要准备很多机器，在上面跑容器，而且我不关心容器跑在哪台机器上，这个交给调度系统就行了。可以说，从一定层面上，编排系统逐渐淡化了主机这一概念，我们面对的是一个资源池，是一组机器，有多少个 CPU 和多少的内存等计算资源可用。</p>

<p>rkt vs Docker 的战争从开始其实就可以预料到结局，但在编排系统/集群管理上，这场“战争”则有着更多的不确定性。</p>

<p>Mesos（DC/OS）出来的最早，还有 Twitter 等公司做案例，也是早期容器调度系统的标配；Swarm 借助其根正苗红以及简单性、和 Docker 的亲和性，也要争一分地盘；不过现在看来赢家应该是 K8s，K8s 有 Google 做靠山，有 Google 多年调度的经验，加上 RedHat/CoreOS 这些反 Docker 公司的站队，社区又做得红红火火，总之是赢了。</p>

<p>据说今年在哥本哈根举办的 Kubecon 有 4300 人参加。不过当初 Dockercon 也是这声势，而现在影响力已经没那么大了，有种昨日黄花、人老色衰的感觉，不知道几年之后的 Kubernetes 将来会如何，是否会出现新的产品或服务来撼动 Kubernetes 现在的地位？虽然不一定，但是我们期待啊。</p>

<h2>Serverless infrastructure：进化的结果</h2>

<p>但是呢，淡化主机的存在性也只是淡化而已，并没有完全消除主机的概念，只是我们直接面向主机的机会降低了，不再直接面向主机进行部署，也不会为某些部门分配独占的主机等。主机出了问题还得重启，资源不够了还得添加新的主机，管理工作并没有完全消失。</p>

<p>但是管理一套集群带来了很大的复杂性，这也和使用云计算的初衷相反，更称不上云原生。</p>

<p>从用户的角度再次审视一下，可以发现一个长时间被我们忽略的问题：为什么只是想运行容器，非得先买一台 VM 装好 Docker，或者自己搭建一套 Kubernetes 集群，或者使用类似 EKS 这样的服务，乐此不疲的进行各种配置和调试，不仅花费固定的资产费，还增加了很多并没有任何价值的运维管理工作。</p>

<p>既然我们嫌弃手动在多台主机中部署容器过于麻烦，将其交给集群管理和调度系统去做，那么维护调度系统同样繁杂的工作，是不是也可以交给别人来做，外包出去呢？</p>

<p>按照精益思想，这些和核心业务目标无关，不能带来任何用户价值的过程，都属于浪费行为，都需要提出。</p>

<p>这时候，出现了 Serverless infrastructure 服务，最早的比如国内的 <a href="https://hyper.sh/">hyper.sh</a> （2016.8 GA），以及去年发布的 AWS 的 Fargate（2017.12），微软的 ACI（Azure Container Instance，2017.7） 等。</p>

<p>以 hyper.sh 为例，使用起来和 Docker 非常类似，可以将本地的 Docker 体验原封不动的搬到云端：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install hyper 
</span><span class='line'>$ hyper pull mysql 
</span><span class='line'>$ hyper run mysql 
</span><span class='line'>MySQL is running... 
</span><span class='line'>$ hyper run --link mysql wordpress 
</span><span class='line'>WordPress is running... 
</span><span class='line'>$ hyper fip attach 22.33.44.55 wordpress 
</span><span class='line'>22.33.44.55
</span><span class='line'>$ open 22.33.44.55</span></code></pre></td></tr></table></div></figure>


<p>大部分命令从 <code>docker</code> 换成 <code>hyper</code> 就可以了，体验如同使用 Docker 一模一样，第一次看到这样的应用给人的新奇感，并不亚于当初的 Docker 。</p>

<p>使用 Serverless infrastructure，我们可以再不必为如下事情烦恼：</p>

<ul>
<li>不必再去费心选择 VM 实例的类型，需要多少 CPU 和内存</li>
<li>不必再担心使用什么版本的 Docker 和集群管理软件</li>
<li>不必担心 VM 内中间件的安全漏洞</li>
<li>不必担心集群资源利用率太低</li>
<li>从为资源池付费变为为运行中的容器付费</li>
<li>完全不可变基础设施</li>
<li>不用因为 ps 时看到各种无聊的 agent 而心理膈应</li>
</ul>


<p>我们需要做的就是安心写自己的业务应用，构建自己的镜像，选择合适的容器大小，付钱给 cloud 厂商，让他们把系统做好，股票涨高高。</p>

<h2>Fargate（此处也可以换做 ACI ）：大厂表态</h2>

<p>尽管 AWS 不像 GCP 那样“热衷”于容器，但是 AWS 也还是早就提供了 ECS（Elastic Container Service）服务。</p>

<p>去年发布的 AWS Fargate 则是个无服务器的容器服务，Fargate 是为了实现 AWS 的容器服务，比如 ECS（Elastic Container Service） 和 EKS（Elastic Kubernetes Service） 等，将容器运行所需要的基础设施进行抽象化的技术，并且现在 ECS 已经可以直接使用 Fargate。</p>

<p>和提供虚拟机的 EC2 不同，Fargate 提供的是容器运行实例，用户以容器作为基本的运算单位，而不必担心底层主机实例的管理，用户只需建立容器镜像，指定所需要的 CPU 和内存大小，设置相应的网络和IAM（身分管理）策略即可。</p>

<p>对于前面我们的疑问，AWS 的答案是基础设施的坑我们来填，你们只需要专心写好自己的应用程序就行了，你不必担心启动多少资源，我们来帮你进行容量管理，你只需要为你的使用付费就行了。</p>

<p>可以说 Fargate 和 Lambda 等产品都诞生于此哲学之下。</p>

<p>终于可以专心编写自己最擅长的 CRUD 了，happy，happy。</p>

<h2>Serverless infrastructure vs Serverless compute</h2>

<p>再多说几句，主要是为了帮助大家辨别两种不同的无服务器架构：无服务器计算和无服务器基础设施。</p>

<p>说实话一下子从 EC2 迁移到 Lambda ，这步子确实有点大。</p>

<p>Lambda 等 FaaS 产品虽然更加简单，但是存在有如下很多缺点：</p>

<ul>
<li>使用场景：Lambda 更适合用户操作或事件驱动，不适合做守护服务、批处理等业务</li>
<li>灵活性：固定的内核、AMI等，无法定制</li>
<li>资源限制：文件系统、内存、进程线程数、请求 body 大小以及执行时间等很多限制</li>
<li>编程语言限制</li>
<li>很难做服务治理</li>
<li>不方便调试和测试</li>
</ul>


<p>Lambda 和容器相比最大的优势就是运维工作更少，基本没有，而且计费更精确，不需要为浪费的计算资源买单，而且 Lambda 响应更快，扩容效率会高一些。</p>

<p>可以认为 Fargate 等容器实例，就是结合了 EC2 实例和 Lambda 优点的产品，既像 Lambda 一样轻量，更关注核心的应用程序，还能像 EC2 一样带来很大的灵活性和可控性。</p>

<p>云原生会给用户更多的控制，但是需要用户更少的投入和负担。</p>

<p>Serverless infrastructure 可以让容器更加 cloud native。</p>

<h2>fully managed：大势所趋</h2>

<p>所谓的 fully managed，可以理解为用户花费很少的成本，就可以获得想要的产品、服务并可以进行相应的控制。</p>

<p>这两天，阿里云发布了 Serverless Kubernetes ，Serverless Kubernetes 与原生的 Kubernetes 完全兼容，可以采用标准的 API、CLI 来部署和管理应用，还可以继续使用各种传统资产，并且还能获得企业级的高可用和安全性保障。难道以后我们连 Kubernetes 也不用自己装了，大部分人只需要掌握 kubectl 命令就好了。</p>

<p>IaaS 的出现，让我们丢弃了各种 provision 工具，同时，各种 configuration management 工具如雨后春笋般的出现和普及；容器的出现，又让我们扔掉了刚买还没看几页的各种 Chef/Puppet 入门/圣经，匆忙学起 Kubernetes；有了 Serverless infrastructure，也差不多可以和各种编排工具说拜拜了。</p>

<p>不管你们是在单体转微服务，还是在传统上云、转容器，估计大家都会喜欢上 fully managed 的服务，人人都做 Ops，很多运维工作都可以共同分担。当然，也会有一部分运维工程师掩面而逃。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google 发布 gVisor - 容器沙箱运行时（sandboxed container runtime）]]></title>
    <link href="http://liubin.org/blog/2018/05/02/gvisor/"/>
    <updated>2018-05-02T07:53:41+08:00</updated>
    <id>http://liubin.org/blog/2018/05/02/gvisor</id>
    <content type="html"><![CDATA[<p>这是来自官方博客 <a href="https://cloudplatform.googleblog.com/2018/05/Open-sourcing-gVisor-a-sandboxed-container-runtime.html">Open-sourcing gVisor, a sandboxed container runtime</a> 的摘要及翻译。</p>

<p>自 Docker 的普及开始，我们开发、打包和部署应用的方式发生了根本性的变化，但是由于容器的隔离技术所限，并不是所有的人都推崇使用容器技术，因为其共享内核机制，系统还存在很大的攻击面，这就会存在恶意应用程序侵入系统的威胁。</p>

<p>为了运行那些不可信以及存在潜在威胁的容器，人们开始更加重视沙箱容器：一种能在宿主机和应用程序之间提供更安全的隔离机制。</p>

<p>Google 发布的 gVisor ，就是这样一种新型的沙箱容器技术，它能为容器提供更安全的隔离，同时比虚拟机（VM）更轻量。 而且，gVisor 还能和 Docker 以及 Kubernetes 集成在一起，使得在生产环境中运行沙箱容器更简单。</p>

<h2>传统的 Linux 容器并非沙箱</h2>

<p>传统 Linux 容器中运行的应用程序与常规（非容器化）应用程序以相同的方式访问系统资源：直接对主机内核进行系统调用。内核以特权模式运行，允许它与必要的硬件交互并将结果返回给应用程序。</p>

<p><img src="http://ourcolorfuldays.com/wp-content/uploads/2018/04/traditional-linux-containers-gvisor.png" alt="" /></p>

<p>在传统的容器技术中，内核会对应用程序需要访问的资源施加一些限制。这些限制通过使用 Linux 的 cgroups 和命名空间技术来实现，然而并非所有的资源都可以通过这些机制来进行控制。此外，即使使用这些限制，内核仍然面向恶意程序暴露出过多的攻击面。</p>

<p>像 seccomp 这样的技术可以在应用程序和主机内核之间提供更好的隔离，但是它们要求用户创建预定义的系统调用白名单。在实际中，很难事先罗列出应用程序所需要的所有系统调用。如果你需要调用的系统调用存在漏洞，那么这类过滤器也很难发挥作用。</p>

<h2>已有基于 VM 的容器技术</h2>

<p>提高容器隔离性的一种方法是将容器运行在其自己的虚拟机（VM）之内。也就是为每个容器提供自己专用的“机器”，包括内核和虚拟化设备，并与主机完全分离。即使 guest 虚拟机存在漏洞，管理程序（ hypervisor ）仍会隔离主机以及主机上运行的其他应用程序/容器。</p>

<p><img src="http://ourcolorfuldays.com/wp-content/uploads/2018/04/vm-based-container-technology-gvisor-300x272.png" alt="" /></p>

<p>在不同的 VM 中运行容器提供了很好的隔离性、兼容性和性能，但也可能需要更大的资源占用。</p>

<p>Kata containers 是一个开源项目，它使用精简的虚拟机来尽量减少资源的占用，并最大限度地提高隔离容器的性能。与 gVisor 一样，Kata 也包含与 Docker 和 Kubernetes 兼容的 OCI （Open Container Initiative ）运行时。</p>

<h2>基于 gVisor 的沙箱容器（ Sandboxed containers ）</h2>

<p>gVisor 比 VM 更轻量，同时具备相同的隔离级别。 gVisor 的核心是一个以普通非特权进程方式运行的内核，它支持大多数 Linux 系统调用。这个内核是用 Go 编写的，选择 Go 语言是由于其较小的内存占用以及类型安全等特性。和虚拟机一样，在 gVisor 沙箱中运行的应用程序也可以拥有独立于主机和其他沙箱、自己独自的内核和一组虚拟设备。</p>

<p><img src="http://ourcolorfuldays.com/wp-content/uploads/2018/04/gvisor-sandbox-containers-300x184.png" alt="" /></p>

<p>gVisor 通过拦截应用程序的系统调用，并充当 guest 内核，提供了非常强的隔离性，而所有的这些都运行在用户空间。和虚拟机在创建时需要一定的资源不同，gVisor 可以像普通 Linux 进程一样，随时调整自己的资源使用。可以将 gVisor 看做是一个完全虚拟化的操作系统，但是与完整的虚拟机相比，它具有灵活的资源占用和更低的固定成本。</p>

<p>但是，这种灵活性的代价是单个系统调用的消耗、应用程序的兼容性（和系统调用相关）以及其他问题。</p>

<p>“安全工作负载（workloads）是业界的首要任务，我们很高兴看到像 gVisor 这样的创新，并期待在规范方面进行合作，并对相关技术组件进行改进，从而为生态系统带来更大的安全性。”</p>

<ul>
<li>Samuel Ortiz，Kata 技术指导委员会成员，英特尔公司首席工程师</li>
</ul>


<p>“Hyper 非常高兴看到 gVisor 这样全新的提高容器隔离性的方法。行业需要一个强大的安全容器技术生态系统，我们期待通过与 gVisor 的合作让安全容器成为主流。“</p>

<ul>
<li>Xu Wang，Kata 技术指导委员会成员，Hyper.sh CTO</li>
</ul>


<h2>和 Docker、Kubernetes 集成</h2>

<p>gVisor 运行时可以通过 <code>runsc</code>（run Sandboxed Container） 和 Docker 以及 Kubernetes 进行无缝集成。</p>

<p>runsc 运行时与 Docker 的默认容器运行时 runc 可以互换。runsc 的安装很简单，一旦安装完成，只需要在运行 docker 的时候增加一个参数就可以使用沙箱容器：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker run --runtime=runsc hello-world
</span><span class='line'>$ docker run --runtime=runsc -p 3306:3306 mysql</span></code></pre></td></tr></table></div></figure>


<p>在 Kubernetes 中，大多数资源隔离都以 Pod 为单位，因此 Pod 也自然成为了 gVisor 沙箱的边界（boundary）。Kubernetes 社区目前正在致力于实现沙箱 Pod API，但是今天 gVisor 沙箱已经可以在实验版中（experimental support）可用。</p>

<p>runsc 运行时可以通过 cri-o 或 cri-containerd 等项目来在 Kubernetes 群集中使用沙箱技术，这些项目会将 Kubelet 中的消息转换为 OCI 运行时命令。</p>

<p>gVisor 实现了大部分 Linux 系统 API （ 200 个系统调用，并且还在增加中），但并不是所有的系统调用。目前有一些系统调用和参数还没有支持，以及 /proc 和 /sys 文件系统的一些部分内容。因此，并不是说所有的应用程序都可以在 gVisor 中正常运行，但大部分应用程序应该都可以正常运行，包括 Node.js、Java 8、MySQL、Jenkins、Apache、Redis 和 MongoDB 等等。</p>

<p>gVisor 已经开源，可以在 <a href="https://github.com/google/gvisor">https://github.com/google/gvisor</a> 查看到其内容，相信这里将会是大家了解 gVisor 最好的开始。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[向 Kubernetes 学习 - Controller manager 的高可用实现方式]]></title>
    <link href="http://liubin.org/blog/2018/04/28/how-to-build-controller-manager-high-available/"/>
    <updated>2018-04-28T19:04:56+08:00</updated>
    <id>http://liubin.org/blog/2018/04/28/how-to-build-controller-manager-high-available</id>
    <content type="html"><![CDATA[<p>这不是一系列入门级别的文章，也不是按部就班而来的，而是我看到哪里，发现有些代码写的精妙的地方，都值得我们学习下，顺手记录下来，一方面是让自己将来可以有迹可循，另外对大家应该也会有所帮助。而且记录本身成本并不是很高。</p>

<p>高可用部署情况下，需要部署多个controller manager （以下简称 cm ），每个 cm 需要 <code>--leader-elect=true</code> 启动参数，即告知 cm 以高可用方式启动，谁要想进行真正的工作，必须先抢到锁，被选举为 leader 才行，而抢不到所得只能待机，在 leader 因为异常终止的时候，由剩余的其余节点再次获得锁。</p>

<p>关于分布式锁的实现很多，可以自己从零开始制造。当然更简单的是基于现有中间件，比如有基于 Redis 或数据库的实现方式，最近 Zookeeper/ETCD 也提供了相关功能。但 K8s 的实现并没有使用这些方式，而是另辟蹊径使用了资源锁的概念，简单来说就是通过创建 K8s 的资源（当前的实现中实现了 ConfigMap 和 Endpoint 两种类型的资源）来维护锁的状态。</p>

<p>分布式锁一般实现原理就是大家先去抢锁，抢到的人成为 leader ，然后 leader 会定期更新锁的状态，声明自己的活动状态，不让其他人把锁抢走。K8s 的资源锁也类似，抢到锁的节点会将自己的标记（目前是hostname）设为锁的持有者，其他人则需要通过对比锁的更新时间和持有者来判断自己是否能成为新的 leader ，而 leader 则可以通过更新 <code>RenewTime</code> 来确保持续保有该锁。</p>

<p>大概看了下 K8s 的实现，老实说其实现方式并不算高雅，但是却给我们开拓了一种思路：K8s 里的 resource 是万能的，不要以为 Endpoint 只是 Endpoint 。不过反过来有时候也挺让人费解的，刚了解的时候容易摸不着头脑，也不是好事。而且 scheduler 和 cm 都采用了资源锁，但是实现起来却不尽相同，也值得吐槽下。不管怎么说，这个实现算是挺有意思的实现，值得我们深入了解下。</p>

<p>我们首先来看一下 cm 启动的时候，是如何去 <a href="https://github.com/kubernetes/kubernetes/blob/release-1.10/cmd/kube-controller-manager/app/controllermanager.go#L184-L208">初始化</a> 抢锁的。启动的时候，如果指定了 <code>--leader-elect=true</code> 参数的话，则会进入下面的代码，首先获取自己的资源标志（这里是 hostname 加一串随机数字）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">id</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Hostname</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// add a uniquifier so that two processes on the same host don&#39;t accidentally both become active</span>
</span><span class='line'><span class="nx">id</span> <span class="p">=</span> <span class="nx">id</span> <span class="o">+</span> <span class="s">&quot;_&quot;</span> <span class="o">+</span> <span class="nb">string</span><span class="p">(</span><span class="nx">uuid</span><span class="p">.</span><span class="nx">NewUUID</span><span class="p">())</span>
</span><span class='line'><span class="nx">rl</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">resourcelock</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">Generic</span><span class="p">.</span><span class="nx">ComponentConfig</span><span class="p">.</span><span class="nx">GenericComponent</span><span class="p">.</span><span class="nx">LeaderElection</span><span class="p">.</span><span class="nx">ResourceLock</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;kube-system&quot;</span><span class="p">,</span>                                 <span class="c1">// 该资源所在 Namespace</span>
</span><span class='line'>  <span class="s">&quot;kube-controller-manager&quot;</span><span class="p">,</span>                     <span class="c1">// 资源名称</span>
</span><span class='line'>  <span class="nx">c</span><span class="p">.</span><span class="nx">Generic</span><span class="p">.</span><span class="nx">LeaderElectionClient</span><span class="p">.</span><span class="nx">CoreV1</span><span class="p">(),</span>
</span><span class='line'>  <span class="nx">resourcelock</span><span class="p">.</span><span class="nx">ResourceLockConfig</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">Identity</span><span class="p">:</span>      <span class="nx">id</span><span class="p">,</span>                         <span class="c1">// 锁持有者标志</span>
</span><span class='line'>      <span class="nx">EventRecorder</span><span class="p">:</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Generic</span><span class="p">.</span><span class="nx">EventRecorder</span><span class="p">,</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面创建资源锁的代码说明请参考文中中文注释。</p>

<p>之后，在下面的代码中，资源锁，即上面的 rl（resource lock） 变量，被用于进行 leader 选举。具体的说明也嵌入在了下面的代码中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">leaderelection</span><span class="p">.</span><span class="nx">RunOrDie</span><span class="p">(</span><span class="nx">leaderelection</span><span class="p">.</span><span class="nx">LeaderElectionConfig</span><span class="p">{</span>
</span><span class='line'>  <span class="nx">Lock</span><span class="p">:</span>          <span class="nx">rl</span><span class="p">,</span>
</span><span class='line'>  <span class="c1">// 下面 3 个参数是一些重时间，租赁期间等的设置，不是很重要</span>
</span><span class='line'>  <span class="nx">LeaseDuration</span><span class="p">:</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Generic</span><span class="p">.</span><span class="nx">ComponentConfig</span><span class="p">.</span><span class="nx">GenericComponent</span><span class="p">.</span><span class="nx">LeaderElection</span><span class="p">.</span><span class="nx">LeaseDuration</span><span class="p">.</span><span class="nx">Duration</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">RenewDeadline</span><span class="p">:</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Generic</span><span class="p">.</span><span class="nx">ComponentConfig</span><span class="p">.</span><span class="nx">GenericComponent</span><span class="p">.</span><span class="nx">LeaderElection</span><span class="p">.</span><span class="nx">RenewDeadline</span><span class="p">.</span><span class="nx">Duration</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">RetryPeriod</span><span class="p">:</span>   <span class="nx">c</span><span class="p">.</span><span class="nx">Generic</span><span class="p">.</span><span class="nx">ComponentConfig</span><span class="p">.</span><span class="nx">GenericComponent</span><span class="p">.</span><span class="nx">LeaderElection</span><span class="p">.</span><span class="nx">RetryPeriod</span><span class="p">.</span><span class="nx">Duration</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">Callbacks</span><span class="p">:</span> <span class="nx">leaderelection</span><span class="p">.</span><span class="nx">LeaderCallbacks</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">OnStartedLeading</span><span class="p">:</span> <span class="nx">run</span><span class="p">,</span>                   <span class="c1">// cm 的主要工作函数</span>
</span><span class='line'>      <span class="nx">OnStoppedLeading</span><span class="p">:</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">glog</span><span class="p">.</span><span class="nx">Fatalf</span><span class="p">(</span><span class="s">&quot;leaderelection lost&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们再来看看 <a href="https://github.com/kubernetes/kubernetes/blob/release-1.10/staging/src/k8s.io/client-go/tools/leaderelection/leaderelection.go#L85-L103">LeaderElectionConfig</a> 的内容，说明见注释（其实就是将代码的英文翻译过来而已）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">LeaderElectionConfig</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 资源锁的实现对象</span>
</span><span class='line'>  <span class="nx">Lock</span> <span class="nx">rl</span><span class="p">.</span><span class="nx">Interface</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 是非 leader 在获取锁之前需要检查 leader 过期的时间</span>
</span><span class='line'>  <span class="nx">LeaseDuration</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 当前 leader 尝试更新锁状态的期限。</span>
</span><span class='line'>  <span class="nx">RenewDeadline</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 抢锁时尝试间隔</span>
</span><span class='line'>  <span class="nx">RetryPeriod</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 锁状态发生变化的时候，需要进行处理的一组回调函数</span>
</span><span class='line'>  <span class="nx">Callbacks</span> <span class="nx">LeaderCallbacks</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的 <a href="https://github.com/kubernetes/kubernetes/blob/release-1.10/staging/src/k8s.io/client-go/tools/leaderelection/leaderelection.go#L110-L119">Callbacks</a> 具体如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">Callbacks</span><span class="p">:</span> <span class="nx">leaderelection</span><span class="p">.</span><span class="nx">LeaderCallbacks</span><span class="p">{</span>
</span><span class='line'>  <span class="nx">OnStartedLeading</span><span class="p">:</span> <span class="nx">run</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">OnStoppedLeading</span><span class="p">:</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">glog</span><span class="p">.</span><span class="nx">Fatalf</span><span class="p">(</span><span class="s">&quot;leaderelection lost&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>也就是说，在获取锁（成为leader，<code>OnStartedLeading</code>）之后，将会执行 <a href="https://github.com/kubernetes/kubernetes/blob/release-1.10/cmd/kube-controller-manager/app/controllermanager.go#L137"><code>run</code></a> 方法，在失去锁（<code>OnStoppedLeading</code>）之后打印错误消息后退出。<code>run</code> 方法是 cm 的主要方法，和抢锁选主流程没什么关系，这里就不介绍了。</p>

<p>下面的 <a href="https://github.com/kubernetes/kubernetes/blob/release-1.10/staging/src/k8s.io/client-go/tools/leaderelection/resourcelock/interface.go#L37-L43">LeaderElectionRecord</a> 结构，保存了锁的信息，包括持有者（的hostname），获取时间，更新时间，leader 切换次数等（<code>LeaseDurationSeconds</code> 虽然定义了，但是并没有使用的感觉）。</p>

<p>这个结构可以说是资源锁中最重要的信息了，大家一定先混个脸熟，多念几遍 struct 的名字。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// LeaderElectionRecord is the record that is stored in the leader election annotation.</span>
</span><span class='line'><span class="c1">// This information should be used for observational purposes only and could be replaced</span>
</span><span class='line'><span class="c1">// with a random string (e.g. UUID) with only slight modification of this code.</span>
</span><span class='line'><span class="kd">type</span> <span class="nx">LeaderElectionRecord</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">HolderIdentity</span>       <span class="kt">string</span>      <span class="s">`json:&quot;holderIdentity&quot;`</span>
</span><span class='line'>  <span class="nx">LeaseDurationSeconds</span> <span class="kt">int</span>         <span class="s">`json:&quot;leaseDurationSeconds&quot;`</span>
</span><span class='line'>  <span class="nx">AcquireTime</span>          <span class="nx">metav1</span><span class="p">.</span><span class="nx">Time</span> <span class="s">`json:&quot;acquireTime&quot;`</span>
</span><span class='line'>  <span class="nx">RenewTime</span>            <span class="nx">metav1</span><span class="p">.</span><span class="nx">Time</span> <span class="s">`json:&quot;renewTime&quot;`</span>
</span><span class='line'>  <span class="nx">LeaderTransitions</span>    <span class="kt">int</span>         <span class="s">`json:&quot;leaderTransitions&quot;`</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个锁信息，就是存在 K8s 的 ConfigMap 或者 Endpoint 里面的，当然，存哪里可能大家已经想到了，只能存 annotation 里面，该 annotation 的 key 就是 <a href="https://github.com/kubernetes/kubernetes/blob/release-1.10/staging/src/k8s.io/client-go/tools/leaderelection/resourcelock/interface.go#L28"><code>control-plane.alpha.kubernetes.io/leader</code></a> 。</p>

<p>到这里总结一下就是：LeaderElectionRecord 用于保存锁的信息，但是这一信息会以 annotation 的方式，保存到 k8s 的 ConfigMap 或者 Endpoint 等资源里面。</p>

<p>下面我们来看一下资源锁的实现。</p>

<p><a href="https://github.com/kubernetes/kubernetes/blob/release-1.10/staging/src/k8s.io/client-go/tools/leaderelection/resourcelock/interface.go#L57-L76">资源锁接口</a> 的定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">Interface</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Get</span><span class="p">()</span> <span class="p">(</span><span class="o">*</span><span class="nx">LeaderElectionRecord</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">Create</span><span class="p">(</span><span class="nx">ler</span> <span class="nx">LeaderElectionRecord</span><span class="p">)</span> <span class="kt">error</span>
</span><span class='line'>  <span class="nx">Update</span><span class="p">(</span><span class="nx">ler</span> <span class="nx">LeaderElectionRecord</span><span class="p">)</span> <span class="kt">error</span>
</span><span class='line'>  <span class="nx">RecordEvent</span><span class="p">(</span><span class="kt">string</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">Identity</span><span class="p">()</span> <span class="kt">string</span>
</span><span class='line'>  <span class="nx">Describe</span><span class="p">()</span> <span class="kt">string</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>基本实现了 CRUD 几个方法，当然这里没有 D ，即 Delete，因为也没必要 Delete， 下一次抢锁的时候，抢到的 Leader 直接 Update 就可以了。</p>

<p>关键的方法我们看前 3 个就够了： Get 用于获取锁的最新信息，Update 用于更新，Create 用于创建资源锁对象，估计对大多数集群来说，只有第一次的时候才会调用 Create 创建这个对象。RecordEvent 也可以关注下，这个 event 属于锁资源，里面会记录 leader 切换等事件。</p>

<p>这里我们以 <a href="https://github.com/kubernetes/kubernetes/blob/release-1.10/staging/src/k8s.io/client-go/tools/leaderelection/resourcelock/endpointslock.go#L39">Endpoint</a> 为例（这也是默认的资源锁类型，该参数可以通过 <code>leader-elect-resource-lock</code> 来设置），来看看资源锁的具体实现。</p>

<p>下面的代码省略了对 error 的检查，你懂得。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// Get returns the election record from a Endpoints Annotation</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">el</span> <span class="o">*</span><span class="nx">EndpointsLock</span><span class="p">)</span> <span class="nx">Get</span><span class="p">()</span> <span class="p">(</span><span class="o">*</span><span class="nx">LeaderElectionRecord</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">record</span> <span class="nx">LeaderElectionRecord</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">err</span> <span class="kt">error</span>
</span><span class='line'>  <span class="c1">// el.e 就是一个正经的 Endpoint 资源对象。</span>
</span><span class='line'>  <span class="nx">el</span><span class="p">.</span><span class="nx">e</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">el</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nx">Endpoints</span><span class="p">(</span><span class="nx">el</span><span class="p">.</span><span class="nx">EndpointsMeta</span><span class="p">.</span><span class="nx">Namespace</span><span class="p">).</span><span class="nx">Get</span><span class="p">(</span><span class="nx">el</span><span class="p">.</span><span class="nx">EndpointsMeta</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">GetOptions</span><span class="p">{})</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 去获取 control-plane.alpha.kubernetes.io/leader annotation。</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">recordBytes</span><span class="p">,</span> <span class="nx">found</span> <span class="o">:=</span> <span class="nx">el</span><span class="p">.</span><span class="nx">e</span><span class="p">.</span><span class="nx">Annotations</span><span class="p">[</span><span class="nx">LeaderElectionRecordAnnotationKey</span><span class="p">];</span> <span class="nx">found</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Unmarshal</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">recordBytes</span><span class="p">),</span> <span class="o">&amp;</span><span class="nx">record</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">&amp;</span><span class="nx">record</span><span class="p">,</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/kubernetes/kubernetes/blob/release-1.10/staging/src/k8s.io/client-go/tools/leaderelection/resourcelock/endpointslock.go#L58">Create</a> 也很简单，就是一个普通的 Endpoint 对象，加上锁专用的 annotation ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">el</span><span class="p">.</span><span class="nx">e</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">el</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nx">Endpoints</span><span class="p">(</span><span class="nx">el</span><span class="p">.</span><span class="nx">EndpointsMeta</span><span class="p">.</span><span class="nx">Namespace</span><span class="p">).</span><span class="nx">Create</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Endpoints</span><span class="p">{</span>
</span><span class='line'>  <span class="nx">ObjectMeta</span><span class="p">:</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">ObjectMeta</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">Name</span><span class="p">:</span>      <span class="nx">el</span><span class="p">.</span><span class="nx">EndpointsMeta</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Namespace</span><span class="p">:</span> <span class="nx">el</span><span class="p">.</span><span class="nx">EndpointsMeta</span><span class="p">.</span><span class="nx">Namespace</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Annotations</span><span class="p">:</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span>
</span><span class='line'>          <span class="nx">LeaderElectionRecordAnnotationKey</span><span class="p">:</span> <span class="nb">string</span><span class="p">(</span><span class="nx">recordBytes</span><span class="p">),</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/kubernetes/kubernetes/blob/release-1.10/staging/src/k8s.io/client-go/tools/leaderelection/resourcelock/endpointslock.go#L76">更新方法</a> 的主体如下，将 <code>LeaderElectionRecord</code> 结构的对象序列化为字符串后，存到 annotation：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">el</span><span class="p">.</span><span class="nx">e</span><span class="p">.</span><span class="nx">Annotations</span><span class="p">[</span><span class="nx">LeaderElectionRecordAnnotationKey</span><span class="p">]</span> <span class="p">=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">recordBytes</span><span class="p">)</span>
</span><span class='line'><span class="nx">el</span><span class="p">.</span><span class="nx">e</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">el</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nx">Endpoints</span><span class="p">(</span><span class="nx">el</span><span class="p">.</span><span class="nx">EndpointsMeta</span><span class="p">.</span><span class="nx">Namespace</span><span class="p">).</span><span class="nx">Update</span><span class="p">(</span><span class="nx">el</span><span class="p">.</span><span class="nx">e</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过上面的方法，我们应该已经了解到了，锁的实现主要载体是 LeaderElectionRecord 对象，其实我们完全可以自己实现其他类型的资源锁了，比如基于 Secret ，不过好像也没啥意义。</p>

<p>介绍了上面的实现基础，我们最后来看看抢锁及使用锁的过程，<a href="https://github.com/kubernetes/kubernetes/blob/release-1.10/staging/src/k8s.io/client-go/tools/leaderelection/leaderelection.go#L138-L148">主要的入口</a> 如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// Run starts the leader election loop</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">le</span> <span class="o">*</span><span class="nx">LeaderElector</span><span class="p">)</span> <span class="nx">Run</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 先去抢锁，阻塞操作</span>
</span><span class='line'>  <span class="nx">le</span><span class="p">.</span><span class="nx">acquire</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">stop</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span>
</span><span class='line'>  <span class="c1">// 抢到锁后，执行主函数，就是我们前面提到的 run 函数，通过 Callbacks.OnStartedLeading 回调启动</span>
</span><span class='line'>  <span class="k">go</span> <span class="nx">le</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nx">OnStartedLeading</span><span class="p">(</span><span class="nx">stop</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">// 抢到锁后，需要定期更新，确保自己一直持有该锁</span>
</span><span class='line'>  <span class="nx">le</span><span class="p">.</span><span class="nx">renew</span><span class="p">()</span>
</span><span class='line'>  <span class="nb">close</span><span class="p">(</span><span class="nx">stop</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，里面主要调用了两个方法： <a href="https://github.com/kubernetes/kubernetes/blob/release-1.10/staging/src/k8s.io/client-go/tools/leaderelection/leaderelection.go#L172-L187"><code>acquire</code></a> 和 <a href="https://github.com/kubernetes/kubernetes/blob/release-1.10/staging/src/k8s.io/client-go/tools/leaderelection/leaderelection.go#L190-L206"><code>renew</code></a> 。</p>

<p>我们先来看看 <code>acquire</code> 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">le</span> <span class="o">*</span><span class="nx">LeaderElector</span><span class="p">)</span> <span class="nx">acquire</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">stop</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span>
</span><span class='line'>  <span class="nx">wait</span><span class="p">.</span><span class="nx">JitterUntil</span><span class="p">(</span><span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">succeeded</span> <span class="o">:=</span> <span class="nx">le</span><span class="p">.</span><span class="nx">tryAcquireOrRenew</span><span class="p">()</span>
</span><span class='line'>      <span class="nx">le</span><span class="p">.</span><span class="nx">maybeReportTransition</span><span class="p">()</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">!</span><span class="nx">succeeded</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">glog</span><span class="p">.</span><span class="nx">V</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nx">Infof</span><span class="p">(</span><span class="s">&quot;failed to acquire lease %v&quot;</span><span class="p">,</span> <span class="nx">desc</span><span class="p">)</span>
</span><span class='line'>          <span class="k">return</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">le</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">Lock</span><span class="p">.</span><span class="nx">RecordEvent</span><span class="p">(</span><span class="s">&quot;became leader&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">glog</span><span class="p">.</span><span class="nx">Infof</span><span class="p">(</span><span class="s">&quot;successfully acquired lease %v&quot;</span><span class="p">,</span> <span class="nx">desc</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">close</span><span class="p">(</span><span class="nx">stop</span><span class="p">)</span>
</span><span class='line'>  <span class="p">},</span> <span class="nx">le</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">RetryPeriod</span><span class="p">,</span> <span class="nx">JitterFactor</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">stop</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>实现也很短，这个函数会通过 <code>wait.JitterUntil</code> 来定期调用 <a href="https://github.com/kubernetes/kubernetes/blob/release-1.10/staging/src/k8s.io/client-go/tools/leaderelection/leaderelection.go#L211-L264"><code>tryAcquireOrRenew</code> 方法</a> 来获取锁，直到成功为止，如果获取不到锁，则会以 <code>RetryPeriod</code> 为间隔不断尝试。如果获取到锁，就会关闭 stop 通道（ <code>close(stop)</code> ），通知 <code>wait.JitterUntil</code> 停止尝试。<code>tryAcquireOrRenew</code> 是最核心的方法，我们会在介绍完 <code>renew</code> 方法之后再进行介绍。</p>

<p><code>renew</code> 只有在获取锁之后才会调用，它会通过持续更新资源锁的数据，来确保继续持有已获得的锁，保持自己的 leader 状态。这里还是用到了很多 <code>wait</code> 包里的方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">le</span> <span class="o">*</span><span class="nx">LeaderElector</span><span class="p">)</span> <span class="nx">renew</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">stop</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span>
</span><span class='line'>  <span class="nx">wait</span><span class="p">.</span><span class="nx">Until</span><span class="p">(</span><span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">err</span> <span class="o">:=</span> <span class="nx">wait</span><span class="p">.</span><span class="nx">Poll</span><span class="p">(</span><span class="nx">le</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">RetryPeriod</span><span class="p">,</span> <span class="nx">le</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">RenewDeadline</span><span class="p">,</span> <span class="kd">func</span><span class="p">()</span> <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">le</span><span class="p">.</span><span class="nx">tryAcquireOrRenew</span><span class="p">(),</span> <span class="kc">nil</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>      <span class="nx">le</span><span class="p">.</span><span class="nx">maybeReportTransition</span><span class="p">()</span>
</span><span class='line'>      <span class="nx">desc</span> <span class="o">:=</span> <span class="nx">le</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">Lock</span><span class="p">.</span><span class="nx">Describe</span><span class="p">()</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">glog</span><span class="p">.</span><span class="nx">V</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nx">Infof</span><span class="p">(</span><span class="s">&quot;successfully renewed lease %v&quot;</span><span class="p">,</span> <span class="nx">desc</span><span class="p">)</span>
</span><span class='line'>          <span class="k">return</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">le</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">Lock</span><span class="p">.</span><span class="nx">RecordEvent</span><span class="p">(</span><span class="s">&quot;stopped leading&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">glog</span><span class="p">.</span><span class="nx">Infof</span><span class="p">(</span><span class="s">&quot;failed to renew lease %v: %v&quot;</span><span class="p">,</span> <span class="nx">desc</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">close</span><span class="p">(</span><span class="nx">stop</span><span class="p">)</span>
</span><span class='line'>  <span class="p">},</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">stop</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的精妙之处在于，<code>wait.Until</code> 会不断的调用 <code>wait.Poll</code> 方法，前者是进行无限循环操作，直到 <code>stop</code> chan 被关闭，<code>wait.Poll</code>则不断的对某一条件进行检查，以 <code>RetryPeriod</code> 为间隔，直到该条件返回true、error或者超时（上面的 RenewDeadline 参数）。这一条件是一个需要满足 <code>func() (bool, error)</code> 签名的方法，比如这个例子很简单，只是调用了 <code>le.tryAcquireOrRenew()</code>。</p>

<p><code>tryAcquireOrRenew</code> 方法本身不是一个阻塞操作，只返回 true/false，对应为获取到锁和没有获取到锁的状态。结合 <code>wait.Poll</code> 来使用，该函数返回会有以下几种情况：</p>

<ul>
<li><code>tryAcquireOrRenew</code> 获取到锁，返回 true</li>
<li><code>tryAcquireOrRenew</code> 没有获取到锁，返回 false</li>
<li><code>tryAcquireOrRenew</code> 超时，返回 <code>ErrWaitTimeout</code>（errors.New(&ldquo;timed out waiting for the condition&rdquo;)）</li>
</ul>


<p>最后，我们再来重点了解下 <code>tryAcquireOrRenew</code> 的内容。renew有两个功能，获取锁，或者在已经获取锁的时候，对锁进行更新，确保锁不被他人抢走。</p>

<p>具体的说明也放到了注释里，这段代码流程上不不复杂，但是需要对前后两个状态，以及 leader 和非 leader 两个角色的不同执行流程有所分辨。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">le</span> <span class="o">*</span><span class="nx">LeaderElector</span><span class="p">)</span> <span class="nx">tryAcquireOrRenew</span><span class="p">()</span> <span class="kt">bool</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">now</span> <span class="o">:=</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">Now</span><span class="p">()</span>
</span><span class='line'>  <span class="c1">// 这个 leaderElectionRecord 就是保存在 Endpoint 的 annotation 中的值。</span>
</span><span class='line'>  <span class="c1">// 每个节点都将 HolderIdentity 设置为自己，以及关于获取和更新锁的时间。后面会对时间进行修正，才会更新到 API server</span>
</span><span class='line'>  <span class="nx">leaderElectionRecord</span> <span class="o">:=</span> <span class="nx">rl</span><span class="p">.</span><span class="nx">LeaderElectionRecord</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">HolderIdentity</span><span class="p">:</span>       <span class="nx">le</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">Lock</span><span class="p">.</span><span class="nx">Identity</span><span class="p">(),</span>
</span><span class='line'>      <span class="nx">LeaseDurationSeconds</span><span class="p">:</span> <span class="nb">int</span><span class="p">(</span><span class="nx">le</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">LeaseDuration</span> <span class="o">/</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">RenewTime</span><span class="p">:</span>            <span class="nx">now</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">AcquireTime</span><span class="p">:</span>          <span class="nx">now</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 1. 获取或者创建 ElectionRecord</span>
</span><span class='line'>  <span class="nx">oldLeaderElectionRecord</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">le</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">Lock</span><span class="p">.</span><span class="nx">Get</span><span class="p">()</span>
</span><span class='line'>  <span class="c1">// 获取记录出错，有可能是记录不存在，这种错误需要处理。</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">!</span><span class="nx">errors</span><span class="p">.</span><span class="nx">IsNotFound</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">glog</span><span class="p">.</span><span class="nx">Errorf</span><span class="p">(</span><span class="s">&quot;error retrieving resource lock %v: %v&quot;</span><span class="p">,</span> <span class="nx">le</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">Lock</span><span class="p">.</span><span class="nx">Describe</span><span class="p">(),</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">false</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="c1">// 记录不存在的话，则创建一条新的记录</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">le</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">Lock</span><span class="p">.</span><span class="nx">Create</span><span class="p">(</span><span class="nx">leaderElectionRecord</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">glog</span><span class="p">.</span><span class="nx">Errorf</span><span class="p">(</span><span class="s">&quot;error initially creating leader election record: %v&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">false</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="c1">// 创建记录成功，同时表示获得了锁，返回true</span>
</span><span class='line'>      <span class="nx">le</span><span class="p">.</span><span class="nx">observedRecord</span> <span class="p">=</span> <span class="nx">leaderElectionRecord</span>
</span><span class='line'>      <span class="nx">le</span><span class="p">.</span><span class="nx">observedTime</span> <span class="p">=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">()</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 2. 正常获取了锁资源的记录，检查锁持有者和更新时间。</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">!</span><span class="nx">reflect</span><span class="p">.</span><span class="nx">DeepEqual</span><span class="p">(</span><span class="nx">le</span><span class="p">.</span><span class="nx">observedRecord</span><span class="p">,</span> <span class="o">*</span><span class="nx">oldLeaderElectionRecord</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 记录之前的锁持有者，其实有可能就是自己。</span>
</span><span class='line'>      <span class="nx">le</span><span class="p">.</span><span class="nx">observedRecord</span> <span class="p">=</span> <span class="o">*</span><span class="nx">oldLeaderElectionRecord</span>
</span><span class='line'>      <span class="nx">le</span><span class="p">.</span><span class="nx">observedTime</span> <span class="p">=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// 在满足以下所有的条件下，认为锁由他人持有，并且还没有过期，返回 false</span>
</span><span class='line'>  <span class="c1">// a. 当前锁持有者的并非自己</span>
</span><span class='line'>  <span class="c1">// b. 上一次观察时间 + 观测检查间隔大于现在时间，即距离上次观测的间隔，小于 `LeaseDuration` 的设置值。</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">le</span><span class="p">.</span><span class="nx">observedTime</span><span class="p">.</span><span class="nx">Add</span><span class="p">(</span><span class="nx">le</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">LeaseDuration</span><span class="p">).</span><span class="nx">After</span><span class="p">(</span><span class="nx">now</span><span class="p">.</span><span class="nx">Time</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>      <span class="nx">oldLeaderElectionRecord</span><span class="p">.</span><span class="nx">HolderIdentity</span> <span class="o">!=</span> <span class="nx">le</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">Lock</span><span class="p">.</span><span class="nx">Identity</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">glog</span><span class="p">.</span><span class="nx">V</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nx">Infof</span><span class="p">(</span><span class="s">&quot;lock is held by %v and has not yet expired&quot;</span><span class="p">,</span> <span class="nx">oldLeaderElectionRecord</span><span class="p">.</span><span class="nx">HolderIdentity</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// 3. 更新资源的 annotation 内容。</span>
</span><span class='line'>  <span class="c1">// 在本函数开头 leaderElectionRecord 有一些字段被设置成了默认值，这里来设置正确的值。</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">oldLeaderElectionRecord</span><span class="p">.</span><span class="nx">HolderIdentity</span> <span class="o">==</span> <span class="nx">le</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">Lock</span><span class="p">.</span><span class="nx">Identity</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 如果自己持有锁，则继承之前的获取时间和 leader 切换次数</span>
</span><span class='line'>      <span class="nx">leaderElectionRecord</span><span class="p">.</span><span class="nx">AcquireTime</span> <span class="p">=</span> <span class="nx">oldLeaderElectionRecord</span><span class="p">.</span><span class="nx">AcquireTime</span>
</span><span class='line'>      <span class="nx">leaderElectionRecord</span><span class="p">.</span><span class="nx">LeaderTransitions</span> <span class="p">=</span> <span class="nx">oldLeaderElectionRecord</span><span class="p">.</span><span class="nx">LeaderTransitions</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 发生 leader 切换，所以 LeaderTransitions + 1</span>
</span><span class='line'>      <span class="nx">leaderElectionRecord</span><span class="p">.</span><span class="nx">LeaderTransitions</span> <span class="p">=</span> <span class="nx">oldLeaderElectionRecord</span><span class="p">.</span><span class="nx">LeaderTransitions</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 更新锁资源对象</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">le</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">Lock</span><span class="p">.</span><span class="nx">Update</span><span class="p">(</span><span class="nx">leaderElectionRecord</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">glog</span><span class="p">.</span><span class="nx">Errorf</span><span class="p">(</span><span class="s">&quot;Failed to update lock: %v&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">le</span><span class="p">.</span><span class="nx">observedRecord</span> <span class="p">=</span> <span class="nx">leaderElectionRecord</span>
</span><span class='line'>  <span class="nx">le</span><span class="p">.</span><span class="nx">observedTime</span> <span class="p">=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">()</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">true</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>再回到 <code>renew</code> 方法，在被 <code>Poll</code> 阻塞住之后，只要 <code>Poll</code> 返回了，就可以继续执行下面的代码。<code>le.maybeReportTransition()</code> 很关键，里面会判断是否出现了 leader 的切换，进而调用 <code>Callbacks</code> 的 <code>OnNewLeader</code> 方法，尽管 cm 初始化的时候并没有设置这个 Callback 方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">l</span> <span class="o">*</span><span class="nx">LeaderElector</span><span class="p">)</span> <span class="nx">maybeReportTransition</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">l</span><span class="p">.</span><span class="nx">observedRecord</span><span class="p">.</span><span class="nx">HolderIdentity</span> <span class="o">==</span> <span class="nx">l</span><span class="p">.</span><span class="nx">reportedLeader</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">l</span><span class="p">.</span><span class="nx">reportedLeader</span> <span class="p">=</span> <span class="nx">l</span><span class="p">.</span><span class="nx">observedRecord</span><span class="p">.</span><span class="nx">HolderIdentity</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">l</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nx">OnNewLeader</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">go</span> <span class="nx">l</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nx">OnNewLeader</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">reportedLeader</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码看起来比较烧脑，本文读起来也比较摸不着头，可能最好的办法就是一遍遍的阅读源代码了。</p>
]]></content>
  </entry>
  
</feed>
